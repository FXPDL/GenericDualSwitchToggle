

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Nov 03 13:39:26 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     	;# 
    39  0001                     	;# 
    40  0002                     	;# 
    41  0003                     	;# 
    42  0004                     	;# 
    43  0005                     	;# 
    44  0006                     	;# 
    45  0007                     	;# 
    46  0008                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000E                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  008C                     	;# 
    65  008E                     	;# 
    66  0091                     	;# 
    67  0092                     	;# 
    68  0093                     	;# 
    69  0095                     	;# 
    70  0096                     	;# 
    71  0097                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009B                     	;# 
    76  009C                     	;# 
    77  009D                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  010E                     	;# 
    82  0111                     	;# 
    83  0112                     	;# 
    84  0113                     	;# 
    85  0114                     	;# 
    86  0115                     	;# 
    87  0116                     	;# 
    88  0117                     	;# 
    89  0118                     	;# 
    90  0119                     	;# 
    91  011D                     	;# 
    92  018C                     	;# 
    93  018E                     	;# 
    94  0191                     	;# 
    95  0191                     	;# 
    96  0192                     	;# 
    97  0193                     	;# 
    98  0193                     	;# 
    99  0194                     	;# 
   100  0195                     	;# 
   101  0196                     	;# 
   102  0197                     	;# 
   103  020C                     	;# 
   104  0211                     	;# 
   105  0211                     	;# 
   106  0212                     	;# 
   107  0212                     	;# 
   108  0213                     	;# 
   109  0213                     	;# 
   110  0214                     	;# 
   111  0214                     	;# 
   112  0215                     	;# 
   113  0215                     	;# 
   114  0215                     	;# 
   115  0216                     	;# 
   116  0216                     	;# 
   117  0217                     	;# 
   118  0217                     	;# 
   119  0391                     	;# 
   120  0392                     	;# 
   121  0393                     	;# 
   122  0498                     	;# 
   123  0498                     	;# 
   124  0499                     	;# 
   125  049A                     	;# 
   126  049B                     	;# 
   127  049B                     	;# 
   128  049C                     	;# 
   129  049D                     	;# 
   130  049E                     	;# 
   131  049F                     	;# 
   132  0611                     	;# 
   133  0612                     	;# 
   134  0613                     	;# 
   135  0613                     	;# 
   136  0614                     	;# 
   137  0615                     	;# 
   138  0616                     	;# 
   139  0616                     	;# 
   140  0617                     	;# 
   141  0618                     	;# 
   142  0619                     	;# 
   143  0619                     	;# 
   144  061A                     	;# 
   145  061B                     	;# 
   146  061C                     	;# 
   147  061C                     	;# 
   148  0691                     	;# 
   149  0692                     	;# 
   150  0693                     	;# 
   151  0694                     	;# 
   152  0695                     	;# 
   153  0F0F                     	;# 
   154  0F10                     	;# 
   155  0F11                     	;# 
   156  0F12                     	;# 
   157  0F13                     	;# 
   158  0F14                     	;# 
   159  0F15                     	;# 
   160  0F16                     	;# 
   161  0F17                     	;# 
   162  0F18                     	;# 
   163  0F19                     	;# 
   164  0F1A                     	;# 
   165  0F1B                     	;# 
   166  0F1C                     	;# 
   167  0F1D                     	;# 
   168  0F1E                     	;# 
   169  0F1F                     	;# 
   170  0FE3                     	;# 
   171  0FE4                     	;# 
   172  0FE5                     	;# 
   173  0FE6                     	;# 
   174  0FE7                     	;# 
   175  0FE8                     	;# 
   176  0FE9                     	;# 
   177  0FEA                     	;# 
   178  0FEB                     	;# 
   179  0FED                     	;# 
   180  0FEE                     	;# 
   181  0FEF                     	;# 
   182  0000                     	;# 
   183  0001                     	;# 
   184  0002                     	;# 
   185  0003                     	;# 
   186  0004                     	;# 
   187  0005                     	;# 
   188  0006                     	;# 
   189  0007                     	;# 
   190  0008                     	;# 
   191  0009                     	;# 
   192  000A                     	;# 
   193  000B                     	;# 
   194  000C                     	;# 
   195  000E                     	;# 
   196  0011                     	;# 
   197  0012                     	;# 
   198  0013                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001C                     	;# 
   208  008C                     	;# 
   209  008E                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0093                     	;# 
   213  0095                     	;# 
   214  0096                     	;# 
   215  0097                     	;# 
   216  0099                     	;# 
   217  009A                     	;# 
   218  009B                     	;# 
   219  009B                     	;# 
   220  009C                     	;# 
   221  009D                     	;# 
   222  009E                     	;# 
   223  009F                     	;# 
   224  010C                     	;# 
   225  010E                     	;# 
   226  0111                     	;# 
   227  0112                     	;# 
   228  0113                     	;# 
   229  0114                     	;# 
   230  0115                     	;# 
   231  0116                     	;# 
   232  0117                     	;# 
   233  0118                     	;# 
   234  0119                     	;# 
   235  011D                     	;# 
   236  018C                     	;# 
   237  018E                     	;# 
   238  0191                     	;# 
   239  0191                     	;# 
   240  0192                     	;# 
   241  0193                     	;# 
   242  0193                     	;# 
   243  0194                     	;# 
   244  0195                     	;# 
   245  0196                     	;# 
   246  0197                     	;# 
   247  020C                     	;# 
   248  0211                     	;# 
   249  0211                     	;# 
   250  0212                     	;# 
   251  0212                     	;# 
   252  0213                     	;# 
   253  0213                     	;# 
   254  0214                     	;# 
   255  0214                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0216                     	;# 
   260  0216                     	;# 
   261  0217                     	;# 
   262  0217                     	;# 
   263  0391                     	;# 
   264  0392                     	;# 
   265  0393                     	;# 
   266  0498                     	;# 
   267  0498                     	;# 
   268  0499                     	;# 
   269  049A                     	;# 
   270  049B                     	;# 
   271  049B                     	;# 
   272  049C                     	;# 
   273  049D                     	;# 
   274  049E                     	;# 
   275  049F                     	;# 
   276  0611                     	;# 
   277  0612                     	;# 
   278  0613                     	;# 
   279  0613                     	;# 
   280  0614                     	;# 
   281  0615                     	;# 
   282  0616                     	;# 
   283  0616                     	;# 
   284  0617                     	;# 
   285  0618                     	;# 
   286  0619                     	;# 
   287  0619                     	;# 
   288  061A                     	;# 
   289  061B                     	;# 
   290  061C                     	;# 
   291  061C                     	;# 
   292  0691                     	;# 
   293  0692                     	;# 
   294  0693                     	;# 
   295  0694                     	;# 
   296  0695                     	;# 
   297  0F0F                     	;# 
   298  0F10                     	;# 
   299  0F11                     	;# 
   300  0F12                     	;# 
   301  0F13                     	;# 
   302  0F14                     	;# 
   303  0F15                     	;# 
   304  0F16                     	;# 
   305  0F17                     	;# 
   306  0F18                     	;# 
   307  0F19                     	;# 
   308  0F1A                     	;# 
   309  0F1B                     	;# 
   310  0F1C                     	;# 
   311  0F1D                     	;# 
   312  0F1E                     	;# 
   313  0F1F                     	;# 
   314  0FE3                     	;# 
   315  0FE4                     	;# 
   316  0FE5                     	;# 
   317  0FE6                     	;# 
   318  0FE7                     	;# 
   319  0FE8                     	;# 
   320  0FE9                     	;# 
   321  0FEA                     	;# 
   322  0FEB                     	;# 
   323  0FED                     	;# 
   324  0FEE                     	;# 
   325  0FEF                     	;# 
   326  0000                     	;# 
   327  0001                     	;# 
   328  0002                     	;# 
   329  0003                     	;# 
   330  0004                     	;# 
   331  0005                     	;# 
   332  0006                     	;# 
   333  0007                     	;# 
   334  0008                     	;# 
   335  0009                     	;# 
   336  000A                     	;# 
   337  000B                     	;# 
   338  000C                     	;# 
   339  000E                     	;# 
   340  0011                     	;# 
   341  0012                     	;# 
   342  0013                     	;# 
   343  0015                     	;# 
   344  0016                     	;# 
   345  0016                     	;# 
   346  0017                     	;# 
   347  0018                     	;# 
   348  0019                     	;# 
   349  001A                     	;# 
   350  001B                     	;# 
   351  001C                     	;# 
   352  008C                     	;# 
   353  008E                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0095                     	;# 
   358  0096                     	;# 
   359  0097                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  010C                     	;# 
   369  010E                     	;# 
   370  0111                     	;# 
   371  0112                     	;# 
   372  0113                     	;# 
   373  0114                     	;# 
   374  0115                     	;# 
   375  0116                     	;# 
   376  0117                     	;# 
   377  0118                     	;# 
   378  0119                     	;# 
   379  011D                     	;# 
   380  018C                     	;# 
   381  018E                     	;# 
   382  0191                     	;# 
   383  0191                     	;# 
   384  0192                     	;# 
   385  0193                     	;# 
   386  0193                     	;# 
   387  0194                     	;# 
   388  0195                     	;# 
   389  0196                     	;# 
   390  0197                     	;# 
   391  020C                     	;# 
   392  0211                     	;# 
   393  0211                     	;# 
   394  0212                     	;# 
   395  0212                     	;# 
   396  0213                     	;# 
   397  0213                     	;# 
   398  0214                     	;# 
   399  0214                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0215                     	;# 
   403  0216                     	;# 
   404  0216                     	;# 
   405  0217                     	;# 
   406  0217                     	;# 
   407  0391                     	;# 
   408  0392                     	;# 
   409  0393                     	;# 
   410  0498                     	;# 
   411  0498                     	;# 
   412  0499                     	;# 
   413  049A                     	;# 
   414  049B                     	;# 
   415  049B                     	;# 
   416  049C                     	;# 
   417  049D                     	;# 
   418  049E                     	;# 
   419  049F                     	;# 
   420  0611                     	;# 
   421  0612                     	;# 
   422  0613                     	;# 
   423  0613                     	;# 
   424  0614                     	;# 
   425  0615                     	;# 
   426  0616                     	;# 
   427  0616                     	;# 
   428  0617                     	;# 
   429  0618                     	;# 
   430  0619                     	;# 
   431  0619                     	;# 
   432  061A                     	;# 
   433  061B                     	;# 
   434  061C                     	;# 
   435  061C                     	;# 
   436  0691                     	;# 
   437  0692                     	;# 
   438  0693                     	;# 
   439  0694                     	;# 
   440  0695                     	;# 
   441  0F0F                     	;# 
   442  0F10                     	;# 
   443  0F11                     	;# 
   444  0F12                     	;# 
   445  0F13                     	;# 
   446  0F14                     	;# 
   447  0F15                     	;# 
   448  0F16                     	;# 
   449  0F17                     	;# 
   450  0F18                     	;# 
   451  0F19                     	;# 
   452  0F1A                     	;# 
   453  0F1B                     	;# 
   454  0F1C                     	;# 
   455  0F1D                     	;# 
   456  0F1E                     	;# 
   457  0F1F                     	;# 
   458  0FE3                     	;# 
   459  0FE4                     	;# 
   460  0FE5                     	;# 
   461  0FE6                     	;# 
   462  0FE7                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEB                     	;# 
   467  0FED                     	;# 
   468  0FEE                     	;# 
   469  0FEF                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000E                     	;# 
   484  0011                     	;# 
   485  0012                     	;# 
   486  0013                     	;# 
   487  0015                     	;# 
   488  0016                     	;# 
   489  0016                     	;# 
   490  0017                     	;# 
   491  0018                     	;# 
   492  0019                     	;# 
   493  001A                     	;# 
   494  001B                     	;# 
   495  001C                     	;# 
   496  008C                     	;# 
   497  008E                     	;# 
   498  0091                     	;# 
   499  0092                     	;# 
   500  0093                     	;# 
   501  0095                     	;# 
   502  0096                     	;# 
   503  0097                     	;# 
   504  0099                     	;# 
   505  009A                     	;# 
   506  009B                     	;# 
   507  009B                     	;# 
   508  009C                     	;# 
   509  009D                     	;# 
   510  009E                     	;# 
   511  009F                     	;# 
   512  010C                     	;# 
   513  010E                     	;# 
   514  0111                     	;# 
   515  0112                     	;# 
   516  0113                     	;# 
   517  0114                     	;# 
   518  0115                     	;# 
   519  0116                     	;# 
   520  0117                     	;# 
   521  0118                     	;# 
   522  0119                     	;# 
   523  011D                     	;# 
   524  018C                     	;# 
   525  018E                     	;# 
   526  0191                     	;# 
   527  0191                     	;# 
   528  0192                     	;# 
   529  0193                     	;# 
   530  0193                     	;# 
   531  0194                     	;# 
   532  0195                     	;# 
   533  0196                     	;# 
   534  0197                     	;# 
   535  020C                     	;# 
   536  0211                     	;# 
   537  0211                     	;# 
   538  0212                     	;# 
   539  0212                     	;# 
   540  0213                     	;# 
   541  0213                     	;# 
   542  0214                     	;# 
   543  0214                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0216                     	;# 
   548  0216                     	;# 
   549  0217                     	;# 
   550  0217                     	;# 
   551  0391                     	;# 
   552  0392                     	;# 
   553  0393                     	;# 
   554  0498                     	;# 
   555  0498                     	;# 
   556  0499                     	;# 
   557  049A                     	;# 
   558  049B                     	;# 
   559  049B                     	;# 
   560  049C                     	;# 
   561  049D                     	;# 
   562  049E                     	;# 
   563  049F                     	;# 
   564  0611                     	;# 
   565  0612                     	;# 
   566  0613                     	;# 
   567  0613                     	;# 
   568  0614                     	;# 
   569  0615                     	;# 
   570  0616                     	;# 
   571  0616                     	;# 
   572  0617                     	;# 
   573  0618                     	;# 
   574  0619                     	;# 
   575  0619                     	;# 
   576  061A                     	;# 
   577  061B                     	;# 
   578  061C                     	;# 
   579  061C                     	;# 
   580  0691                     	;# 
   581  0692                     	;# 
   582  0693                     	;# 
   583  0694                     	;# 
   584  0695                     	;# 
   585  0F0F                     	;# 
   586  0F10                     	;# 
   587  0F11                     	;# 
   588  0F12                     	;# 
   589  0F13                     	;# 
   590  0F14                     	;# 
   591  0F15                     	;# 
   592  0F16                     	;# 
   593  0F17                     	;# 
   594  0F18                     	;# 
   595  0F19                     	;# 
   596  0F1A                     	;# 
   597  0F1B                     	;# 
   598  0F1C                     	;# 
   599  0F1D                     	;# 
   600  0F1E                     	;# 
   601  0F1F                     	;# 
   602  0FE3                     	;# 
   603  0FE4                     	;# 
   604  0FE5                     	;# 
   605  0FE6                     	;# 
   606  0FE7                     	;# 
   607  0FE8                     	;# 
   608  0FE9                     	;# 
   609  0FEA                     	;# 
   610  0FEB                     	;# 
   611  0FED                     	;# 
   612  0FEE                     	;# 
   613  0FEF                     	;# 
   614  0000                     	;# 
   615  0001                     	;# 
   616  0002                     	;# 
   617  0003                     	;# 
   618  0004                     	;# 
   619  0005                     	;# 
   620  0006                     	;# 
   621  0007                     	;# 
   622  0008                     	;# 
   623  0009                     	;# 
   624  000A                     	;# 
   625  000B                     	;# 
   626  000C                     	;# 
   627  000E                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0013                     	;# 
   631  0015                     	;# 
   632  0016                     	;# 
   633  0016                     	;# 
   634  0017                     	;# 
   635  0018                     	;# 
   636  0019                     	;# 
   637  001A                     	;# 
   638  001B                     	;# 
   639  001C                     	;# 
   640  008C                     	;# 
   641  008E                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0093                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  009F                     	;# 
   656  010C                     	;# 
   657  010E                     	;# 
   658  0111                     	;# 
   659  0112                     	;# 
   660  0113                     	;# 
   661  0114                     	;# 
   662  0115                     	;# 
   663  0116                     	;# 
   664  0117                     	;# 
   665  0118                     	;# 
   666  0119                     	;# 
   667  011D                     	;# 
   668  018C                     	;# 
   669  018E                     	;# 
   670  0191                     	;# 
   671  0191                     	;# 
   672  0192                     	;# 
   673  0193                     	;# 
   674  0193                     	;# 
   675  0194                     	;# 
   676  0195                     	;# 
   677  0196                     	;# 
   678  0197                     	;# 
   679  020C                     	;# 
   680  0211                     	;# 
   681  0211                     	;# 
   682  0212                     	;# 
   683  0212                     	;# 
   684  0213                     	;# 
   685  0213                     	;# 
   686  0214                     	;# 
   687  0214                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0216                     	;# 
   692  0216                     	;# 
   693  0217                     	;# 
   694  0217                     	;# 
   695  0391                     	;# 
   696  0392                     	;# 
   697  0393                     	;# 
   698  0498                     	;# 
   699  0498                     	;# 
   700  0499                     	;# 
   701  049A                     	;# 
   702  049B                     	;# 
   703  049B                     	;# 
   704  049C                     	;# 
   705  049D                     	;# 
   706  049E                     	;# 
   707  049F                     	;# 
   708  0611                     	;# 
   709  0612                     	;# 
   710  0613                     	;# 
   711  0613                     	;# 
   712  0614                     	;# 
   713  0615                     	;# 
   714  0616                     	;# 
   715  0616                     	;# 
   716  0617                     	;# 
   717  0618                     	;# 
   718  0619                     	;# 
   719  0619                     	;# 
   720  061A                     	;# 
   721  061B                     	;# 
   722  061C                     	;# 
   723  061C                     	;# 
   724  0691                     	;# 
   725  0692                     	;# 
   726  0693                     	;# 
   727  0694                     	;# 
   728  0695                     	;# 
   729  0F0F                     	;# 
   730  0F10                     	;# 
   731  0F11                     	;# 
   732  0F12                     	;# 
   733  0F13                     	;# 
   734  0F14                     	;# 
   735  0F15                     	;# 
   736  0F16                     	;# 
   737  0F17                     	;# 
   738  0F18                     	;# 
   739  0F19                     	;# 
   740  0F1A                     	;# 
   741  0F1B                     	;# 
   742  0F1C                     	;# 
   743  0F1D                     	;# 
   744  0F1E                     	;# 
   745  0F1F                     	;# 
   746  0FE3                     	;# 
   747  0FE4                     	;# 
   748  0FE5                     	;# 
   749  0FE6                     	;# 
   750  0FE7                     	;# 
   751  0FE8                     	;# 
   752  0FE9                     	;# 
   753  0FEA                     	;# 
   754  0FEB                     	;# 
   755  0FED                     	;# 
   756  0FEE                     	;# 
   757  0FEF                     	;# 
   758  0000                     	;# 
   759  0001                     	;# 
   760  0002                     	;# 
   761  0003                     	;# 
   762  0004                     	;# 
   763  0005                     	;# 
   764  0006                     	;# 
   765  0007                     	;# 
   766  0008                     	;# 
   767  0009                     	;# 
   768  000A                     	;# 
   769  000B                     	;# 
   770  000C                     	;# 
   771  000E                     	;# 
   772  0011                     	;# 
   773  0012                     	;# 
   774  0013                     	;# 
   775  0015                     	;# 
   776  0016                     	;# 
   777  0016                     	;# 
   778  0017                     	;# 
   779  0018                     	;# 
   780  0019                     	;# 
   781  001A                     	;# 
   782  001B                     	;# 
   783  001C                     	;# 
   784  008C                     	;# 
   785  008E                     	;# 
   786  0091                     	;# 
   787  0092                     	;# 
   788  0093                     	;# 
   789  0095                     	;# 
   790  0096                     	;# 
   791  0097                     	;# 
   792  0099                     	;# 
   793  009A                     	;# 
   794  009B                     	;# 
   795  009B                     	;# 
   796  009C                     	;# 
   797  009D                     	;# 
   798  009E                     	;# 
   799  009F                     	;# 
   800  010C                     	;# 
   801  010E                     	;# 
   802  0111                     	;# 
   803  0112                     	;# 
   804  0113                     	;# 
   805  0114                     	;# 
   806  0115                     	;# 
   807  0116                     	;# 
   808  0117                     	;# 
   809  0118                     	;# 
   810  0119                     	;# 
   811  011D                     	;# 
   812  018C                     	;# 
   813  018E                     	;# 
   814  0191                     	;# 
   815  0191                     	;# 
   816  0192                     	;# 
   817  0193                     	;# 
   818  0193                     	;# 
   819  0194                     	;# 
   820  0195                     	;# 
   821  0196                     	;# 
   822  0197                     	;# 
   823  020C                     	;# 
   824  0211                     	;# 
   825  0211                     	;# 
   826  0212                     	;# 
   827  0212                     	;# 
   828  0213                     	;# 
   829  0213                     	;# 
   830  0214                     	;# 
   831  0214                     	;# 
   832  0215                     	;# 
   833  0215                     	;# 
   834  0215                     	;# 
   835  0216                     	;# 
   836  0216                     	;# 
   837  0217                     	;# 
   838  0217                     	;# 
   839  0391                     	;# 
   840  0392                     	;# 
   841  0393                     	;# 
   842  0498                     	;# 
   843  0498                     	;# 
   844  0499                     	;# 
   845  049A                     	;# 
   846  049B                     	;# 
   847  049B                     	;# 
   848  049C                     	;# 
   849  049D                     	;# 
   850  049E                     	;# 
   851  049F                     	;# 
   852  0611                     	;# 
   853  0612                     	;# 
   854  0613                     	;# 
   855  0613                     	;# 
   856  0614                     	;# 
   857  0615                     	;# 
   858  0616                     	;# 
   859  0616                     	;# 
   860  0617                     	;# 
   861  0618                     	;# 
   862  0619                     	;# 
   863  0619                     	;# 
   864  061A                     	;# 
   865  061B                     	;# 
   866  061C                     	;# 
   867  061C                     	;# 
   868  0691                     	;# 
   869  0692                     	;# 
   870  0693                     	;# 
   871  0694                     	;# 
   872  0695                     	;# 
   873  0F0F                     	;# 
   874  0F10                     	;# 
   875  0F11                     	;# 
   876  0F12                     	;# 
   877  0F13                     	;# 
   878  0F14                     	;# 
   879  0F15                     	;# 
   880  0F16                     	;# 
   881  0F17                     	;# 
   882  0F18                     	;# 
   883  0F19                     	;# 
   884  0F1A                     	;# 
   885  0F1B                     	;# 
   886  0F1C                     	;# 
   887  0F1D                     	;# 
   888  0F1E                     	;# 
   889  0F1F                     	;# 
   890  0FE3                     	;# 
   891  0FE4                     	;# 
   892  0FE5                     	;# 
   893  0FE6                     	;# 
   894  0FE7                     	;# 
   895  0FE8                     	;# 
   896  0FE9                     	;# 
   897  0FEA                     	;# 
   898  0FEB                     	;# 
   899  0FED                     	;# 
   900  0FEE                     	;# 
   901  0FEF                     	;# 
   902  0000                     	;# 
   903  0001                     	;# 
   904  0002                     	;# 
   905  0003                     	;# 
   906  0004                     	;# 
   907  0005                     	;# 
   908  0006                     	;# 
   909  0007                     	;# 
   910  0008                     	;# 
   911  0009                     	;# 
   912  000A                     	;# 
   913  000B                     	;# 
   914  000C                     	;# 
   915  000E                     	;# 
   916  0011                     	;# 
   917  0012                     	;# 
   918  0013                     	;# 
   919  0015                     	;# 
   920  0016                     	;# 
   921  0016                     	;# 
   922  0017                     	;# 
   923  0018                     	;# 
   924  0019                     	;# 
   925  001A                     	;# 
   926  001B                     	;# 
   927  001C                     	;# 
   928  008C                     	;# 
   929  008E                     	;# 
   930  0091                     	;# 
   931  0092                     	;# 
   932  0093                     	;# 
   933  0095                     	;# 
   934  0096                     	;# 
   935  0097                     	;# 
   936  0099                     	;# 
   937  009A                     	;# 
   938  009B                     	;# 
   939  009B                     	;# 
   940  009C                     	;# 
   941  009D                     	;# 
   942  009E                     	;# 
   943  009F                     	;# 
   944  010C                     	;# 
   945  010E                     	;# 
   946  0111                     	;# 
   947  0112                     	;# 
   948  0113                     	;# 
   949  0114                     	;# 
   950  0115                     	;# 
   951  0116                     	;# 
   952  0117                     	;# 
   953  0118                     	;# 
   954  0119                     	;# 
   955  011D                     	;# 
   956  018C                     	;# 
   957  018E                     	;# 
   958  0191                     	;# 
   959  0191                     	;# 
   960  0192                     	;# 
   961  0193                     	;# 
   962  0193                     	;# 
   963  0194                     	;# 
   964  0195                     	;# 
   965  0196                     	;# 
   966  0197                     	;# 
   967  020C                     	;# 
   968  0211                     	;# 
   969  0211                     	;# 
   970  0212                     	;# 
   971  0212                     	;# 
   972  0213                     	;# 
   973  0213                     	;# 
   974  0214                     	;# 
   975  0214                     	;# 
   976  0215                     	;# 
   977  0215                     	;# 
   978  0215                     	;# 
   979  0216                     	;# 
   980  0216                     	;# 
   981  0217                     	;# 
   982  0217                     	;# 
   983  0391                     	;# 
   984  0392                     	;# 
   985  0393                     	;# 
   986  0498                     	;# 
   987  0498                     	;# 
   988  0499                     	;# 
   989  049A                     	;# 
   990  049B                     	;# 
   991  049B                     	;# 
   992  049C                     	;# 
   993  049D                     	;# 
   994  049E                     	;# 
   995  049F                     	;# 
   996  0611                     	;# 
   997  0612                     	;# 
   998  0613                     	;# 
   999  0613                     	;# 
  1000  0614                     	;# 
  1001  0615                     	;# 
  1002  0616                     	;# 
  1003  0616                     	;# 
  1004  0617                     	;# 
  1005  0618                     	;# 
  1006  0619                     	;# 
  1007  0619                     	;# 
  1008  061A                     	;# 
  1009  061B                     	;# 
  1010  061C                     	;# 
  1011  061C                     	;# 
  1012  0691                     	;# 
  1013  0692                     	;# 
  1014  0693                     	;# 
  1015  0694                     	;# 
  1016  0695                     	;# 
  1017  0F0F                     	;# 
  1018  0F10                     	;# 
  1019  0F11                     	;# 
  1020  0F12                     	;# 
  1021  0F13                     	;# 
  1022  0F14                     	;# 
  1023  0F15                     	;# 
  1024  0F16                     	;# 
  1025  0F17                     	;# 
  1026  0F18                     	;# 
  1027  0F19                     	;# 
  1028  0F1A                     	;# 
  1029  0F1B                     	;# 
  1030  0F1C                     	;# 
  1031  0F1D                     	;# 
  1032  0F1E                     	;# 
  1033  0F1F                     	;# 
  1034  0FE3                     	;# 
  1035  0FE4                     	;# 
  1036  0FE5                     	;# 
  1037  0FE6                     	;# 
  1038  0FE7                     	;# 
  1039  0FE8                     	;# 
  1040  0FE9                     	;# 
  1041  0FEA                     	;# 
  1042  0FEB                     	;# 
  1043  0FED                     	;# 
  1044  0FEE                     	;# 
  1045  0FEF                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0008                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000E                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0013                     	;# 
  1063  0015                     	;# 
  1064  0016                     	;# 
  1065  0016                     	;# 
  1066  0017                     	;# 
  1067  0018                     	;# 
  1068  0019                     	;# 
  1069  001A                     	;# 
  1070  001B                     	;# 
  1071  001C                     	;# 
  1072  008C                     	;# 
  1073  008E                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0093                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  009F                     	;# 
  1088  010C                     	;# 
  1089  010E                     	;# 
  1090  0111                     	;# 
  1091  0112                     	;# 
  1092  0113                     	;# 
  1093  0114                     	;# 
  1094  0115                     	;# 
  1095  0116                     	;# 
  1096  0117                     	;# 
  1097  0118                     	;# 
  1098  0119                     	;# 
  1099  011D                     	;# 
  1100  018C                     	;# 
  1101  018E                     	;# 
  1102  0191                     	;# 
  1103  0191                     	;# 
  1104  0192                     	;# 
  1105  0193                     	;# 
  1106  0193                     	;# 
  1107  0194                     	;# 
  1108  0195                     	;# 
  1109  0196                     	;# 
  1110  0197                     	;# 
  1111  020C                     	;# 
  1112  0211                     	;# 
  1113  0211                     	;# 
  1114  0212                     	;# 
  1115  0212                     	;# 
  1116  0213                     	;# 
  1117  0213                     	;# 
  1118  0214                     	;# 
  1119  0214                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0215                     	;# 
  1123  0216                     	;# 
  1124  0216                     	;# 
  1125  0217                     	;# 
  1126  0217                     	;# 
  1127  0391                     	;# 
  1128  0392                     	;# 
  1129  0393                     	;# 
  1130  0498                     	;# 
  1131  0498                     	;# 
  1132  0499                     	;# 
  1133  049A                     	;# 
  1134  049B                     	;# 
  1135  049B                     	;# 
  1136  049C                     	;# 
  1137  049D                     	;# 
  1138  049E                     	;# 
  1139  049F                     	;# 
  1140  0611                     	;# 
  1141  0612                     	;# 
  1142  0613                     	;# 
  1143  0613                     	;# 
  1144  0614                     	;# 
  1145  0615                     	;# 
  1146  0616                     	;# 
  1147  0616                     	;# 
  1148  0617                     	;# 
  1149  0618                     	;# 
  1150  0619                     	;# 
  1151  0619                     	;# 
  1152  061A                     	;# 
  1153  061B                     	;# 
  1154  061C                     	;# 
  1155  061C                     	;# 
  1156  0691                     	;# 
  1157  0692                     	;# 
  1158  0693                     	;# 
  1159  0694                     	;# 
  1160  0695                     	;# 
  1161  0F0F                     	;# 
  1162  0F10                     	;# 
  1163  0F11                     	;# 
  1164  0F12                     	;# 
  1165  0F13                     	;# 
  1166  0F14                     	;# 
  1167  0F15                     	;# 
  1168  0F16                     	;# 
  1169  0F17                     	;# 
  1170  0F18                     	;# 
  1171  0F19                     	;# 
  1172  0F1A                     	;# 
  1173  0F1B                     	;# 
  1174  0F1C                     	;# 
  1175  0F1D                     	;# 
  1176  0F1E                     	;# 
  1177  0F1F                     	;# 
  1178  0FE3                     	;# 
  1179  0FE4                     	;# 
  1180  0FE5                     	;# 
  1181  0FE6                     	;# 
  1182  0FE7                     	;# 
  1183  0FE8                     	;# 
  1184  0FE9                     	;# 
  1185  0FEA                     	;# 
  1186  0FEB                     	;# 
  1187  0FED                     	;# 
  1188  0FEE                     	;# 
  1189  0FEF                     	;# 
  1190  0000                     	;# 
  1191  0001                     	;# 
  1192  0002                     	;# 
  1193  0003                     	;# 
  1194  0004                     	;# 
  1195  0005                     	;# 
  1196  0006                     	;# 
  1197  0007                     	;# 
  1198  0008                     	;# 
  1199  0009                     	;# 
  1200  000A                     	;# 
  1201  000B                     	;# 
  1202  000C                     	;# 
  1203  000E                     	;# 
  1204  0011                     	;# 
  1205  0012                     	;# 
  1206  0013                     	;# 
  1207  0015                     	;# 
  1208  0016                     	;# 
  1209  0016                     	;# 
  1210  0017                     	;# 
  1211  0018                     	;# 
  1212  0019                     	;# 
  1213  001A                     	;# 
  1214  001B                     	;# 
  1215  001C                     	;# 
  1216  008C                     	;# 
  1217  008E                     	;# 
  1218  0091                     	;# 
  1219  0092                     	;# 
  1220  0093                     	;# 
  1221  0095                     	;# 
  1222  0096                     	;# 
  1223  0097                     	;# 
  1224  0099                     	;# 
  1225  009A                     	;# 
  1226  009B                     	;# 
  1227  009B                     	;# 
  1228  009C                     	;# 
  1229  009D                     	;# 
  1230  009E                     	;# 
  1231  009F                     	;# 
  1232  010C                     	;# 
  1233  010E                     	;# 
  1234  0111                     	;# 
  1235  0112                     	;# 
  1236  0113                     	;# 
  1237  0114                     	;# 
  1238  0115                     	;# 
  1239  0116                     	;# 
  1240  0117                     	;# 
  1241  0118                     	;# 
  1242  0119                     	;# 
  1243  011D                     	;# 
  1244  018C                     	;# 
  1245  018E                     	;# 
  1246  0191                     	;# 
  1247  0191                     	;# 
  1248  0192                     	;# 
  1249  0193                     	;# 
  1250  0193                     	;# 
  1251  0194                     	;# 
  1252  0195                     	;# 
  1253  0196                     	;# 
  1254  0197                     	;# 
  1255  020C                     	;# 
  1256  0211                     	;# 
  1257  0211                     	;# 
  1258  0212                     	;# 
  1259  0212                     	;# 
  1260  0213                     	;# 
  1261  0213                     	;# 
  1262  0214                     	;# 
  1263  0214                     	;# 
  1264  0215                     	;# 
  1265  0215                     	;# 
  1266  0215                     	;# 
  1267  0216                     	;# 
  1268  0216                     	;# 
  1269  0217                     	;# 
  1270  0217                     	;# 
  1271  0391                     	;# 
  1272  0392                     	;# 
  1273  0393                     	;# 
  1274  0498                     	;# 
  1275  0498                     	;# 
  1276  0499                     	;# 
  1277  049A                     	;# 
  1278  049B                     	;# 
  1279  049B                     	;# 
  1280  049C                     	;# 
  1281  049D                     	;# 
  1282  049E                     	;# 
  1283  049F                     	;# 
  1284  0611                     	;# 
  1285  0612                     	;# 
  1286  0613                     	;# 
  1287  0613                     	;# 
  1288  0614                     	;# 
  1289  0615                     	;# 
  1290  0616                     	;# 
  1291  0616                     	;# 
  1292  0617                     	;# 
  1293  0618                     	;# 
  1294  0619                     	;# 
  1295  0619                     	;# 
  1296  061A                     	;# 
  1297  061B                     	;# 
  1298  061C                     	;# 
  1299  061C                     	;# 
  1300  0691                     	;# 
  1301  0692                     	;# 
  1302  0693                     	;# 
  1303  0694                     	;# 
  1304  0695                     	;# 
  1305  0F0F                     	;# 
  1306  0F10                     	;# 
  1307  0F11                     	;# 
  1308  0F12                     	;# 
  1309  0F13                     	;# 
  1310  0F14                     	;# 
  1311  0F15                     	;# 
  1312  0F16                     	;# 
  1313  0F17                     	;# 
  1314  0F18                     	;# 
  1315  0F19                     	;# 
  1316  0F1A                     	;# 
  1317  0F1B                     	;# 
  1318  0F1C                     	;# 
  1319  0F1D                     	;# 
  1320  0F1E                     	;# 
  1321  0F1F                     	;# 
  1322  0FE3                     	;# 
  1323  0FE4                     	;# 
  1324  0FE5                     	;# 
  1325  0FE6                     	;# 
  1326  0FE7                     	;# 
  1327  0FE8                     	;# 
  1328  0FE9                     	;# 
  1329  0FEA                     	;# 
  1330  0FEB                     	;# 
  1331  0FED                     	;# 
  1332  0FEE                     	;# 
  1333  0FEF                     	;# 
  1334  0000                     	;# 
  1335  0001                     	;# 
  1336  0002                     	;# 
  1337  0003                     	;# 
  1338  0004                     	;# 
  1339  0005                     	;# 
  1340  0006                     	;# 
  1341  0007                     	;# 
  1342  0008                     	;# 
  1343  0009                     	;# 
  1344  000A                     	;# 
  1345  000B                     	;# 
  1346  000C                     	;# 
  1347  000E                     	;# 
  1348  0011                     	;# 
  1349  0012                     	;# 
  1350  0013                     	;# 
  1351  0015                     	;# 
  1352  0016                     	;# 
  1353  0016                     	;# 
  1354  0017                     	;# 
  1355  0018                     	;# 
  1356  0019                     	;# 
  1357  001A                     	;# 
  1358  001B                     	;# 
  1359  001C                     	;# 
  1360  008C                     	;# 
  1361  008E                     	;# 
  1362  0091                     	;# 
  1363  0092                     	;# 
  1364  0093                     	;# 
  1365  0095                     	;# 
  1366  0096                     	;# 
  1367  0097                     	;# 
  1368  0099                     	;# 
  1369  009A                     	;# 
  1370  009B                     	;# 
  1371  009B                     	;# 
  1372  009C                     	;# 
  1373  009D                     	;# 
  1374  009E                     	;# 
  1375  009F                     	;# 
  1376  010C                     	;# 
  1377  010E                     	;# 
  1378  0111                     	;# 
  1379  0112                     	;# 
  1380  0113                     	;# 
  1381  0114                     	;# 
  1382  0115                     	;# 
  1383  0116                     	;# 
  1384  0117                     	;# 
  1385  0118                     	;# 
  1386  0119                     	;# 
  1387  011D                     	;# 
  1388  018C                     	;# 
  1389  018E                     	;# 
  1390  0191                     	;# 
  1391  0191                     	;# 
  1392  0192                     	;# 
  1393  0193                     	;# 
  1394  0193                     	;# 
  1395  0194                     	;# 
  1396  0195                     	;# 
  1397  0196                     	;# 
  1398  0197                     	;# 
  1399  020C                     	;# 
  1400  0211                     	;# 
  1401  0211                     	;# 
  1402  0212                     	;# 
  1403  0212                     	;# 
  1404  0213                     	;# 
  1405  0213                     	;# 
  1406  0214                     	;# 
  1407  0214                     	;# 
  1408  0215                     	;# 
  1409  0215                     	;# 
  1410  0215                     	;# 
  1411  0216                     	;# 
  1412  0216                     	;# 
  1413  0217                     	;# 
  1414  0217                     	;# 
  1415  0391                     	;# 
  1416  0392                     	;# 
  1417  0393                     	;# 
  1418  0498                     	;# 
  1419  0498                     	;# 
  1420  0499                     	;# 
  1421  049A                     	;# 
  1422  049B                     	;# 
  1423  049B                     	;# 
  1424  049C                     	;# 
  1425  049D                     	;# 
  1426  049E                     	;# 
  1427  049F                     	;# 
  1428  0611                     	;# 
  1429  0612                     	;# 
  1430  0613                     	;# 
  1431  0613                     	;# 
  1432  0614                     	;# 
  1433  0615                     	;# 
  1434  0616                     	;# 
  1435  0616                     	;# 
  1436  0617                     	;# 
  1437  0618                     	;# 
  1438  0619                     	;# 
  1439  0619                     	;# 
  1440  061A                     	;# 
  1441  061B                     	;# 
  1442  061C                     	;# 
  1443  061C                     	;# 
  1444  0691                     	;# 
  1445  0692                     	;# 
  1446  0693                     	;# 
  1447  0694                     	;# 
  1448  0695                     	;# 
  1449  0F0F                     	;# 
  1450  0F10                     	;# 
  1451  0F11                     	;# 
  1452  0F12                     	;# 
  1453  0F13                     	;# 
  1454  0F14                     	;# 
  1455  0F15                     	;# 
  1456  0F16                     	;# 
  1457  0F17                     	;# 
  1458  0F18                     	;# 
  1459  0F19                     	;# 
  1460  0F1A                     	;# 
  1461  0F1B                     	;# 
  1462  0F1C                     	;# 
  1463  0F1D                     	;# 
  1464  0F1E                     	;# 
  1465  0F1F                     	;# 
  1466  0FE3                     	;# 
  1467  0FE4                     	;# 
  1468  0FE5                     	;# 
  1469  0FE6                     	;# 
  1470  0FE7                     	;# 
  1471  0FE8                     	;# 
  1472  0FE9                     	;# 
  1473  0FEA                     	;# 
  1474  0FEB                     	;# 
  1475  0FED                     	;# 
  1476  0FEE                     	;# 
  1477  0FEF                     	;# 
  1478                           
  1479                           	psect	idataBANK0
  1480  0353                     __pidataBANK0:	
  1481                           
  1482                           ;initializer for _boost_state
  1483  0353  34FF               	retlw	255
  1484  0354  34FF               	retlw	255
  1485                           
  1486                           ;initializer for _boost_up
  1487  0355  3401               	retlw	1
  1488  0356  3400               	retlw	0
  1489                           
  1490                           ;initializer for _feedback_state
  1491  0357  34FF               	retlw	255
  1492  0358  34FF               	retlw	255
  1493                           
  1494                           ;initializer for _fuzz_state
  1495  0359  34FF               	retlw	255
  1496  035A  34FF               	retlw	255
  1497                           
  1498                           ;initializer for _fuzz_up
  1499  035B  3401               	retlw	1
  1500  035C  3400               	retlw	0
  1501                           
  1502                           ;initializer for _long_press_limit
  1503  035D  3400               	retlw	0
  1504  035E  342D               	retlw	45
  1505  000B                     _INTCONbits	set	11
  1506  0011                     _PIR1bits	set	17
  1507  000C                     _PORTAbits	set	12
  1508  001C                     _T2CONbits	set	28
  1509  009D                     _ADCON0bits	set	157
  1510  009E                     _ADCON1bits	set	158
  1511  009C                     _ADRESH	set	156
  1512  009B                     _ADRESL	set	155
  1513  0099                     _OSCCONbits	set	153
  1514  009A                     _OSCSTAT	set	154
  1515  008C                     _TRISAbits	set	140
  1516  008E                     _TRISCbits	set	142
  1517  010C                     _LATAbits	set	268
  1518  010E                     _LATCbits	set	270
  1519  0191                     _PMADR	set	401
  1520  018C                     _ANSELAbits	set	396
  1521  0192                     _PMADRH	set	402
  1522  0191                     _PMADRL	set	401
  1523  0195                     _PMCON1bits	set	405
  1524  0196                     _PMCON2	set	406
  1525  0194                     _PMDATH	set	404
  1526  0193                     _PMDATL	set	403
  1527                           
  1528                           ; #config settings
  1529  0000                     
  1530                           	psect	cinit
  1531  000E                     start_initialization:	
  1532  000E                     __initialization:	
  1533                           
  1534                           ; Clear objects allocated to BANK0
  1535  000E  3020               	movlw	low __pbssBANK0
  1536  000F  0084               	movwf	4
  1537  0010  3000               	movlw	high __pbssBANK0
  1538  0011  0085               	movwf	5
  1539  0012  3016               	movlw	22
  1540  0013  238F               	fcall	clear_ram0
  1541                           
  1542                           ; Initialize objects allocated to BANK0
  1543  0014  3053               	movlw	low __pidataBANK0
  1544  0015  0084               	movwf	4
  1545  0016  3083               	movlw	(high __pidataBANK0)| (0+128)
  1546  0017  0085               	movwf	5
  1547  0018  3036               	movlw	low __pdataBANK0
  1548  0019  0086               	movwf	6
  1549  001A  3000               	movlw	high __pdataBANK0
  1550  001B  0087               	movwf	7
  1551  001C  300C               	movlw	12
  1552  001D  2395               	fcall	init_ram
  1553  001E                     end_of_initialization:	
  1554                           ;End of C runtime variable initialization code
  1555                           
  1556  001E                     __end_of__initialization:	
  1557  001E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1558  001F  0020               	movlb	0
  1559  0020  2B81               	ljmp	_main	;jump to C main() function
  1560                           
  1561                           	psect	bssBANK0
  1562  0020                     __pbssBANK0:	
  1563  0020                     wait_ms@timel:	
  1564  0020                     	ds	4
  1565  0024                     _boost_pressed:	
  1566  0024                     	ds	2
  1567  0026                     _boost_toggle:	
  1568  0026                     	ds	2
  1569  0028                     _fuzz_down:	
  1570  0028                     	ds	2
  1571  002A                     _fuzz_pressed:	
  1572  002A                     	ds	2
  1573  002C                     _fuzz_toggle:	
  1574  002C                     	ds	2
  1575  002E                     _fuzz_turning_on:	
  1576  002E                     	ds	2
  1577  0030                     _isInitialized:	
  1578  0030                     	ds	2
  1579  0032                     _pedalState:	
  1580  0032                     	ds	4
  1581                           
  1582                           	psect	dataBANK0
  1583  0036                     __pdataBANK0:	
  1584  0036                     _boost_state:	
  1585  0036                     	ds	2
  1586  0038                     _boost_up:	
  1587  0038                     	ds	2
  1588  003A                     _feedback_state:	
  1589  003A                     	ds	2
  1590  003C                     _fuzz_state:	
  1591  003C                     	ds	2
  1592  003E                     _fuzz_up:	
  1593  003E                     	ds	2
  1594  0040                     _long_press_limit:	
  1595  0040                     	ds	2
  1596                           
  1597                           	psect	clrtext
  1598  038F                     clear_ram0:	
  1599                           ;	Called with FSR0 containing the base address, and
  1600                           ;	WREG with the size to clear
  1601                           
  1602  038F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1603  0390                     clrloop0:	
  1604  0390  0180               	clrf	0	;clear RAM location pointed to by FSR
  1605  0391  3101               	addfsr 0,1
  1606  0392  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1607  0393  2B90               	goto	clrloop0	;have we reached the end yet?
  1608  0394  3400               	retlw	0	;all done for this memory range, return
  1609                           
  1610                           	psect	inittext
  1611  0395                     init_ram:	
  1612  0395  00FE               	movwf	126
  1613  0396                     initloop:	
  1614  0396  0012               	moviw fsr0++
  1615  0397  001E               	movwi fsr1++
  1616  0398  0BFE               	decfsz	126,f
  1617  0399  2B96               	goto	initloop
  1618  039A  3400               	retlw	0
  1619                           
  1620                           	psect	cstackCOMMON
  1621  0070                     __pcstackCOMMON:	
  1622  0070                     ?_ConfigureOscillator:	
  1623  0070                     ?_InitApp:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0070                     ?_initFuzz:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629  0070                     ?_initBoost:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0070                     ?_updateFuzz:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635  0070                     ?_updateBoost:	
  1636                           ; 1 bytes @ 0x0
  1637                           
  1638  0070                     ?_init_adc:	
  1639                           ; 1 bytes @ 0x0
  1640                           
  1641  0070                     ?_saveState:	
  1642                           ; 1 bytes @ 0x0
  1643                           
  1644  0070                     ?_isr:	
  1645                           ; 1 bytes @ 0x0
  1646                           
  1647  0070                     ??_isr:	
  1648                           ; 1 bytes @ 0x0
  1649                           
  1650  0070                     ?_main:	
  1651                           ; 1 bytes @ 0x0
  1652                           
  1653  0070                     ?_initStateManager:	
  1654                           ; 1 bytes @ 0x0
  1655                           
  1656  0070                     ?_getCurrentState:	
  1657                           ; 1 bytes @ 0x0
  1658                           
  1659                           
  1660                           ; 4 bytes @ 0x0
  1661  0070                     	ds	1
  1662  0071                     ?_FLASH_EraseBlock:	
  1663  0071                     ??_ConfigureOscillator:	
  1664                           ; 1 bytes @ 0x1
  1665                           
  1666  0071                     ??_InitApp:	
  1667                           ; 1 bytes @ 0x1
  1668                           
  1669  0071                     ??_init_adc:	
  1670                           ; 1 bytes @ 0x1
  1671                           
  1672  0071                     ?_FLASH_ReadWord:	
  1673                           ; 1 bytes @ 0x1
  1674                           
  1675  0071                     ?___lmul:	
  1676                           ; 2 bytes @ 0x1
  1677                           
  1678  0071                     FLASH_ReadWord@flashAddr:	
  1679                           ; 4 bytes @ 0x1
  1680                           
  1681  0071                     FLASH_EraseBlock@startAddr:	
  1682                           ; 2 bytes @ 0x1
  1683                           
  1684  0071                     ___lmul@multiplier:	
  1685                           ; 2 bytes @ 0x1
  1686                           
  1687                           
  1688                           ; 4 bytes @ 0x1
  1689  0071                     	ds	2
  1690  0073                     ??_FLASH_EraseBlock:	
  1691  0073                     ??_FLASH_ReadWord:	
  1692                           ; 1 bytes @ 0x3
  1693                           
  1694  0073                     FLASH_ReadWord@GIEBitValue:	
  1695                           ; 1 bytes @ 0x3
  1696                           
  1697  0073                     FLASH_EraseBlock@GIEBitValue:	
  1698                           ; 1 bytes @ 0x3
  1699                           
  1700                           
  1701                           ; 1 bytes @ 0x3
  1702  0073                     	ds	1
  1703  0074                     ?_HEF_ByteArrayWrite:	
  1704  0074                     ?_HEF_ByteArrayRead:	
  1705                           ; 1 bytes @ 0x4
  1706                           
  1707  0074                     HEF_ByteArrayWrite@byteArray:	
  1708                           ; 1 bytes @ 0x4
  1709                           
  1710  0074                     HEF_ByteArrayRead@block:	
  1711                           ; 1 bytes @ 0x4
  1712                           
  1713                           
  1714                           ; 1 bytes @ 0x4
  1715  0074                     	ds	1
  1716  0075                     HEF_ByteArrayWrite@count:	
  1717  0075                     HEF_ByteArrayRead@count:	
  1718                           ; 1 bytes @ 0x5
  1719                           
  1720  0075                     ___lmul@multiplicand:	
  1721                           ; 1 bytes @ 0x5
  1722                           
  1723                           
  1724                           ; 4 bytes @ 0x5
  1725  0075                     	ds	1
  1726  0076                     ??_HEF_ByteArrayWrite:	
  1727  0076                     ??_HEF_ByteArrayRead:	
  1728                           ; 1 bytes @ 0x6
  1729                           
  1730                           
  1731                           ; 1 bytes @ 0x6
  1732  0076                     	ds	2
  1733  0078                     HEF_ByteArrayWrite@GIEBitValue:	
  1734  0078                     HEF_ByteArrayRead@wordAdd:	
  1735                           ; 1 bytes @ 0x8
  1736                           
  1737                           
  1738                           ; 2 bytes @ 0x8
  1739  0078                     	ds	1
  1740  0079                     ??___lmul:	
  1741  0079                     HEF_ByteArrayWrite@block:	
  1742                           ; 1 bytes @ 0x9
  1743                           
  1744  0079                     ___lmul@product:	
  1745                           ; 1 bytes @ 0x9
  1746                           
  1747                           
  1748                           ; 4 bytes @ 0x9
  1749  0079                     	ds	1
  1750  007A                     HEF_ByteArrayRead@bArray:	
  1751  007A                     HEF_ByteArrayWrite@blockAddr:	
  1752                           ; 1 bytes @ 0xA
  1753                           
  1754                           
  1755                           ; 2 bytes @ 0xA
  1756  007A                     	ds	1
  1757  007B                     ??_getCurrentState:	
  1758                           
  1759                           ; 1 bytes @ 0xB
  1760  007B                     	ds	1
  1761  007C                     saveState@r:	
  1762                           
  1763                           ; 1 bytes @ 0xC
  1764  007C                     	ds	1
  1765  007D                     ??_initFuzz:	
  1766  007D                     ??_initBoost:	
  1767                           ; 1 bytes @ 0xD
  1768                           
  1769  007D                     ??_getFuzzState:	
  1770                           ; 1 bytes @ 0xD
  1771                           
  1772  007D                     ??_setFuzzState:	
  1773                           ; 1 bytes @ 0xD
  1774                           
  1775  007D                     ??_setFeedbackState:	
  1776                           ; 1 bytes @ 0xD
  1777                           
  1778  007D                     ??_updateFuzzState:	
  1779                           ; 1 bytes @ 0xD
  1780                           
  1781  007D                     ??_getBoostState:	
  1782                           ; 1 bytes @ 0xD
  1783                           
  1784  007D                     ??_setBoostState:	
  1785                           ; 1 bytes @ 0xD
  1786                           
  1787  007D                     ??_updateBoostState:	
  1788                           ; 1 bytes @ 0xD
  1789                           
  1790  007D                     ??_main:	
  1791                           ; 1 bytes @ 0xD
  1792                           
  1793  007D                     ??_wait_ms:	
  1794                           ; 1 bytes @ 0xD
  1795                           
  1796  007D                     ??_initStateManager:	
  1797                           ; 1 bytes @ 0xD
  1798                           
  1799                           
  1800                           	psect	cstackBANK0
  1801  0042                     __pcstackBANK0:	
  1802                           ; 1 bytes @ 0xD
  1803                           
  1804  0042                     ??_saveState:	
  1805  0042                     ?_wait_ms:	
  1806                           ; 1 bytes @ 0x0
  1807                           
  1808  0042                     getCurrentState@r:	
  1809                           ; 1 bytes @ 0x0
  1810                           
  1811  0042                     wait_ms@time:	
  1812                           ; 1 bytes @ 0x0
  1813                           
  1814                           
  1815                           ; 2 bytes @ 0x0
  1816  0042                     	ds	1
  1817  0043                     ?_getFuzzState:	
  1818  0043                     ?_getBoostState:	
  1819                           ; 2 bytes @ 0x1
  1820                           
  1821                           
  1822                           ; 2 bytes @ 0x1
  1823  0043                     	ds	1
  1824  0044                     ?_setFeedbackState:	
  1825  0044                     setFeedbackState@f_state:	
  1826                           ; 1 bytes @ 0x2
  1827                           
  1828                           
  1829                           ; 2 bytes @ 0x2
  1830  0044                     	ds	1
  1831  0045                     ?_updateFuzzState:	
  1832  0045                     ?_updateBoostState:	
  1833                           ; 1 bytes @ 0x3
  1834                           
  1835  0045                     updateFuzzState@state:	
  1836                           ; 1 bytes @ 0x3
  1837                           
  1838  0045                     updateBoostState@state:	
  1839                           ; 2 bytes @ 0x3
  1840                           
  1841                           
  1842                           ; 2 bytes @ 0x3
  1843  0045                     	ds	2
  1844  0047                     ?_setFuzzState:	
  1845  0047                     ?_setBoostState:	
  1846                           ; 1 bytes @ 0x5
  1847                           
  1848  0047                     setFuzzState@f_state:	
  1849                           ; 1 bytes @ 0x5
  1850                           
  1851  0047                     setBoostState@f_state:	
  1852                           ; 2 bytes @ 0x5
  1853                           
  1854                           
  1855                           ; 2 bytes @ 0x5
  1856  0047                     	ds	2
  1857  0049                     ??_updateFuzz:	
  1858  0049                     ??_updateBoost:	
  1859                           ; 1 bytes @ 0x7
  1860                           
  1861  0049                     initFuzz@initState:	
  1862                           ; 1 bytes @ 0x7
  1863                           
  1864  0049                     initBoost@initState:	
  1865                           ; 2 bytes @ 0x7
  1866                           
  1867                           
  1868                           ; 2 bytes @ 0x7
  1869  0049                     	ds	1
  1870  004A                     updateFuzz@fb_state:	
  1871                           
  1872                           ; 2 bytes @ 0x8
  1873  004A                     	ds	2
  1874                           
  1875                           	psect	maintext
  1876  0381                     __pmaintext:	
  1877 ;;
  1878 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1879 ;;
  1880 ;; *************** function _main *****************
  1881 ;; Defined at:
  1882 ;;		line 28 in file "main.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;		None
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;		None
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  1    wreg      void 
  1889 ;; Registers used:
  1890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : B1F/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMMON   BANK0   BANK1
  1896 ;;      Params:         0       0       0
  1897 ;;      Locals:         0       0       0
  1898 ;;      Temps:          0       0       0
  1899 ;;      Totals:         0       0       0
  1900 ;;Total ram usage:        0 bytes
  1901 ;; Hardware stack levels required when called:    7
  1902 ;; This function calls:
  1903 ;;		_ConfigureOscillator
  1904 ;;		_InitApp
  1905 ;;		_initBoost
  1906 ;;		_initFuzz
  1907 ;;		_updateBoost
  1908 ;;		_updateFuzz
  1909 ;; This function is called by:
  1910 ;;		Startup code after reset
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           
  1915                           ;psect for function _main
  1916  0381                     _main:	
  1917                           
  1918                           ;main.c: 29: ConfigureOscillator();
  1919                           
  1920                           ;incstack = 0
  1921                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1922  0381  23A0               	fcall	_ConfigureOscillator
  1923                           
  1924                           ;main.c: 30: InitApp();
  1925  0382  2303               	fcall	_InitApp
  1926                           
  1927                           ;main.c: 33: initFuzz();
  1928  0383  2318               	fcall	_initFuzz
  1929                           
  1930                           ;main.c: 34: initBoost();
  1931  0384  235F               	fcall	_initBoost
  1932  0385                     l1581:	
  1933                           ;main.c: 36: while (1) {
  1934                           
  1935                           
  1936                           ;main.c: 37: updateFuzz();
  1937  0385  2021               	fcall	_updateFuzz
  1938                           
  1939                           ;main.c: 38: updateBoost();
  1940  0386  20C6               	fcall	_updateBoost
  1941  0387  2B85               	goto	l1581
  1942  0388                     __end_of_main:	
  1943                           
  1944                           	psect	text1
  1945  0021                     __ptext1:	
  1946 ;; *************** function _updateFuzz *****************
  1947 ;; Defined at:
  1948 ;;		line 35 in file "mcc_generated_files/fuzz.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;		None
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;  fb_state        2    8[BANK0 ] int 
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      void 
  1955 ;; Registers used:
  1956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMMON   BANK0   BANK1
  1962 ;;      Params:         0       0       0
  1963 ;;      Locals:         0       2       0
  1964 ;;      Temps:          0       1       0
  1965 ;;      Totals:         0       3       0
  1966 ;;Total ram usage:        3 bytes
  1967 ;; Hardware stack levels used:    1
  1968 ;; Hardware stack levels required when called:    6
  1969 ;; This function calls:
  1970 ;;		_setFeedbackState
  1971 ;;		_setFuzzState
  1972 ;; This function is called by:
  1973 ;;		_main
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           
  1978                           ;psect for function _updateFuzz
  1979  0021                     _updateFuzz:	
  1980                           
  1981                           ;fuzz.c: 42: if (PORTAbits.RA4 == 0) {
  1982                           
  1983                           ;incstack = 0
  1984                           ; Regs used in _updateFuzz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1985  0021  0020               	movlb	0	; select bank0
  1986  0022  1A0C               	btfsc	12,4	;volatile
  1987  0023  2834               	goto	l1415
  1988                           
  1989                           ;fuzz.c: 43: if (fuzz_pressed > 0) {
  1990  0024  082B               	movf	_fuzz_pressed+1,w
  1991  0025  3A80               	xorlw	128
  1992  0026  00C9               	movwf	??_updateFuzz
  1993  0027  3080               	movlw	128
  1994  0028  0249               	subwf	??_updateFuzz,w
  1995  0029  1D03               	skipz
  1996  002A  282D               	goto	u885
  1997  002B  3001               	movlw	1
  1998  002C  022A               	subwf	_fuzz_pressed,w
  1999  002D                     u885:	
  2000  002D  1C03               	skipc
  2001  002E  2844               	goto	l1419
  2002                           
  2003                           ;fuzz.c: 44: fuzz_pressed--;
  2004  002F  30FF               	movlw	255
  2005  0030  0020               	movlb	0	; select bank0
  2006  0031  07AA               	addwf	_fuzz_pressed,f
  2007  0032  30FF               	movlw	255
  2008  0033  2843               	goto	L1
  2009  0034                     l1415:	
  2010                           ;fuzz.c: 45: }
  2011                           ;fuzz.c: 46: } else if (fuzz_pressed < 25) {
  2012                           
  2013  0034  082B               	movf	_fuzz_pressed+1,w
  2014  0035  3A80               	xorlw	128
  2015  0036  00C9               	movwf	??_updateFuzz
  2016  0037  3080               	movlw	128
  2017  0038  0249               	subwf	??_updateFuzz,w
  2018  0039  1D03               	skipz
  2019  003A  283D               	goto	u895
  2020  003B  3019               	movlw	25
  2021  003C  022A               	subwf	_fuzz_pressed,w
  2022  003D                     u895:	
  2023  003D  1803               	skipnc
  2024  003E  2844               	goto	l1419
  2025                           
  2026                           ;fuzz.c: 47: fuzz_pressed++;
  2027  003F  3001               	movlw	1
  2028  0040  0020               	movlb	0	; select bank0
  2029  0041  07AA               	addwf	_fuzz_pressed,f
  2030  0042  3000               	movlw	0
  2031  0043                     L1:	
  2032  0043  3DAB               	addwfc	_fuzz_pressed+1,f
  2033  0044                     l1419:	
  2034                           
  2035                           ;fuzz.c: 49: }
  2036                           ;fuzz.c: 55: if (fuzz_pressed == 0) {
  2037  0044  0020               	movlb	0	; select bank0
  2038  0045  082A               	movf	_fuzz_pressed,w
  2039  0046  042B               	iorwf	_fuzz_pressed+1,w
  2040  0047  1D03               	btfss	3,2
  2041  0048  288E               	goto	l1449
  2042                           
  2043                           ;fuzz.c: 57: fuzz_down++;
  2044  0049  3001               	movlw	1
  2045  004A  07A8               	addwf	_fuzz_down,f
  2046  004B  3000               	movlw	0
  2047  004C  3DA9               	addwfc	_fuzz_down+1,f
  2048                           
  2049                           ;fuzz.c: 58: if (fuzz_state == 1) {
  2050  004D  033C               	decf	_fuzz_state,w
  2051  004E  043D               	iorwf	_fuzz_state+1,w
  2052  004F  1D03               	btfss	3,2
  2053  0050  287B               	goto	l1439
  2054                           
  2055                           ;fuzz.c: 59: if (fuzz_up == 1) {
  2056  0051  033E               	decf	_fuzz_up,w
  2057  0052  043F               	iorwf	_fuzz_up+1,w
  2058  0053  1D03               	btfss	3,2
  2059  0054  2859               	goto	l157
  2060                           
  2061                           ;fuzz.c: 60: fuzz_toggle = 1;
  2062  0055  3001               	movlw	1
  2063  0056  00AC               	movwf	_fuzz_toggle
  2064  0057  3000               	movlw	0
  2065  0058  00AD               	movwf	_fuzz_toggle+1
  2066  0059                     l157:	
  2067                           
  2068                           ;fuzz.c: 61: }
  2069                           ;fuzz.c: 63: if (fuzz_down >= long_press_limit && feedback_state == 0 && fuzz_turning_on
      +                           == 0) {
  2070  0059  0829               	movf	_fuzz_down+1,w
  2071  005A  3A80               	xorlw	128
  2072  005B  00C9               	movwf	??_updateFuzz
  2073  005C  0841               	movf	_long_press_limit+1,w
  2074  005D  3A80               	xorlw	128
  2075  005E  0249               	subwf	??_updateFuzz,w
  2076  005F  1D03               	skipz
  2077  0060  2863               	goto	u935
  2078  0061  0840               	movf	_long_press_limit,w
  2079  0062  0228               	subwf	_fuzz_down,w
  2080  0063                     u935:	
  2081  0063  1C03               	skipc
  2082  0064  288A               	goto	l1447
  2083  0065  0020               	movlb	0	; select bank0
  2084  0066  083A               	movf	_feedback_state,w
  2085  0067  043B               	iorwf	_feedback_state+1,w
  2086  0068  1D03               	btfss	3,2
  2087  0069  288A               	goto	l1447
  2088  006A  082E               	movf	_fuzz_turning_on,w
  2089  006B  042F               	iorwf	_fuzz_turning_on+1,w
  2090  006C  1D03               	btfss	3,2
  2091  006D  288A               	goto	l1447
  2092                           
  2093                           ;fuzz.c: 65: fuzz_down = long_press_limit;
  2094  006E  0841               	movf	_long_press_limit+1,w
  2095  006F  00A9               	movwf	_fuzz_down+1
  2096  0070  0840               	movf	_long_press_limit,w
  2097  0071  00A8               	movwf	_fuzz_down
  2098                           
  2099                           ;fuzz.c: 66: LATAbits.LATA2 = 0;
  2100  0072  0022               	movlb	2	; select bank2
  2101  0073  110C               	bcf	12,2	;volatile
  2102                           
  2103                           ;fuzz.c: 67: setFeedbackState(1);
  2104  0074  3001               	movlw	1
  2105  0075  0020               	movlb	0	; select bank0
  2106  0076  00C4               	movwf	setFeedbackState@f_state
  2107  0077  3000               	movlw	0
  2108  0078  00C5               	movwf	setFeedbackState@f_state+1
  2109  0079  21ED               	fcall	_setFeedbackState
  2110                           
  2111                           ;fuzz.c: 68: }
  2112                           ;fuzz.c: 69: } else {
  2113  007A  288A               	goto	l1447
  2114  007B                     l1439:	
  2115                           
  2116                           ;fuzz.c: 71: fuzz_turning_on = 1;
  2117  007B  3001               	movlw	1
  2118  007C  0020               	movlb	0	; select bank0
  2119  007D  00AE               	movwf	_fuzz_turning_on
  2120  007E  3000               	movlw	0
  2121  007F  00AF               	movwf	_fuzz_turning_on+1
  2122                           
  2123                           ;fuzz.c: 72: fuzz_toggle = 0;
  2124  0080  01AC               	clrf	_fuzz_toggle
  2125  0081  01AD               	clrf	_fuzz_toggle+1
  2126                           
  2127                           ;fuzz.c: 73: setFuzzState(1);
  2128  0082  3001               	movlw	1
  2129  0083  00C7               	movwf	setFuzzState@f_state
  2130  0084  3000               	movlw	0
  2131  0085  00C8               	movwf	setFuzzState@f_state+1
  2132  0086  2179               	fcall	_setFuzzState
  2133                           
  2134                           ;fuzz.c: 74: feedback_state = 0;
  2135  0087  0020               	movlb	0	; select bank0
  2136  0088  01BA               	clrf	_feedback_state
  2137  0089  01BB               	clrf	_feedback_state+1
  2138  008A                     l1447:	
  2139                           
  2140                           ;fuzz.c: 75: }
  2141                           ;fuzz.c: 78: fuzz_up = 0;
  2142  008A  0020               	movlb	0	; select bank0
  2143  008B  01BE               	clrf	_fuzz_up
  2144  008C  01BF               	clrf	_fuzz_up+1
  2145                           
  2146                           ;fuzz.c: 79: } else if (fuzz_pressed >= 25) {
  2147  008D  0008               	return
  2148  008E                     l1449:	
  2149  008E  082B               	movf	_fuzz_pressed+1,w
  2150  008F  3A80               	xorlw	128
  2151  0090  00C9               	movwf	??_updateFuzz
  2152  0091  3080               	movlw	128
  2153  0092  0249               	subwf	??_updateFuzz,w
  2154  0093  1D03               	skipz
  2155  0094  2897               	goto	u965
  2156  0095  3019               	movlw	25
  2157  0096  022A               	subwf	_fuzz_pressed,w
  2158  0097                     u965:	
  2159  0097  1C03               	skipc
  2160  0098  0008               	return
  2161                           
  2162                           ;fuzz.c: 80: int fb_state = feedback_state;
  2163  0099  0020               	movlb	0	; select bank0
  2164  009A  083B               	movf	_feedback_state+1,w
  2165  009B  00CB               	movwf	updateFuzz@fb_state+1
  2166  009C  083A               	movf	_feedback_state,w
  2167  009D  00CA               	movwf	updateFuzz@fb_state
  2168                           
  2169                           ;fuzz.c: 81: if (fuzz_toggle == 1 && fb_state == 0) {
  2170  009E  032C               	decf	_fuzz_toggle,w
  2171  009F  042D               	iorwf	_fuzz_toggle+1,w
  2172  00A0  1D03               	btfss	3,2
  2173  00A1  28AA               	goto	l1459
  2174  00A2  084A               	movf	updateFuzz@fb_state,w
  2175  00A3  044B               	iorwf	updateFuzz@fb_state+1,w
  2176  00A4  1D03               	btfss	3,2
  2177  00A5  28AA               	goto	l1459
  2178                           
  2179                           ;fuzz.c: 82: setFuzzState(0);
  2180  00A6  3000               	movlw	0
  2181  00A7  00C7               	movwf	setFuzzState@f_state
  2182  00A8  00C8               	movwf	setFuzzState@f_state+1
  2183  00A9  2179               	fcall	_setFuzzState
  2184  00AA                     l1459:	
  2185                           
  2186                           ;fuzz.c: 83: }
  2187                           ;fuzz.c: 84: LATAbits.LATA2 = fuzz_state;
  2188  00AA  0020               	movlb	0	; select bank0
  2189  00AB  0C3C               	rrf	_fuzz_state,w
  2190  00AC  0022               	movlb	2	; select bank2
  2191  00AD  1C03               	skipc
  2192  00AE  110C               	bcf	12,2	;volatile
  2193  00AF  1803               	skipnc
  2194  00B0  150C               	bsf	12,2	;volatile
  2195                           
  2196                           ;fuzz.c: 86: setFeedbackState(0);
  2197  00B1  3000               	movlw	0
  2198  00B2  0020               	movlb	0	; select bank0
  2199  00B3  00C4               	movwf	setFeedbackState@f_state
  2200  00B4  00C5               	movwf	setFeedbackState@f_state+1
  2201  00B5  21ED               	fcall	_setFeedbackState
  2202                           
  2203                           ;fuzz.c: 87: fuzz_turning_on = 0;
  2204  00B6  0020               	movlb	0	; select bank0
  2205  00B7  01AE               	clrf	_fuzz_turning_on
  2206  00B8  01AF               	clrf	_fuzz_turning_on+1
  2207                           
  2208                           ;fuzz.c: 88: fuzz_toggle = 0;
  2209  00B9  01AC               	clrf	_fuzz_toggle
  2210  00BA  01AD               	clrf	_fuzz_toggle+1
  2211                           
  2212                           ;fuzz.c: 89: fuzz_up = 1;
  2213  00BB  3001               	movlw	1
  2214  00BC  00BE               	movwf	_fuzz_up
  2215  00BD  3000               	movlw	0
  2216  00BE  00BF               	movwf	_fuzz_up+1
  2217                           
  2218                           ;fuzz.c: 90: fuzz_down = 0;
  2219  00BF  01A8               	clrf	_fuzz_down
  2220  00C0  01A9               	clrf	_fuzz_down+1
  2221                           
  2222                           ;fuzz.c: 91: fuzz_pressed = 25;
  2223  00C1  3019               	movlw	25
  2224  00C2  00AA               	movwf	_fuzz_pressed
  2225  00C3  3000               	movlw	0
  2226  00C4  00AB               	movwf	_fuzz_pressed+1
  2227  00C5  0008               	return
  2228  00C6                     __end_of_updateFuzz:	
  2229                           
  2230                           	psect	text2
  2231  00C6                     __ptext2:	
  2232 ;; *************** function _updateBoost *****************
  2233 ;; Defined at:
  2234 ;;		line 27 in file "mcc_generated_files/boost.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;		None
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;		None
  2239 ;; Return value:  Size  Location     Type
  2240 ;;                  1    wreg      void 
  2241 ;; Registers used:
  2242 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2243 ;; Tracked objects:
  2244 ;;		On entry : 0/0
  2245 ;;		On exit  : 0/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMMON   BANK0   BANK1
  2248 ;;      Params:         0       0       0
  2249 ;;      Locals:         0       0       0
  2250 ;;      Temps:          0       1       0
  2251 ;;      Totals:         0       1       0
  2252 ;;Total ram usage:        1 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; Hardware stack levels required when called:    6
  2255 ;; This function calls:
  2256 ;;		_setBoostState
  2257 ;; This function is called by:
  2258 ;;		_main
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           
  2263                           ;psect for function _updateBoost
  2264  00C6                     _updateBoost:	
  2265                           
  2266                           ;boost.c: 34: if (PORTAbits.RA5 == 0) {
  2267                           
  2268                           ;incstack = 0
  2269                           ; Regs used in _updateBoost: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2270  00C6  0020               	movlb	0	; select bank0
  2271  00C7  1A8C               	btfsc	12,5	;volatile
  2272  00C8  28D9               	goto	l1479
  2273                           
  2274                           ;boost.c: 35: if (boost_pressed > 0) {
  2275  00C9  0825               	movf	_boost_pressed+1,w
  2276  00CA  3A80               	xorlw	128
  2277  00CB  00C9               	movwf	??_updateBoost
  2278  00CC  3080               	movlw	128
  2279  00CD  0249               	subwf	??_updateBoost,w
  2280  00CE  1D03               	skipz
  2281  00CF  28D2               	goto	u1005
  2282  00D0  3001               	movlw	1
  2283  00D1  0224               	subwf	_boost_pressed,w
  2284  00D2                     u1005:	
  2285  00D2  1C03               	skipc
  2286  00D3  28E9               	goto	l1483
  2287                           
  2288                           ;boost.c: 36: boost_pressed--;
  2289  00D4  30FF               	movlw	255
  2290  00D5  0020               	movlb	0	; select bank0
  2291  00D6  07A4               	addwf	_boost_pressed,f
  2292  00D7  30FF               	movlw	255
  2293  00D8  28E8               	goto	L2
  2294  00D9                     l1479:	
  2295                           ;boost.c: 37: }
  2296                           ;boost.c: 38: } else if (boost_pressed < 25) {
  2297                           
  2298  00D9  0825               	movf	_boost_pressed+1,w
  2299  00DA  3A80               	xorlw	128
  2300  00DB  00C9               	movwf	??_updateBoost
  2301  00DC  3080               	movlw	128
  2302  00DD  0249               	subwf	??_updateBoost,w
  2303  00DE  1D03               	skipz
  2304  00DF  28E2               	goto	u1015
  2305  00E0  3019               	movlw	25
  2306  00E1  0224               	subwf	_boost_pressed,w
  2307  00E2                     u1015:	
  2308  00E2  1803               	skipnc
  2309  00E3  28E9               	goto	l1483
  2310                           
  2311                           ;boost.c: 39: boost_pressed++;
  2312  00E4  3001               	movlw	1
  2313  00E5  0020               	movlb	0	; select bank0
  2314  00E6  07A4               	addwf	_boost_pressed,f
  2315  00E7  3000               	movlw	0
  2316  00E8                     L2:	
  2317  00E8  3DA5               	addwfc	_boost_pressed+1,f
  2318  00E9                     l1483:	
  2319                           
  2320                           ;boost.c: 40: }
  2321                           ;boost.c: 46: if (boost_pressed == 0) {
  2322  00E9  0020               	movlb	0	; select bank0
  2323  00EA  0824               	movf	_boost_pressed,w
  2324  00EB  0425               	iorwf	_boost_pressed+1,w
  2325  00EC  1D03               	btfss	3,2
  2326  00ED  2906               	goto	l1497
  2327                           
  2328                           ;boost.c: 47: if (boost_state == 1) {
  2329  00EE  0336               	decf	_boost_state,w
  2330  00EF  0437               	iorwf	_boost_state+1,w
  2331  00F0  1D03               	btfss	3,2
  2332  00F1  28FB               	goto	l1491
  2333                           
  2334                           ;boost.c: 48: if (boost_up == 1) {
  2335  00F2  0338               	decf	_boost_up,w
  2336  00F3  0439               	iorwf	_boost_up+1,w
  2337  00F4  1D03               	btfss	3,2
  2338  00F5  2902               	goto	l1495
  2339                           
  2340                           ;boost.c: 49: boost_toggle = 1;
  2341  00F6  3001               	movlw	1
  2342  00F7  00A6               	movwf	_boost_toggle
  2343  00F8  3000               	movlw	0
  2344  00F9  00A7               	movwf	_boost_toggle+1
  2345                           
  2346                           ;boost.c: 50: }
  2347                           ;boost.c: 51: } else {
  2348  00FA  2902               	goto	l1495
  2349  00FB                     l1491:	
  2350                           
  2351                           ;boost.c: 53: boost_toggle = 0;
  2352  00FB  01A6               	clrf	_boost_toggle
  2353  00FC  01A7               	clrf	_boost_toggle+1
  2354                           
  2355                           ;boost.c: 54: setBoostState(1);
  2356  00FD  3001               	movlw	1
  2357  00FE  00C7               	movwf	setBoostState@f_state
  2358  00FF  3000               	movlw	0
  2359  0100  00C8               	movwf	setBoostState@f_state+1
  2360  0101  21B3               	fcall	_setBoostState
  2361  0102                     l1495:	
  2362                           
  2363                           ;boost.c: 55: }
  2364                           ;boost.c: 58: boost_up = 0;
  2365  0102  0020               	movlb	0	; select bank0
  2366  0103  01B8               	clrf	_boost_up
  2367  0104  01B9               	clrf	_boost_up+1
  2368                           
  2369                           ;boost.c: 59: } else if (boost_pressed >= 25) {
  2370  0105  0008               	return
  2371  0106                     l1497:	
  2372  0106  0825               	movf	_boost_pressed+1,w
  2373  0107  3A80               	xorlw	128
  2374  0108  00C9               	movwf	??_updateBoost
  2375  0109  3080               	movlw	128
  2376  010A  0249               	subwf	??_updateBoost,w
  2377  010B  1D03               	skipz
  2378  010C  290F               	goto	u1055
  2379  010D  3019               	movlw	25
  2380  010E  0224               	subwf	_boost_pressed,w
  2381  010F                     u1055:	
  2382  010F  1C03               	skipc
  2383  0110  0008               	return
  2384                           
  2385                           ;boost.c: 60: if (boost_toggle == 1) {
  2386  0111  0020               	movlb	0	; select bank0
  2387  0112  0326               	decf	_boost_toggle,w
  2388  0113  0427               	iorwf	_boost_toggle+1,w
  2389  0114  1D03               	btfss	3,2
  2390  0115  291A               	goto	l1503
  2391                           
  2392                           ;boost.c: 61: setBoostState(0);
  2393  0116  3000               	movlw	0
  2394  0117  00C7               	movwf	setBoostState@f_state
  2395  0118  00C8               	movwf	setBoostState@f_state+1
  2396  0119  21B3               	fcall	_setBoostState
  2397  011A                     l1503:	
  2398                           
  2399                           ;boost.c: 62: }
  2400                           ;boost.c: 63: boost_toggle = 0;
  2401  011A  0020               	movlb	0	; select bank0
  2402  011B  01A6               	clrf	_boost_toggle
  2403  011C  01A7               	clrf	_boost_toggle+1
  2404                           
  2405                           ;boost.c: 64: boost_up = 1;
  2406  011D  3001               	movlw	1
  2407  011E  00B8               	movwf	_boost_up
  2408  011F  3000               	movlw	0
  2409  0120  00B9               	movwf	_boost_up+1
  2410                           
  2411                           ;boost.c: 65: boost_pressed = 25;
  2412  0121  3019               	movlw	25
  2413  0122  00A4               	movwf	_boost_pressed
  2414  0123  3000               	movlw	0
  2415  0124  00A5               	movwf	_boost_pressed+1
  2416  0125  0008               	return
  2417  0126                     __end_of_updateBoost:	
  2418                           
  2419                           	psect	text3
  2420  0318                     __ptext3:	
  2421 ;; *************** function _initFuzz *****************
  2422 ;; Defined at:
  2423 ;;		line 28 in file "mcc_generated_files/fuzz.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;		None
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  initState       2    7[BANK0 ] int 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1
  2437 ;;      Params:         0       0       0
  2438 ;;      Locals:         0       2       0
  2439 ;;      Temps:          0       0       0
  2440 ;;      Totals:         0       2       0
  2441 ;;Total ram usage:        2 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    6
  2444 ;; This function calls:
  2445 ;;		_getFuzzState
  2446 ;;		_setFeedbackState
  2447 ;;		_setFuzzState
  2448 ;; This function is called by:
  2449 ;;		_main
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           
  2454                           ;psect for function _initFuzz
  2455  0318                     _initFuzz:	
  2456                           
  2457                           ;fuzz.c: 29: int initState = getFuzzState();
  2458                           
  2459                           ;incstack = 0
  2460                           ; Regs used in _initFuzz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2461  0318  2388               	fcall	_getFuzzState
  2462  0319  0020               	movlb	0	; select bank0
  2463  031A  0844               	movf	?_getFuzzState+1,w
  2464  031B  00CA               	movwf	initFuzz@initState+1
  2465  031C  0843               	movf	?_getFuzzState,w
  2466  031D  00C9               	movwf	initFuzz@initState
  2467                           
  2468                           ;fuzz.c: 30: setFuzzState(initState);
  2469  031E  084A               	movf	initFuzz@initState+1,w
  2470  031F  00C8               	movwf	setFuzzState@f_state+1
  2471  0320  0849               	movf	initFuzz@initState,w
  2472  0321  00C7               	movwf	setFuzzState@f_state
  2473  0322  2179               	fcall	_setFuzzState
  2474                           
  2475                           ;fuzz.c: 31: setFeedbackState(0);
  2476  0323  3000               	movlw	0
  2477  0324  0020               	movlb	0	; select bank0
  2478  0325  00C4               	movwf	setFeedbackState@f_state
  2479  0326  00C5               	movwf	setFeedbackState@f_state+1
  2480  0327  21ED               	fcall	_setFeedbackState
  2481  0328  0008               	return
  2482  0329                     __end_of_initFuzz:	
  2483                           
  2484                           	psect	text4
  2485  0179                     __ptext4:	
  2486 ;; *************** function _setFuzzState *****************
  2487 ;; Defined at:
  2488 ;;		line 95 in file "mcc_generated_files/fuzz.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;  f_state         2    5[BANK0 ] int 
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;		None
  2493 ;; Return value:  Size  Location     Type
  2494 ;;                  1    wreg      void 
  2495 ;; Registers used:
  2496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2497 ;; Tracked objects:
  2498 ;;		On entry : 0/0
  2499 ;;		On exit  : 0/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMMON   BANK0   BANK1
  2502 ;;      Params:         0       2       0
  2503 ;;      Locals:         0       0       0
  2504 ;;      Temps:          0       0       0
  2505 ;;      Totals:         0       2       0
  2506 ;;Total ram usage:        2 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    5
  2509 ;; This function calls:
  2510 ;;		_updateFuzzState
  2511 ;;		_wait_ms
  2512 ;; This function is called by:
  2513 ;;		_initFuzz
  2514 ;;		_updateFuzz
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           
  2519                           ;psect for function _setFuzzState
  2520  0179                     _setFuzzState:	
  2521                           
  2522                           ;fuzz.c: 96: if (fuzz_state == f_state) {return;}
  2523                           
  2524                           ;incstack = 0
  2525                           ; Regs used in _setFuzzState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2526  0179  0020               	movlb	0	; select bank0
  2527  017A  0848               	movf	setFuzzState@f_state+1,w
  2528  017B  063D               	xorwf	_fuzz_state+1,w
  2529  017C  1D03               	skipz
  2530  017D  2980               	goto	u775
  2531  017E  0847               	movf	setFuzzState@f_state,w
  2532  017F  063C               	xorwf	_fuzz_state,w
  2533  0180                     u775:	
  2534  0180  1903               	btfsc	3,2
  2535  0181  0008               	return
  2536                           
  2537                           ;fuzz.c: 97: fuzz_state = f_state;
  2538  0182  0848               	movf	setFuzzState@f_state+1,w
  2539  0183  00BD               	movwf	_fuzz_state+1
  2540  0184  0847               	movf	setFuzzState@f_state,w
  2541  0185  00BC               	movwf	_fuzz_state
  2542                           
  2543                           ;fuzz.c: 98: LATAbits.LATA2 = f_state;
  2544  0186  0C47               	rrf	setFuzzState@f_state,w
  2545  0187  0022               	movlb	2	; select bank2
  2546  0188  1C03               	skipc
  2547  0189  110C               	bcf	12,2	;volatile
  2548  018A  1803               	skipnc
  2549  018B  150C               	bsf	12,2	;volatile
  2550                           
  2551                           ;fuzz.c: 99: LATCbits.LATC2 = f_state;
  2552  018C  0020               	movlb	0	; select bank0
  2553  018D  0C47               	rrf	setFuzzState@f_state,w
  2554  018E  0022               	movlb	2	; select bank2
  2555  018F  1C03               	skipc
  2556  0190  110E               	bcf	14,2	;volatile
  2557  0191  1803               	skipnc
  2558  0192  150E               	bsf	14,2	;volatile
  2559                           
  2560                           ;fuzz.c: 100: LATCbits.LATC1 = !f_state;
  2561  0193  0020               	movlb	0	; select bank0
  2562  0194  0847               	movf	setFuzzState@f_state,w
  2563  0195  0448               	iorwf	setFuzzState@f_state+1,w
  2564  0196  1D03               	btfss	3,2
  2565  0197  299B               	goto	u780
  2566  0198  0022               	movlb	2	; select bank2
  2567  0199  148E               	bsf	14,1	;volatile
  2568  019A  299D               	goto	l1343
  2569  019B                     u780:	
  2570  019B  0022               	movlb	2	; select bank2
  2571  019C  108E               	bcf	14,1	;volatile
  2572  019D                     l1343:	
  2573                           
  2574                           ;fuzz.c: 102: wait_ms(20);
  2575  019D  3014               	movlw	20
  2576  019E  0020               	movlb	0	; select bank0
  2577  019F  00C2               	movwf	wait_ms@time
  2578  01A0  3000               	movlw	0
  2579  01A1  00C3               	movwf	wait_ms@time+1
  2580  01A2  2284               	fcall	_wait_ms
  2581                           
  2582                           ;fuzz.c: 104: LATCbits.LATC2 = 0;
  2583  01A3  0022               	movlb	2	; select bank2
  2584  01A4  110E               	bcf	14,2	;volatile
  2585                           
  2586                           ;fuzz.c: 105: LATCbits.LATC1 = 0;
  2587  01A5  108E               	bcf	14,1	;volatile
  2588                           
  2589                           ;fuzz.c: 107: updateFuzzState(fuzz_state);
  2590  01A6  0020               	movlb	0	; select bank0
  2591  01A7  083D               	movf	_fuzz_state+1,w
  2592  01A8  00C6               	movwf	updateFuzzState@state+1
  2593  01A9  083C               	movf	_fuzz_state,w
  2594  01AA  00C5               	movwf	updateFuzzState@state
  2595  01AB  2339               	fcall	_updateFuzzState
  2596                           
  2597                           ;fuzz.c: 108: wait_ms(20);
  2598  01AC  3014               	movlw	20
  2599  01AD  0020               	movlb	0	; select bank0
  2600  01AE  00C2               	movwf	wait_ms@time
  2601  01AF  3000               	movlw	0
  2602  01B0  00C3               	movwf	wait_ms@time+1
  2603  01B1  2284               	fcall	_wait_ms
  2604  01B2  0008               	return
  2605  01B3                     __end_of_setFuzzState:	
  2606                           
  2607                           	psect	text5
  2608  0339                     __ptext5:	
  2609 ;; *************** function _updateFuzzState *****************
  2610 ;; Defined at:
  2611 ;;		line 57 in file "state_manager.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;  state           2    3[BANK0 ] int 
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;		None
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1
  2625 ;;      Params:         0       2       0
  2626 ;;      Locals:         0       0       0
  2627 ;;      Temps:          0       0       0
  2628 ;;      Totals:         0       2       0
  2629 ;;Total ram usage:        2 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    4
  2632 ;; This function calls:
  2633 ;;		_saveState
  2634 ;; This function is called by:
  2635 ;;		_setFuzzState
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           
  2640                           ;psect for function _updateFuzzState
  2641  0339                     _updateFuzzState:	
  2642                           
  2643                           ;state_manager.c: 58: if (state != 1) {state = 0;}
  2644                           
  2645                           ;incstack = 0
  2646                           ; Regs used in _updateFuzzState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2647  0339  0020               	movlb	0	; select bank0
  2648  033A  0345               	decf	updateFuzzState@state,w
  2649  033B  0446               	iorwf	updateFuzzState@state+1,w
  2650  033C  1903               	btfsc	3,2
  2651  033D  2B40               	goto	l1309
  2652  033E  01C5               	clrf	updateFuzzState@state
  2653  033F  01C6               	clrf	updateFuzzState@state+1
  2654  0340                     l1309:	
  2655                           
  2656                           ;state_manager.c: 60: pedalState.fuzz = state;
  2657  0340  0846               	movf	updateFuzzState@state+1,w
  2658  0341  00B3               	movwf	_pedalState+1
  2659  0342  0845               	movf	updateFuzzState@state,w
  2660  0343  00B2               	movwf	_pedalState
  2661                           
  2662                           ;state_manager.c: 61: saveState();
  2663  0344  2329               	fcall	_saveState
  2664  0345  0008               	return
  2665  0346                     __end_of_updateFuzzState:	
  2666                           
  2667                           	psect	text6
  2668  01ED                     __ptext6:	
  2669 ;; *************** function _setFeedbackState *****************
  2670 ;; Defined at:
  2671 ;;		line 111 in file "mcc_generated_files/fuzz.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  f_state         2    2[BANK0 ] int 
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;		None
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      void 
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0, pclath, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMMON   BANK0   BANK1
  2685 ;;      Params:         0       2       0
  2686 ;;      Locals:         0       0       0
  2687 ;;      Temps:          0       0       0
  2688 ;;      Totals:         0       2       0
  2689 ;;Total ram usage:        2 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    3
  2692 ;; This function calls:
  2693 ;;		_wait_ms
  2694 ;; This function is called by:
  2695 ;;		_initFuzz
  2696 ;;		_updateFuzz
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           
  2701                           ;psect for function _setFeedbackState
  2702  01ED                     _setFeedbackState:	
  2703                           
  2704                           ;fuzz.c: 112: if (feedback_state == f_state) {return;}
  2705                           
  2706                           ;incstack = 0
  2707                           ; Regs used in _setFeedbackState: [wreg+status,2+status,0+pclath+cstack]
  2708  01ED  0020               	movlb	0	; select bank0
  2709  01EE  0845               	movf	setFeedbackState@f_state+1,w
  2710  01EF  063B               	xorwf	_feedback_state+1,w
  2711  01F0  1D03               	skipz
  2712  01F1  29F4               	goto	u805
  2713  01F2  0844               	movf	setFeedbackState@f_state,w
  2714  01F3  063A               	xorwf	_feedback_state,w
  2715  01F4                     u805:	
  2716  01F4  1903               	btfsc	3,2
  2717  01F5  0008               	return
  2718                           
  2719                           ;fuzz.c: 113: feedback_state = f_state;
  2720  01F6  0845               	movf	setFeedbackState@f_state+1,w
  2721  01F7  00BB               	movwf	_feedback_state+1
  2722  01F8  0844               	movf	setFeedbackState@f_state,w
  2723  01F9  00BA               	movwf	_feedback_state
  2724                           
  2725                           ;fuzz.c: 114: LATCbits.LATC3 = f_state;
  2726  01FA  0C44               	rrf	setFeedbackState@f_state,w
  2727  01FB  0022               	movlb	2	; select bank2
  2728  01FC  1C03               	skipc
  2729  01FD  118E               	bcf	14,3	;volatile
  2730  01FE  1803               	skipnc
  2731  01FF  158E               	bsf	14,3	;volatile
  2732                           
  2733                           ;fuzz.c: 115: LATAbits.LATA0 = f_state;
  2734  0200  0020               	movlb	0	; select bank0
  2735  0201  0C44               	rrf	setFeedbackState@f_state,w
  2736  0202  0022               	movlb	2	; select bank2
  2737  0203  1C03               	skipc
  2738  0204  100C               	bcf	12,0	;volatile
  2739  0205  1803               	skipnc
  2740  0206  140C               	bsf	12,0	;volatile
  2741                           
  2742                           ;fuzz.c: 116: LATAbits.LATA1 = !f_state;
  2743  0207  0020               	movlb	0	; select bank0
  2744  0208  0844               	movf	setFeedbackState@f_state,w
  2745  0209  0445               	iorwf	setFeedbackState@f_state+1,w
  2746  020A  1D03               	btfss	3,2
  2747  020B  2A0F               	goto	u810
  2748  020C  0022               	movlb	2	; select bank2
  2749  020D  148C               	bsf	12,1	;volatile
  2750  020E  2A11               	goto	l1365
  2751  020F                     u810:	
  2752  020F  0022               	movlb	2	; select bank2
  2753  0210  108C               	bcf	12,1	;volatile
  2754  0211                     l1365:	
  2755                           
  2756                           ;fuzz.c: 118: wait_ms(20);
  2757  0211  3014               	movlw	20
  2758  0212  0020               	movlb	0	; select bank0
  2759  0213  00C2               	movwf	wait_ms@time
  2760  0214  3000               	movlw	0
  2761  0215  00C3               	movwf	wait_ms@time+1
  2762  0216  2284               	fcall	_wait_ms
  2763                           
  2764                           ;fuzz.c: 120: LATAbits.LATA0 = 0;
  2765  0217  0022               	movlb	2	; select bank2
  2766  0218  100C               	bcf	12,0	;volatile
  2767                           
  2768                           ;fuzz.c: 121: LATAbits.LATA1 = 0;
  2769  0219  108C               	bcf	12,1	;volatile
  2770                           
  2771                           ;fuzz.c: 124: wait_ms(20);
  2772  021A  3014               	movlw	20
  2773  021B  0020               	movlb	0	; select bank0
  2774  021C  00C2               	movwf	wait_ms@time
  2775  021D  3000               	movlw	0
  2776  021E  00C3               	movwf	wait_ms@time+1
  2777  021F  2284               	fcall	_wait_ms
  2778  0220  0008               	return
  2779  0221                     __end_of_setFeedbackState:	
  2780                           
  2781                           	psect	text7
  2782  0388                     __ptext7:	
  2783 ;; *************** function _getFuzzState *****************
  2784 ;; Defined at:
  2785 ;;		line 42 in file "state_manager.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;		None
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  2    1[BANK0 ] int 
  2792 ;; Registers used:
  2793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMMON   BANK0   BANK1
  2799 ;;      Params:         0       2       0
  2800 ;;      Locals:         0       0       0
  2801 ;;      Temps:          0       0       0
  2802 ;;      Totals:         0       2       0
  2803 ;;Total ram usage:        2 bytes
  2804 ;; Hardware stack levels used:    1
  2805 ;; Hardware stack levels required when called:    4
  2806 ;; This function calls:
  2807 ;;		_getCurrentState
  2808 ;; This function is called by:
  2809 ;;		_initFuzz
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           
  2814                           ;psect for function _getFuzzState
  2815  0388                     _getFuzzState:	
  2816                           
  2817                           ;state_manager.c: 43: getCurrentState();
  2818                           
  2819                           ;incstack = 0
  2820                           ; Regs used in _getFuzzState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2821  0388  22AC               	fcall	_getCurrentState
  2822                           
  2823                           ;state_manager.c: 44: return pedalState.fuzz;
  2824  0389  0020               	movlb	0	; select bank0
  2825  038A  0833               	movf	_pedalState+1,w
  2826  038B  00C4               	movwf	?_getFuzzState+1
  2827  038C  0832               	movf	_pedalState,w
  2828  038D  00C3               	movwf	?_getFuzzState
  2829  038E  0008               	return
  2830  038F                     __end_of_getFuzzState:	
  2831                           
  2832                           	psect	text8
  2833  035F                     __ptext8:	
  2834 ;; *************** function _initBoost *****************
  2835 ;; Defined at:
  2836 ;;		line 22 in file "mcc_generated_files/boost.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  initState       2    7[BANK0 ] int 
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMMON   BANK0   BANK1
  2850 ;;      Params:         0       0       0
  2851 ;;      Locals:         0       2       0
  2852 ;;      Temps:          0       0       0
  2853 ;;      Totals:         0       2       0
  2854 ;;Total ram usage:        2 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    6
  2857 ;; This function calls:
  2858 ;;		_getBoostState
  2859 ;;		_setBoostState
  2860 ;; This function is called by:
  2861 ;;		_main
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           
  2866                           ;psect for function _initBoost
  2867  035F                     _initBoost:	
  2868                           
  2869                           ;boost.c: 23: int initState = getBoostState();
  2870                           
  2871                           ;incstack = 0
  2872                           ; Regs used in _initBoost: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2873  035F  236B               	fcall	_getBoostState
  2874  0360  0020               	movlb	0	; select bank0
  2875  0361  0844               	movf	?_getBoostState+1,w
  2876  0362  00CA               	movwf	initBoost@initState+1
  2877  0363  0843               	movf	?_getBoostState,w
  2878  0364  00C9               	movwf	initBoost@initState
  2879                           
  2880                           ;boost.c: 24: setBoostState(initState);
  2881  0365  084A               	movf	initBoost@initState+1,w
  2882  0366  00C8               	movwf	setBoostState@f_state+1
  2883  0367  0849               	movf	initBoost@initState,w
  2884  0368  00C7               	movwf	setBoostState@f_state
  2885  0369  21B3               	fcall	_setBoostState
  2886  036A  0008               	return
  2887  036B                     __end_of_initBoost:	
  2888                           
  2889                           	psect	text9
  2890  01B3                     __ptext9:	
  2891 ;; *************** function _setBoostState *****************
  2892 ;; Defined at:
  2893 ;;		line 72 in file "mcc_generated_files/boost.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;  f_state         2    5[BANK0 ] int 
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;		None
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  1    wreg      void 
  2900 ;; Registers used:
  2901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMMON   BANK0   BANK1
  2907 ;;      Params:         0       2       0
  2908 ;;      Locals:         0       0       0
  2909 ;;      Temps:          0       0       0
  2910 ;;      Totals:         0       2       0
  2911 ;;Total ram usage:        2 bytes
  2912 ;; Hardware stack levels used:    1
  2913 ;; Hardware stack levels required when called:    5
  2914 ;; This function calls:
  2915 ;;		_updateBoostState
  2916 ;;		_wait_ms
  2917 ;; This function is called by:
  2918 ;;		_initBoost
  2919 ;;		_updateBoost
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           
  2924                           ;psect for function _setBoostState
  2925  01B3                     _setBoostState:	
  2926                           
  2927                           ;boost.c: 73: if (boost_state == f_state) {return;}
  2928                           
  2929                           ;incstack = 0
  2930                           ; Regs used in _setBoostState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2931  01B3  0020               	movlb	0	; select bank0
  2932  01B4  0848               	movf	setBoostState@f_state+1,w
  2933  01B5  0637               	xorwf	_boost_state+1,w
  2934  01B6  1D03               	skipz
  2935  01B7  29BA               	goto	u845
  2936  01B8  0847               	movf	setBoostState@f_state,w
  2937  01B9  0636               	xorwf	_boost_state,w
  2938  01BA                     u845:	
  2939  01BA  1903               	btfsc	3,2
  2940  01BB  0008               	return
  2941                           
  2942                           ;boost.c: 74: boost_state = f_state;
  2943  01BC  0848               	movf	setBoostState@f_state+1,w
  2944  01BD  00B7               	movwf	_boost_state+1
  2945  01BE  0847               	movf	setBoostState@f_state,w
  2946  01BF  00B6               	movwf	_boost_state
  2947                           
  2948                           ;boost.c: 75: LATCbits.LATC5 = f_state;
  2949  01C0  0C47               	rrf	setBoostState@f_state,w
  2950  01C1  0022               	movlb	2	; select bank2
  2951  01C2  1C03               	skipc
  2952  01C3  128E               	bcf	14,5	;volatile
  2953  01C4  1803               	skipnc
  2954  01C5  168E               	bsf	14,5	;volatile
  2955                           
  2956                           ;boost.c: 76: LATCbits.LATC0 = f_state;
  2957  01C6  0020               	movlb	0	; select bank0
  2958  01C7  0C47               	rrf	setBoostState@f_state,w
  2959  01C8  0022               	movlb	2	; select bank2
  2960  01C9  1C03               	skipc
  2961  01CA  100E               	bcf	14,0	;volatile
  2962  01CB  1803               	skipnc
  2963  01CC  140E               	bsf	14,0	;volatile
  2964                           
  2965                           ;boost.c: 77: LATCbits.LATC4 = !f_state;
  2966  01CD  0020               	movlb	0	; select bank0
  2967  01CE  0847               	movf	setBoostState@f_state,w
  2968  01CF  0448               	iorwf	setBoostState@f_state+1,w
  2969  01D0  1D03               	btfss	3,2
  2970  01D1  29D5               	goto	u850
  2971  01D2  0022               	movlb	2	; select bank2
  2972  01D3  160E               	bsf	14,4	;volatile
  2973  01D4  29D7               	goto	l1393
  2974  01D5                     u850:	
  2975  01D5  0022               	movlb	2	; select bank2
  2976  01D6  120E               	bcf	14,4	;volatile
  2977  01D7                     l1393:	
  2978                           
  2979                           ;boost.c: 79: wait_ms(20);
  2980  01D7  3014               	movlw	20
  2981  01D8  0020               	movlb	0	; select bank0
  2982  01D9  00C2               	movwf	wait_ms@time
  2983  01DA  3000               	movlw	0
  2984  01DB  00C3               	movwf	wait_ms@time+1
  2985  01DC  2284               	fcall	_wait_ms
  2986                           
  2987                           ;boost.c: 81: LATCbits.LATC0 = 0;
  2988  01DD  0022               	movlb	2	; select bank2
  2989  01DE  100E               	bcf	14,0	;volatile
  2990                           
  2991                           ;boost.c: 82: LATCbits.LATC4 = 0;
  2992  01DF  120E               	bcf	14,4	;volatile
  2993                           
  2994                           ;boost.c: 84: updateBoostState(boost_state);
  2995  01E0  0020               	movlb	0	; select bank0
  2996  01E1  0837               	movf	_boost_state+1,w
  2997  01E2  00C6               	movwf	updateBoostState@state+1
  2998  01E3  0836               	movf	_boost_state,w
  2999  01E4  00C5               	movwf	updateBoostState@state
  3000  01E5  2346               	fcall	_updateBoostState
  3001                           
  3002                           ;boost.c: 85: wait_ms(20);
  3003  01E6  3014               	movlw	20
  3004  01E7  0020               	movlb	0	; select bank0
  3005  01E8  00C2               	movwf	wait_ms@time
  3006  01E9  3000               	movlw	0
  3007  01EA  00C3               	movwf	wait_ms@time+1
  3008  01EB  2284               	fcall	_wait_ms
  3009  01EC  0008               	return
  3010  01ED                     __end_of_setBoostState:	
  3011                           
  3012                           	psect	text10
  3013  0284                     __ptext10:	
  3014 ;; *************** function _wait_ms *****************
  3015 ;; Defined at:
  3016 ;;		line 23 in file "system.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;  time            2    0[BANK0 ] unsigned int 
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;		None
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		wreg, status,2, status,0, pclath, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMMON   BANK0   BANK1
  3030 ;;      Params:         0       2       0
  3031 ;;      Locals:         0       0       0
  3032 ;;      Temps:          0       0       0
  3033 ;;      Totals:         0       2       0
  3034 ;;Total ram usage:        2 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    2
  3037 ;; This function calls:
  3038 ;;		___lmul
  3039 ;; This function is called by:
  3040 ;;		_setFuzzState
  3041 ;;		_setFeedbackState
  3042 ;;		_setBoostState
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           
  3047                           ;psect for function _wait_ms
  3048  0284                     _wait_ms:	
  3049                           
  3050                           ;system.c: 25: static long timel = 0;
  3051                           ;system.c: 26: timel = time * 1000l;
  3052                           
  3053                           ;incstack = 0
  3054                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  3055  0284  0020               	movlb	0	; select bank0
  3056  0285  0842               	movf	wait_ms@time,w
  3057  0286  00F1               	movwf	___lmul@multiplier
  3058  0287  0843               	movf	wait_ms@time+1,w
  3059  0288  00F2               	movwf	___lmul@multiplier+1
  3060  0289  01F3               	clrf	___lmul@multiplier+2
  3061  028A  01F4               	clrf	___lmul@multiplier+3
  3062  028B  3000               	movlw	0
  3063  028C  00F8               	movwf	___lmul@multiplicand+3
  3064  028D  3000               	movlw	0
  3065  028E  00F7               	movwf	___lmul@multiplicand+2
  3066  028F  3003               	movlw	3
  3067  0290  00F6               	movwf	___lmul@multiplicand+1
  3068  0291  30E8               	movlw	232
  3069  0292  00F5               	movwf	___lmul@multiplicand
  3070  0293  2255               	fcall	___lmul
  3071  0294  0874               	movf	?___lmul+3,w
  3072  0295  0020               	movlb	0	; select bank0
  3073  0296  00A3               	movwf	wait_ms@timel+3
  3074  0297  0873               	movf	?___lmul+2,w
  3075  0298  00A2               	movwf	wait_ms@timel+2
  3076  0299  0872               	movf	?___lmul+1,w
  3077  029A  00A1               	movwf	wait_ms@timel+1
  3078  029B  0871               	movf	?___lmul,w
  3079  029C  00A0               	movwf	wait_ms@timel
  3080  029D                     l71:	
  3081                           ;system.c: 27: for( ; timel; timel--);
  3082                           
  3083  029D  0823               	movf	wait_ms@timel+3,w
  3084  029E  0422               	iorwf	wait_ms@timel+2,w
  3085  029F  0421               	iorwf	wait_ms@timel+1,w
  3086  02A0  0420               	iorwf	wait_ms@timel,w
  3087  02A1  1903               	btfsc	3,2
  3088  02A2  0008               	return
  3089  02A3  30FF               	movlw	255
  3090  02A4  07A0               	addwf	wait_ms@timel,f
  3091  02A5  30FF               	movlw	255
  3092  02A6  3DA1               	addwfc	wait_ms@timel+1,f
  3093  02A7  30FF               	movlw	255
  3094  02A8  3DA2               	addwfc	wait_ms@timel+2,f
  3095  02A9  30FF               	movlw	255
  3096  02AA  3DA3               	addwfc	wait_ms@timel+3,f
  3097  02AB  2A9D               	goto	l71
  3098  02AC                     __end_of_wait_ms:	
  3099                           
  3100                           	psect	text11
  3101  0255                     __ptext11:	
  3102 ;; *************** function ___lmul *****************
  3103 ;; Defined at:
  3104 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;  multiplier      4    1[COMMON] unsigned long 
  3107 ;;  multiplicand    4    5[COMMON] unsigned long 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  product         4    9[COMMON] unsigned long 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  4    1[COMMON] unsigned long 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2, status,0
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMMON   BANK0   BANK1
  3119 ;;      Params:         8       0       0
  3120 ;;      Locals:         4       0       0
  3121 ;;      Temps:          0       0       0
  3122 ;;      Totals:        12       0       0
  3123 ;;Total ram usage:       12 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    1
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_wait_ms
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           
  3134                           ;psect for function ___lmul
  3135  0255                     ___lmul:	
  3136                           
  3137                           ;incstack = 0
  3138                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3139  0255  3000               	movlw	0
  3140  0256  00FC               	movwf	___lmul@product+3
  3141  0257  3000               	movlw	0
  3142  0258  00FB               	movwf	___lmul@product+2
  3143  0259  3000               	movlw	0
  3144  025A  00FA               	movwf	___lmul@product+1
  3145  025B  3000               	movlw	0
  3146  025C  00F9               	movwf	___lmul@product
  3147  025D                     l1289:	
  3148  025D  1C71               	btfss	___lmul@multiplier,0
  3149  025E  2A67               	goto	l1293
  3150  025F  0875               	movf	___lmul@multiplicand,w
  3151  0260  07F9               	addwf	___lmul@product,f
  3152  0261  0876               	movf	___lmul@multiplicand+1,w
  3153  0262  3DFA               	addwfc	___lmul@product+1,f
  3154  0263  0877               	movf	___lmul@multiplicand+2,w
  3155  0264  3DFB               	addwfc	___lmul@product+2,f
  3156  0265  0878               	movf	___lmul@multiplicand+3,w
  3157  0266  3DFC               	addwfc	___lmul@product+3,f
  3158  0267                     l1293:	
  3159  0267  3001               	movlw	1
  3160  0268                     u715:	
  3161  0268  35F5               	lslf	___lmul@multiplicand,f
  3162  0269  0DF6               	rlf	___lmul@multiplicand+1,f
  3163  026A  0DF7               	rlf	___lmul@multiplicand+2,f
  3164  026B  0DF8               	rlf	___lmul@multiplicand+3,f
  3165  026C  0B89               	decfsz	9,f
  3166  026D  2A68               	goto	u715
  3167  026E  3001               	movlw	1
  3168  026F                     u725:	
  3169  026F  36F4               	lsrf	___lmul@multiplier+3,f
  3170  0270  0CF3               	rrf	___lmul@multiplier+2,f
  3171  0271  0CF2               	rrf	___lmul@multiplier+1,f
  3172  0272  0CF1               	rrf	___lmul@multiplier,f
  3173  0273  0B89               	decfsz	9,f
  3174  0274  2A6F               	goto	u725
  3175  0275  0874               	movf	___lmul@multiplier+3,w
  3176  0276  0473               	iorwf	___lmul@multiplier+2,w
  3177  0277  0472               	iorwf	___lmul@multiplier+1,w
  3178  0278  0471               	iorwf	___lmul@multiplier,w
  3179  0279  1D03               	skipz
  3180  027A  2A5D               	goto	l1289
  3181  027B  087C               	movf	___lmul@product+3,w
  3182  027C  00F4               	movwf	?___lmul+3
  3183  027D  087B               	movf	___lmul@product+2,w
  3184  027E  00F3               	movwf	?___lmul+2
  3185  027F  087A               	movf	___lmul@product+1,w
  3186  0280  00F2               	movwf	?___lmul+1
  3187  0281  0879               	movf	___lmul@product,w
  3188  0282  00F1               	movwf	?___lmul
  3189  0283  0008               	return
  3190  0284                     __end_of___lmul:	
  3191                           
  3192                           	psect	text12
  3193  0346                     __ptext12:	
  3194 ;; *************** function _updateBoostState *****************
  3195 ;; Defined at:
  3196 ;;		line 65 in file "state_manager.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;  state           2    3[BANK0 ] int 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMMON   BANK0   BANK1
  3210 ;;      Params:         0       2       0
  3211 ;;      Locals:         0       0       0
  3212 ;;      Temps:          0       0       0
  3213 ;;      Totals:         0       2       0
  3214 ;;Total ram usage:        2 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    4
  3217 ;; This function calls:
  3218 ;;		_saveState
  3219 ;; This function is called by:
  3220 ;;		_setBoostState
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _updateBoostState
  3226  0346                     _updateBoostState:	
  3227                           
  3228                           ;state_manager.c: 66: if (state != 1) {state = 0;}
  3229                           
  3230                           ;incstack = 0
  3231                           ; Regs used in _updateBoostState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3232  0346  0020               	movlb	0	; select bank0
  3233  0347  0345               	decf	updateBoostState@state,w
  3234  0348  0446               	iorwf	updateBoostState@state+1,w
  3235  0349  1903               	btfsc	3,2
  3236  034A  2B4D               	goto	l1317
  3237  034B  01C5               	clrf	updateBoostState@state
  3238  034C  01C6               	clrf	updateBoostState@state+1
  3239  034D                     l1317:	
  3240                           
  3241                           ;state_manager.c: 68: pedalState.boost = state;
  3242  034D  0846               	movf	updateBoostState@state+1,w
  3243  034E  00B5               	movwf	_pedalState+3
  3244  034F  0845               	movf	updateBoostState@state,w
  3245  0350  00B4               	movwf	_pedalState+2
  3246                           
  3247                           ;state_manager.c: 69: saveState();
  3248  0351  2329               	fcall	_saveState
  3249  0352  0008               	return
  3250  0353                     __end_of_updateBoostState:	
  3251                           
  3252                           	psect	text13
  3253  0329                     __ptext13:	
  3254 ;; *************** function _saveState *****************
  3255 ;; Defined at:
  3256 ;;		line 72 in file "state_manager.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;		None
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  r               1   12[COMMON] unsigned char 
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  1    wreg      void 
  3263 ;; Registers used:
  3264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMMON   BANK0   BANK1
  3270 ;;      Params:         0       0       0
  3271 ;;      Locals:         1       0       0
  3272 ;;      Temps:          0       3       0
  3273 ;;      Totals:         1       3       0
  3274 ;;Total ram usage:        4 bytes
  3275 ;; Hardware stack levels used:    1
  3276 ;; Hardware stack levels required when called:    3
  3277 ;; This function calls:
  3278 ;;		_HEF_ByteArrayWrite
  3279 ;; This function is called by:
  3280 ;;		_updateFuzzState
  3281 ;;		_updateBoostState
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           
  3286                           ;psect for function _saveState
  3287  0329                     _saveState:	
  3288                           
  3289                           ;state_manager.c: 73: uint8_t r;
  3290                           ;state_manager.c: 74: r = HEF_ByteArrayWrite(1, (void *) &pedalState, sizeof (pedalState
      +                          ));
  3291                           
  3292                           ;incstack = 0
  3293                           ; Regs used in _saveState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3294  0329  3032               	movlw	(low (_pedalState| 0))& (0+255)
  3295  032A  0020               	movlb	0	; select bank0
  3296  032B  00C2               	movwf	??_saveState
  3297  032C  0842               	movf	??_saveState,w
  3298  032D  00F4               	movwf	HEF_ByteArrayWrite@byteArray
  3299  032E  3004               	movlw	4
  3300  032F  00C3               	movwf	??_saveState+1
  3301  0330  0843               	movf	??_saveState+1,w
  3302  0331  00F5               	movwf	HEF_ByteArrayWrite@count
  3303  0332  3001               	movlw	1
  3304  0333  2126               	fcall	_HEF_ByteArrayWrite
  3305  0334  0020               	movlb	0	; select bank0
  3306  0335  00C4               	movwf	??_saveState+2
  3307  0336  0844               	movf	??_saveState+2,w
  3308  0337  00FC               	movwf	saveState@r
  3309  0338  0008               	return
  3310  0339                     __end_of_saveState:	
  3311                           
  3312                           	psect	text14
  3313  0126                     __ptext14:	
  3314 ;; *************** function _HEF_ByteArrayWrite *****************
  3315 ;; Defined at:
  3316 ;;		line 12 in file "HEF.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  block           1    wreg     unsigned char 
  3319 ;;  byteArray       1    4[COMMON] PTR unsigned char 
  3320 ;;		 -> pedalState(4), 
  3321 ;;  count           1    5[COMMON] unsigned char 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  block           1    9[COMMON] unsigned char 
  3324 ;;  blockAddr       2   10[COMMON] unsigned int 
  3325 ;;  GIEBitValue     1    8[COMMON] unsigned char 
  3326 ;;  i               1    0        unsigned char 
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      char 
  3329 ;; Registers used:
  3330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMMON   BANK0   BANK1
  3336 ;;      Params:         2       0       0
  3337 ;;      Locals:         4       0       0
  3338 ;;      Temps:          2       0       0
  3339 ;;      Totals:         8       0       0
  3340 ;;Total ram usage:        8 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; Hardware stack levels required when called:    2
  3343 ;; This function calls:
  3344 ;;		_FLASH_EraseBlock
  3345 ;; This function is called by:
  3346 ;;		_saveState
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           
  3351                           ;psect for function _HEF_ByteArrayWrite
  3352  0126                     _HEF_ByteArrayWrite:	
  3353                           
  3354                           ;incstack = 0
  3355                           ; Regs used in _HEF_ByteArrayWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3356                           ;HEF_ByteArrayWrite@block stored from wreg
  3357  0126  00F9               	movwf	HEF_ByteArrayWrite@block
  3358                           
  3359                           ;HEF.c: 13: uint16_t blockAddr;
  3360                           ;HEF.c: 14: uint8_t GIEBitValue = INTCONbits.GIE;
  3361  0127  3000               	movlw	0
  3362  0128  1B8B               	btfsc	11,7	;volatile
  3363  0129  3001               	movlw	1
  3364  012A  00F8               	movwf	HEF_ByteArrayWrite@GIEBitValue
  3365                           
  3366                           ;HEF.c: 15: uint8_t i;
  3367                           ;HEF.c: 17: if ( ( block >= 128 / 32) || ( count > 32))
  3368  012B  3004               	movlw	4
  3369  012C  0279               	subwf	HEF_ByteArrayWrite@block,w
  3370  012D  1803               	skipnc
  3371  012E  2933               	goto	l1199
  3372  012F  3021               	movlw	33
  3373  0130  0275               	subwf	HEF_ByteArrayWrite@count,w
  3374  0131  1C03               	skipc
  3375  0132  2935               	goto	l1203
  3376  0133                     l1199:	
  3377                           
  3378                           ;HEF.c: 18: return -1;
  3379  0133  30FF               	movlw	255
  3380  0134  0008               	return
  3381  0135                     l1203:	
  3382                           
  3383                           ;HEF.c: 20: blockAddr = 16384 - 128 + block * 32;
  3384  0135  0879               	movf	HEF_ByteArrayWrite@block,w
  3385  0136  00F6               	movwf	??_HEF_ByteArrayWrite
  3386  0137  01F7               	clrf	??_HEF_ByteArrayWrite+1
  3387  0138  3005               	movlw	5
  3388  0139                     u605:	
  3389  0139  35F6               	lslf	??_HEF_ByteArrayWrite,f
  3390  013A  0DF7               	rlf	??_HEF_ByteArrayWrite+1,f
  3391  013B  0B89               	decfsz	9,f
  3392  013C  2939               	goto	u605
  3393  013D  0876               	movf	??_HEF_ByteArrayWrite,w
  3394  013E  3E80               	addlw	128
  3395  013F  00FA               	movwf	HEF_ByteArrayWrite@blockAddr
  3396  0140  303F               	movlw	63
  3397  0141  3D77               	addwfc	??_HEF_ByteArrayWrite+1,w
  3398  0142  00FB               	movwf	HEF_ByteArrayWrite@blockAddr+1
  3399                           
  3400                           ;HEF.c: 21: INTCONbits.GIE = 0;
  3401  0143  138B               	bcf	11,7	;volatile
  3402                           
  3403                           ;HEF.c: 23: FLASH_EraseBlock( blockAddr);
  3404  0144  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3405  0145  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  3406  0146  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3407  0147  00F1               	movwf	FLASH_EraseBlock@startAddr
  3408  0148  22CE               	fcall	_FLASH_EraseBlock
  3409                           
  3410                           ;HEF.c: 26: PMCON1bits.CFGS = 0;
  3411  0149  0023               	movlb	3	; select bank3
  3412  014A  1315               	bcf	21,6	;volatile
  3413                           
  3414                           ;HEF.c: 27: PMCON1bits.WREN = 1;
  3415  014B  1515               	bsf	21,2	;volatile
  3416                           
  3417                           ;HEF.c: 28: PMCON1bits.LWLO = 1;
  3418  014C  1695               	bsf	21,5	;volatile
  3419  014D                     l1237:	
  3420                           ;HEF.c: 30: while ( count > 0) {
  3421                           
  3422  014D  0875               	movf	HEF_ByteArrayWrite@count,w
  3423  014E  1903               	btfsc	3,2
  3424  014F  2970               	goto	l240
  3425                           
  3426                           ;HEF.c: 31: PMADR = blockAddr++;
  3427  0150  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3428  0151  0023               	movlb	3	; select bank3
  3429  0152  0092               	movwf	18	;volatile
  3430  0153  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3431  0154  0091               	movwf	17	;volatile
  3432  0155  3001               	movlw	1
  3433  0156  07FA               	addwf	HEF_ByteArrayWrite@blockAddr,f
  3434  0157  3000               	movlw	0
  3435  0158  3DFB               	addwfc	HEF_ByteArrayWrite@blockAddr+1,f
  3436                           
  3437                           ;HEF.c: 33: PMDATL = *byteArray++;
  3438  0159  0874               	movf	HEF_ByteArrayWrite@byteArray,w
  3439  015A  0086               	movwf	6
  3440  015B  0187               	clrf	7
  3441  015C  0801               	movf	1,w
  3442  015D  0093               	movwf	19	;volatile
  3443  015E  3001               	movlw	1
  3444  015F  00F6               	movwf	??_HEF_ByteArrayWrite
  3445  0160  0876               	movf	??_HEF_ByteArrayWrite,w
  3446  0161  07F4               	addwf	HEF_ByteArrayWrite@byteArray,f
  3447                           
  3448                           ;HEF.c: 34: PMDATH = 0;
  3449  0162  0194               	clrf	20	;volatile
  3450                           
  3451                           ;HEF.c: 35: if ( count == 1) {
  3452  0163  0375               	decf	HEF_ByteArrayWrite@count,w
  3453  0164  1903               	btfsc	3,2
  3454                           
  3455                           ;HEF.c: 36: PMCON1bits.LWLO = 0;
  3456  0165  1295               	bcf	21,5	;volatile
  3457                           
  3458                           ;HEF.c: 37: }
  3459                           ;HEF.c: 39: PMCON2 = 0x55;
  3460  0166  3055               	movlw	85
  3461  0167  0096               	movwf	22	;volsfr
  3462                           
  3463                           ;HEF.c: 40: PMCON2 = 0xAA;
  3464  0168  30AA               	movlw	170
  3465  0169  0096               	movwf	22	;volsfr
  3466                           
  3467                           ;HEF.c: 41: PMCON1bits.WR = 1;
  3468  016A  1495               	bsf	21,1	;volatile
  3469                           
  3470                           ;HEF.c: 42: __nop();
  3471  016B  0000               	nop
  3472                           
  3473                           ;HEF.c: 43: __nop();
  3474  016C  0000               	nop
  3475                           
  3476                           ;HEF.c: 44: count--;
  3477  016D  3001               	movlw	1
  3478  016E  02F5               	subwf	HEF_ByteArrayWrite@count,f
  3479  016F  294D               	goto	l1237
  3480  0170                     l240:	
  3481                           
  3482                           ;HEF.c: 45: }
  3483                           ;HEF.c: 47: PMCON1bits.WREN = 0;
  3484  0170  0023               	movlb	3	; select bank3
  3485  0171  1115               	bcf	21,2	;volatile
  3486                           
  3487                           ;HEF.c: 48: INTCONbits.GIE = GIEBitValue;
  3488  0172  0C78               	rrf	HEF_ByteArrayWrite@GIEBitValue,w
  3489  0173  1C03               	skipc
  3490  0174  138B               	bcf	11,7	;volatile
  3491  0175  1803               	skipnc
  3492  0176  178B               	bsf	11,7	;volatile
  3493                           
  3494                           ;HEF.c: 50: return 0;
  3495  0177  3000               	movlw	0
  3496  0178  0008               	return
  3497  0179                     __end_of_HEF_ByteArrayWrite:	
  3498                           
  3499                           	psect	text15
  3500  02CE                     __ptext15:	
  3501 ;; *************** function _FLASH_EraseBlock *****************
  3502 ;; Defined at:
  3503 ;;		line 141 in file "mcc_generated_files/memory.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;  startAddr       2    1[COMMON] unsigned int 
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      void 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2, status,0
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMMON   BANK0   BANK1
  3517 ;;      Params:         2       0       0
  3518 ;;      Locals:         1       0       0
  3519 ;;      Temps:          0       0       0
  3520 ;;      Totals:         3       0       0
  3521 ;;Total ram usage:        3 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    1
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_HEF_ByteArrayWrite
  3528 ;;		_FLASH_WriteBlock
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           
  3533                           ;psect for function _FLASH_EraseBlock
  3534  02CE                     _FLASH_EraseBlock:	
  3535                           
  3536                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
  3537                           
  3538                           ;incstack = 0
  3539                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  3540  02CE  3000               	movlw	0
  3541  02CF  1B8B               	btfsc	11,7	;volatile
  3542  02D0  3001               	movlw	1
  3543  02D1  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  3544                           
  3545                           ;memory.c: 145: INTCONbits.GIE = 0;
  3546  02D2  138B               	bcf	11,7	;volatile
  3547                           
  3548                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
  3549  02D3  0871               	movf	FLASH_EraseBlock@startAddr,w
  3550  02D4  0023               	movlb	3	; select bank3
  3551  02D5  0091               	movwf	17	;volatile
  3552                           
  3553                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
  3554  02D6  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  3555  02D7  0092               	movwf	18	;volatile
  3556                           
  3557                           ;memory.c: 152: PMCON1bits.CFGS = 0;
  3558  02D8  1315               	bcf	21,6	;volatile
  3559                           
  3560                           ;memory.c: 153: PMCON1bits.FREE = 1;
  3561  02D9  1615               	bsf	21,4	;volatile
  3562                           
  3563                           ;memory.c: 154: PMCON1bits.WREN = 1;
  3564  02DA  1515               	bsf	21,2	;volatile
  3565                           
  3566                           ;memory.c: 157: PMCON2 = 0x55;
  3567  02DB  3055               	movlw	85
  3568  02DC  0096               	movwf	22	;volsfr
  3569                           
  3570                           ;memory.c: 158: PMCON2 = 0xAA;
  3571  02DD  30AA               	movlw	170
  3572  02DE  0096               	movwf	22	;volsfr
  3573                           
  3574                           ;memory.c: 159: PMCON1bits.WR = 1;
  3575  02DF  1495               	bsf	21,1	;volatile
  3576                           
  3577                           ;memory.c: 160: __nop();
  3578  02E0  0000               	nop
  3579                           
  3580                           ;memory.c: 161: __nop();
  3581  02E1  0000               	nop
  3582                           
  3583                           ;memory.c: 163: PMCON1bits.WREN = 0;
  3584  02E2  0023               	movlb	3	; select bank3
  3585  02E3  1115               	bcf	21,2	;volatile
  3586                           
  3587                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
  3588  02E4  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  3589  02E5  1C03               	skipc
  3590  02E6  138B               	bcf	11,7	;volatile
  3591  02E7  1803               	skipnc
  3592  02E8  178B               	bsf	11,7	;volatile
  3593  02E9  0008               	return
  3594  02EA                     __end_of_FLASH_EraseBlock:	
  3595                           
  3596                           	psect	text16
  3597  036B                     __ptext16:	
  3598 ;; *************** function _getBoostState *****************
  3599 ;; Defined at:
  3600 ;;		line 49 in file "state_manager.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;		None
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  2    1[BANK0 ] int 
  3607 ;; Registers used:
  3608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMMON   BANK0   BANK1
  3614 ;;      Params:         0       2       0
  3615 ;;      Locals:         0       0       0
  3616 ;;      Temps:          0       0       0
  3617 ;;      Totals:         0       2       0
  3618 ;;Total ram usage:        2 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    5
  3621 ;; This function calls:
  3622 ;;		_initStateManager
  3623 ;; This function is called by:
  3624 ;;		_initBoost
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           
  3629                           ;psect for function _getBoostState
  3630  036B                     _getBoostState:	
  3631                           
  3632                           ;state_manager.c: 50: if (!isInitialized) {
  3633                           
  3634                           ;incstack = 0
  3635                           ; Regs used in _getBoostState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3636  036B  0020               	movlb	0	; select bank0
  3637  036C  0830               	movf	_isInitialized,w
  3638  036D  0431               	iorwf	_isInitialized+1,w
  3639  036E  1D03               	btfss	3,2
  3640  036F  2B71               	goto	l1377
  3641                           
  3642                           ;state_manager.c: 51: initStateManager();
  3643  0370  239B               	fcall	_initStateManager
  3644  0371                     l1377:	
  3645                           
  3646                           ;state_manager.c: 52: }
  3647                           ;state_manager.c: 53: return pedalState.boost;
  3648  0371  0020               	movlb	0	; select bank0
  3649  0372  0835               	movf	_pedalState+3,w
  3650  0373  00C4               	movwf	?_getBoostState+1
  3651  0374  0834               	movf	_pedalState+2,w
  3652  0375  00C3               	movwf	?_getBoostState
  3653  0376  0008               	return
  3654  0377                     __end_of_getBoostState:	
  3655                           
  3656                           	psect	text17
  3657  039B                     __ptext17:	
  3658 ;; *************** function _initStateManager *****************
  3659 ;; Defined at:
  3660 ;;		line 18 in file "state_manager.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;		None
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;		None
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      void 
  3667 ;; Registers used:
  3668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMMON   BANK0   BANK1
  3674 ;;      Params:         0       0       0
  3675 ;;      Locals:         0       0       0
  3676 ;;      Temps:          0       0       0
  3677 ;;      Totals:         0       0       0
  3678 ;;Total ram usage:        0 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    4
  3681 ;; This function calls:
  3682 ;;		_getCurrentState
  3683 ;; This function is called by:
  3684 ;;		_getBoostState
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           
  3689                           ;psect for function _initStateManager
  3690  039B                     _initStateManager:	
  3691                           
  3692                           ;state_manager.c: 19: isInitialized = 0;
  3693                           
  3694                           ;incstack = 0
  3695                           ; Regs used in _initStateManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3696  039B  0020               	movlb	0	; select bank0
  3697  039C  01B0               	clrf	_isInitialized
  3698  039D  01B1               	clrf	_isInitialized+1
  3699                           
  3700                           ;state_manager.c: 20: getCurrentState();
  3701  039E  22AC               	fcall	_getCurrentState
  3702  039F  0008               	return
  3703  03A0                     __end_of_initStateManager:	
  3704                           
  3705                           	psect	text18
  3706  02AC                     __ptext18:	
  3707 ;; *************** function _getCurrentState *****************
  3708 ;; Defined at:
  3709 ;;		line 23 in file "state_manager.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;		None
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  r               1    0[BANK0 ] unsigned char 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  4  254[None  ] struct .
  3716 ;; Registers used:
  3717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMMON   BANK0   BANK1
  3723 ;;      Params:         0       0       0
  3724 ;;      Locals:         0       1       0
  3725 ;;      Temps:          2       0       0
  3726 ;;      Totals:         2       1       0
  3727 ;;Total ram usage:        3 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; Hardware stack levels required when called:    3
  3730 ;; This function calls:
  3731 ;;		_HEF_ByteArrayRead
  3732 ;; This function is called by:
  3733 ;;		_initStateManager
  3734 ;;		_getFuzzState
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           
  3739                           ;psect for function _getCurrentState
  3740  02AC                     _getCurrentState:	
  3741                           
  3742                           ;state_manager.c: 24: if (!isInitialized) {
  3743                           
  3744                           ;incstack = 0
  3745                           ; Regs used in _getCurrentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3746  02AC  0020               	movlb	0	; select bank0
  3747  02AD  0830               	movf	_isInitialized,w
  3748  02AE  0431               	iorwf	_isInitialized+1,w
  3749  02AF  1D03               	btfss	3,2
  3750  02B0  0008               	return
  3751                           
  3752                           ;state_manager.c: 25: uint8_t r;
  3753                           ;state_manager.c: 28: r = HEF_ByteArrayRead((void *) &pedalState, 1, sizeof (pedalState)
      +                          );
  3754  02B1  01F4               	clrf	HEF_ByteArrayRead@block
  3755  02B2  0AF4               	incf	HEF_ByteArrayRead@block,f
  3756  02B3  3004               	movlw	4
  3757  02B4  00FB               	movwf	??_getCurrentState
  3758  02B5  087B               	movf	??_getCurrentState,w
  3759  02B6  00F5               	movwf	HEF_ByteArrayRead@count
  3760  02B7  3032               	movlw	(low (_pedalState| 0))& (0+255)
  3761  02B8  2221               	fcall	_HEF_ByteArrayRead
  3762  02B9  00FC               	movwf	??_getCurrentState+1
  3763  02BA  087C               	movf	??_getCurrentState+1,w
  3764  02BB  0020               	movlb	0	; select bank0
  3765  02BC  00C2               	movwf	getCurrentState@r
  3766                           
  3767                           ;state_manager.c: 30: if (pedalState.fuzz != 1) {
  3768  02BD  0332               	decf	_pedalState,w
  3769  02BE  0433               	iorwf	_pedalState+1,w
  3770  02BF  1903               	btfsc	3,2
  3771  02C0  2AC3               	goto	l1277
  3772                           
  3773                           ;state_manager.c: 31: pedalState.fuzz = 0;
  3774  02C1  01B2               	clrf	_pedalState
  3775  02C2  01B3               	clrf	_pedalState+1
  3776  02C3                     l1277:	
  3777                           
  3778                           ;state_manager.c: 32: }
  3779                           ;state_manager.c: 34: if (pedalState.boost != 1) {
  3780  02C3  0334               	decf	_pedalState+2,w
  3781  02C4  0435               	iorwf	_pedalState+3,w
  3782  02C5  1903               	btfsc	3,2
  3783  02C6  2AC9               	goto	l1281
  3784                           
  3785                           ;state_manager.c: 35: pedalState.boost = 0;
  3786  02C7  01B4               	clrf	_pedalState+2
  3787  02C8  01B5               	clrf	_pedalState+3
  3788  02C9                     l1281:	
  3789                           
  3790                           ;state_manager.c: 36: }
  3791                           ;state_manager.c: 37: isInitialized = 1;
  3792  02C9  3001               	movlw	1
  3793  02CA  00B0               	movwf	_isInitialized
  3794  02CB  3000               	movlw	0
  3795  02CC  00B1               	movwf	_isInitialized+1
  3796  02CD  0008               	return
  3797  02CE                     __end_of_getCurrentState:	
  3798                           ;state_manager.c: 38: }
  3799                           ;state_manager.c: 39: return pedalState;
  3800                           ;	Return value of _getCurrentState is never used
  3801                           
  3802                           
  3803                           	psect	text19
  3804  0221                     __ptext19:	
  3805 ;; *************** function _HEF_ByteArrayRead *****************
  3806 ;; Defined at:
  3807 ;;		line 53 in file "HEF.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  bArray          1    wreg     PTR unsigned char 
  3810 ;;		 -> pedalState(4), 
  3811 ;;  block           1    4[COMMON] unsigned char 
  3812 ;;  count           1    5[COMMON] unsigned char 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  bArray          1   10[COMMON] PTR unsigned char 
  3815 ;;		 -> pedalState(4), 
  3816 ;;  wordAdd         2    8[COMMON] unsigned int 
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      char 
  3819 ;; Registers used:
  3820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMMON   BANK0   BANK1
  3826 ;;      Params:         2       0       0
  3827 ;;      Locals:         3       0       0
  3828 ;;      Temps:          2       0       0
  3829 ;;      Totals:         7       0       0
  3830 ;;Total ram usage:        7 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; Hardware stack levels required when called:    2
  3833 ;; This function calls:
  3834 ;;		_FLASH_ReadWord
  3835 ;; This function is called by:
  3836 ;;		_getCurrentState
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           
  3841                           ;psect for function _HEF_ByteArrayRead
  3842  0221                     _HEF_ByteArrayRead:	
  3843                           
  3844                           ;incstack = 0
  3845                           ; Regs used in _HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3846                           ;HEF_ByteArrayRead@bArray stored from wreg
  3847  0221  00FA               	movwf	HEF_ByteArrayRead@bArray
  3848                           
  3849                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
  3850  0222  0874               	movf	HEF_ByteArrayRead@block,w
  3851  0223  00F6               	movwf	??_HEF_ByteArrayRead
  3852  0224  01F7               	clrf	??_HEF_ByteArrayRead+1
  3853  0225  3005               	movlw	5
  3854  0226                     u635:	
  3855  0226  35F6               	lslf	??_HEF_ByteArrayRead,f
  3856  0227  0DF7               	rlf	??_HEF_ByteArrayRead+1,f
  3857  0228  0B89               	decfsz	9,f
  3858  0229  2A26               	goto	u635
  3859  022A  0876               	movf	??_HEF_ByteArrayRead,w
  3860  022B  3E80               	addlw	128
  3861  022C  00F8               	movwf	HEF_ByteArrayRead@wordAdd
  3862  022D  303F               	movlw	63
  3863  022E  3D77               	addwfc	??_HEF_ByteArrayRead+1,w
  3864  022F  00F9               	movwf	HEF_ByteArrayRead@wordAdd+1
  3865                           
  3866                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
  3867  0230  3021               	movlw	33
  3868  0231  0275               	subwf	HEF_ByteArrayRead@count,w
  3869  0232  1803               	skipnc
  3870  0233  2A38               	goto	l1251
  3871  0234  3004               	movlw	4
  3872  0235  0274               	subwf	HEF_ByteArrayRead@block,w
  3873  0236  1C03               	skipc
  3874  0237  2A50               	goto	l1263
  3875  0238                     l1251:	
  3876                           
  3877                           ;HEF.c: 60: return -1;
  3878  0238  30FF               	movlw	255
  3879  0239  0008               	return
  3880  023A                     l1255:	
  3881                           ;HEF.c: 63: while ( count > 0)
  3882                           
  3883                           
  3884                           ;HEF.c: 64: {
  3885                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
  3886  023A  0879               	movf	HEF_ByteArrayRead@wordAdd+1,w
  3887  023B  00F2               	movwf	FLASH_ReadWord@flashAddr+1
  3888  023C  0878               	movf	HEF_ByteArrayRead@wordAdd,w
  3889  023D  00F1               	movwf	FLASH_ReadWord@flashAddr
  3890  023E  22EA               	fcall	_FLASH_ReadWord
  3891  023F  0871               	movf	?_FLASH_ReadWord,w
  3892  0240  00F6               	movwf	??_HEF_ByteArrayRead
  3893  0241  087A               	movf	HEF_ByteArrayRead@bArray,w
  3894  0242  0086               	movwf	6
  3895  0243  0187               	clrf	7
  3896  0244  0876               	movf	??_HEF_ByteArrayRead,w
  3897  0245  0081               	movwf	1
  3898  0246  3001               	movlw	1
  3899  0247  07F8               	addwf	HEF_ByteArrayRead@wordAdd,f
  3900  0248  3000               	movlw	0
  3901  0249  3DF9               	addwfc	HEF_ByteArrayRead@wordAdd+1,f
  3902  024A  3001               	movlw	1
  3903  024B  00F6               	movwf	??_HEF_ByteArrayRead
  3904  024C  0876               	movf	??_HEF_ByteArrayRead,w
  3905  024D  07FA               	addwf	HEF_ByteArrayRead@bArray,f
  3906                           
  3907                           ;HEF.c: 66: count--;
  3908  024E  3001               	movlw	1
  3909  024F  02F5               	subwf	HEF_ByteArrayRead@count,f
  3910  0250                     l1263:	
  3911  0250  0875               	movf	HEF_ByteArrayRead@count,w
  3912  0251  1D03               	btfss	3,2
  3913  0252  2A3A               	goto	l1255
  3914                           
  3915                           ;HEF.c: 67: }
  3916                           ;HEF.c: 70: return 0;
  3917  0253  3000               	movlw	0
  3918  0254  0008               	return
  3919  0255                     __end_of_HEF_ByteArrayRead:	
  3920                           
  3921                           	psect	text20
  3922  02EA                     __ptext20:	
  3923 ;; *************** function _FLASH_ReadWord *****************
  3924 ;; Defined at:
  3925 ;;		line 58 in file "mcc_generated_files/memory.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;  flashAddr       2    1[COMMON] unsigned int 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  2    1[COMMON] unsigned int 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1
  3939 ;;      Params:         2       0       0
  3940 ;;      Locals:         1       0       0
  3941 ;;      Temps:          0       0       0
  3942 ;;      Totals:         3       0       0
  3943 ;;Total ram usage:        3 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    1
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_HEF_ByteArrayRead
  3950 ;;		_FLASH_WriteWord
  3951 ;;		_HEF_ByteRead
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           
  3956                           ;psect for function _FLASH_ReadWord
  3957  02EA                     _FLASH_ReadWord:	
  3958                           
  3959                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  3960                           
  3961                           ;incstack = 0
  3962                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3963  02EA  3000               	movlw	0
  3964  02EB  1B8B               	btfsc	11,7	;volatile
  3965  02EC  3001               	movlw	1
  3966  02ED  00F3               	movwf	FLASH_ReadWord@GIEBitValue
  3967                           
  3968                           ;memory.c: 61: INTCONbits.GIE = 0;
  3969  02EE  138B               	bcf	11,7	;volatile
  3970                           
  3971                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  3972  02EF  0871               	movf	FLASH_ReadWord@flashAddr,w
  3973  02F0  0023               	movlb	3	; select bank3
  3974  02F1  0091               	movwf	17	;volatile
  3975                           
  3976                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  3977  02F2  0872               	movf	FLASH_ReadWord@flashAddr+1,w
  3978  02F3  0092               	movwf	18	;volatile
  3979                           
  3980                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  3981  02F4  1315               	bcf	21,6	;volatile
  3982                           
  3983                           ;memory.c: 66: PMCON1bits.RD = 1;
  3984  02F5  1415               	bsf	21,0	;volatile
  3985                           
  3986                           ;memory.c: 67: __nop();
  3987  02F6  0000               	nop
  3988                           
  3989                           ;memory.c: 68: __nop();
  3990  02F7  0000               	nop
  3991                           
  3992                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  3993  02F8  0C73               	rrf	FLASH_ReadWord@GIEBitValue,w
  3994  02F9  1C03               	skipc
  3995  02FA  138B               	bcf	11,7	;volatile
  3996  02FB  1803               	skipnc
  3997  02FC  178B               	bsf	11,7	;volatile
  3998                           
  3999                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
  4000  02FD  0023               	movlb	3	; select bank3
  4001  02FE  0814               	movf	20,w	;volatile
  4002  02FF  00F2               	movwf	?_FLASH_ReadWord+1
  4003  0300  0813               	movf	19,w	;volatile
  4004  0301  00F1               	movwf	?_FLASH_ReadWord
  4005  0302  0008               	return
  4006  0303                     __end_of_FLASH_ReadWord:	
  4007                           
  4008                           	psect	text21
  4009  0303                     __ptext21:	
  4010 ;; *************** function _InitApp *****************
  4011 ;; Defined at:
  4012 ;;		line 27 in file "user.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;		None
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;		None
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      void 
  4019 ;; Registers used:
  4020 ;;		wreg, status,2, status,0, pclath, cstack
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMMON   BANK0   BANK1
  4026 ;;      Params:         0       0       0
  4027 ;;      Locals:         0       0       0
  4028 ;;      Temps:          0       0       0
  4029 ;;      Totals:         0       0       0
  4030 ;;Total ram usage:        0 bytes
  4031 ;; Hardware stack levels used:    1
  4032 ;; Hardware stack levels required when called:    2
  4033 ;; This function calls:
  4034 ;;		_init_adc
  4035 ;; This function is called by:
  4036 ;;		_main
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           
  4041                           ;psect for function _InitApp
  4042  0303                     _InitApp:	
  4043                           
  4044                           ;user.c: 28: TRISAbits.TRISA0 = 0;
  4045                           
  4046                           ;incstack = 0
  4047                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  4048  0303  0021               	movlb	1	; select bank1
  4049  0304  100C               	bcf	12,0	;volatile
  4050                           
  4051                           ;user.c: 29: TRISAbits.TRISA1 = 0;
  4052  0305  108C               	bcf	12,1	;volatile
  4053                           
  4054                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  4055  0306  110C               	bcf	12,2	;volatile
  4056                           
  4057                           ;user.c: 32: TRISAbits.TRISA4 = 1;
  4058  0307  160C               	bsf	12,4	;volatile
  4059                           
  4060                           ;user.c: 33: TRISAbits.TRISA5 = 1;
  4061  0308  168C               	bsf	12,5	;volatile
  4062                           
  4063                           ;user.c: 34: ANSELAbits.ANSA4 = 0;
  4064  0309  0023               	movlb	3	; select bank3
  4065  030A  120C               	bcf	12,4	;volatile
  4066                           
  4067                           ;user.c: 36: TRISCbits.TRISC0 = 0;
  4068  030B  0021               	movlb	1	; select bank1
  4069  030C  100E               	bcf	14,0	;volatile
  4070                           
  4071                           ;user.c: 37: TRISCbits.TRISC1 = 0;
  4072  030D  108E               	bcf	14,1	;volatile
  4073                           
  4074                           ;user.c: 38: TRISCbits.TRISC2 = 0;
  4075  030E  110E               	bcf	14,2	;volatile
  4076                           
  4077                           ;user.c: 39: TRISCbits.TRISC3 = 0;
  4078  030F  118E               	bcf	14,3	;volatile
  4079                           
  4080                           ;user.c: 40: TRISCbits.TRISC4 = 0;
  4081  0310  120E               	bcf	14,4	;volatile
  4082                           
  4083                           ;user.c: 41: TRISCbits.TRISC5 = 0;
  4084  0311  128E               	bcf	14,5	;volatile
  4085                           
  4086                           ;user.c: 43: LATCbits.LATC5 = 0;
  4087  0312  0022               	movlb	2	; select bank2
  4088  0313  128E               	bcf	14,5	;volatile
  4089                           
  4090                           ;user.c: 45: LATAbits.LATA2 = 0;
  4091  0314  110C               	bcf	12,2	;volatile
  4092                           
  4093                           ;user.c: 46: LATCbits.LATC3 = 0;
  4094  0315  118E               	bcf	14,3	;volatile
  4095                           
  4096                           ;user.c: 48: init_adc();
  4097  0316  2377               	fcall	_init_adc
  4098  0317  0008               	return
  4099  0318                     __end_of_InitApp:	
  4100                           
  4101                           	psect	text22
  4102  0377                     __ptext22:	
  4103 ;; *************** function _init_adc *****************
  4104 ;; Defined at:
  4105 ;;		line 60 in file "user.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      void 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2, status,0
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1
  4119 ;;      Params:         0       0       0
  4120 ;;      Locals:         0       0       0
  4121 ;;      Temps:          0       0       0
  4122 ;;      Totals:         0       0       0
  4123 ;;Total ram usage:        0 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    1
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_InitApp
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           
  4134                           ;psect for function _init_adc
  4135  0377                     _init_adc:	
  4136                           
  4137                           ;user.c: 61: ADCON1bits.ADFM = 0b1;
  4138                           
  4139                           ;incstack = 0
  4140                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  4141  0377  0021               	movlb	1	; select bank1
  4142  0378  179E               	bsf	30,7	;volatile
  4143                           
  4144                           ;user.c: 62: ADCON1bits.ADCS = 0b110;
  4145  0379  081E               	movf	30,w	;volatile
  4146  037A  398F               	andlw	-113
  4147  037B  3860               	iorlw	96
  4148  037C  009E               	movwf	30	;volatile
  4149                           
  4150                           ;user.c: 63: ADCON1bits.ADPREF = 0b00;
  4151  037D  30FC               	movlw	-4
  4152  037E  059E               	andwf	30,f	;volatile
  4153                           
  4154                           ;user.c: 64: ADCON0bits.ADON = 0b1;
  4155  037F  141D               	bsf	29,0	;volatile
  4156  0380  0008               	return
  4157  0381                     __end_of_init_adc:	
  4158                           
  4159                           	psect	text23
  4160  03A0                     __ptext23:	
  4161 ;; *************** function _ConfigureOscillator *****************
  4162 ;; Defined at:
  4163 ;;		line 17 in file "system.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;		None
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		wreg, status,2, status,0
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMMON   BANK0   BANK1
  4177 ;;      Params:         0       0       0
  4178 ;;      Locals:         0       0       0
  4179 ;;      Temps:          0       0       0
  4180 ;;      Totals:         0       0       0
  4181 ;;Total ram usage:        0 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    1
  4184 ;; This function calls:
  4185 ;;		Nothing
  4186 ;; This function is called by:
  4187 ;;		_main
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           
  4192                           ;psect for function _ConfigureOscillator
  4193  03A0                     _ConfigureOscillator:	
  4194                           
  4195                           ;system.c: 19: OSCCONbits.IRCF = 0b1111;
  4196                           
  4197                           ;incstack = 0
  4198                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  4199  03A0  3078               	movlw	120
  4200  03A1  0021               	movlb	1	; select bank1
  4201  03A2  0499               	iorwf	25,f	;volatile
  4202                           
  4203                           ;system.c: 20: OSCSTAT = 0x00;
  4204  03A3  019A               	clrf	26	;volatile
  4205  03A4  0008               	return
  4206  03A5                     __end_of_ConfigureOscillator:	
  4207                           
  4208                           	psect	intentry
  4209  0004                     __pintentry:	
  4210 ;; *************** function _isr *****************
  4211 ;; Defined at:
  4212 ;;		line 23 in file "interrupts.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;		None
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;		None
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  1    wreg      void 
  4219 ;; Registers used:
  4220 ;;		None
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMMON   BANK0   BANK1
  4226 ;;      Params:         0       0       0
  4227 ;;      Locals:         0       0       0
  4228 ;;      Temps:          1       0       0
  4229 ;;      Totals:         1       0       0
  4230 ;;Total ram usage:        1 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; This function calls:
  4233 ;;		Nothing
  4234 ;; This function is called by:
  4235 ;;		Interrupt level 1
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239  0004                     _isr:	
  4240                           
  4241                           ;incstack = 0
  4242                           ; Regs used in _isr: []
  4243  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4244  0005  3180               	pagesel	$
  4245  0006  0020               	movlb	0	; select bank0
  4246  0007  087F               	movf	127,w
  4247  0008  00F0               	movwf	??_isr
  4248  0009  0870               	movf	??_isr,w
  4249  000A  00FF               	movwf	127
  4250  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4251  000C  0009               	retfie
  4252  000D                     __end_of_isr:	
  4253  007E                     btemp	set	126	;btemp
  4254  007E                     int$flags	set	126
  4255  007E                     wtemp	set	126
  4256  007E                     wtemp0	set	126
  4257  0080                     wtemp1	set	128
  4258  0082                     wtemp2	set	130
  4259  0084                     wtemp3	set	132
  4260  0086                     wtemp4	set	134
  4261  0088                     wtemp5	set	136
  4262  007F                     wtemp6	set	127
  4263  007E                     ttemp	set	126
  4264  007E                     ttemp0	set	126
  4265  0081                     ttemp1	set	129
  4266  0084                     ttemp2	set	132
  4267  0087                     ttemp3	set	135
  4268  007F                     ttemp4	set	127
  4269  007E                     ltemp	set	126
  4270  007E                     ltemp0	set	126
  4271  0082                     ltemp1	set	130
  4272  0086                     ltemp2	set	134
  4273  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     10      44
    BANK1            32      0       0

Pointer List with Targets:

    HEF_ByteArrayRead@bArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 

    HEF_ByteArrayWrite@byteArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 


Critical Paths under _main in COMMON

    _updateFuzzState->_saveState
    _getFuzzState->_getCurrentState
    _wait_ms->___lmul
    _updateBoostState->_saveState
    _saveState->_HEF_ByteArrayWrite
    _HEF_ByteArrayWrite->_FLASH_EraseBlock
    _initStateManager->_getCurrentState
    _getCurrentState->_HEF_ByteArrayRead
    _HEF_ByteArrayRead->_FLASH_ReadWord

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateFuzz
    _updateFuzz->_setFuzzState
    _updateBoost->_setBoostState
    _initFuzz->_setFuzzState
    _setFuzzState->_updateFuzzState
    _updateFuzzState->_saveState
    _setFeedbackState->_wait_ms
    _getFuzzState->_getCurrentState
    _initBoost->_setBoostState
    _setBoostState->_updateBoostState
    _updateBoostState->_saveState
    _initStateManager->_getCurrentState

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9289
                _ConfigureOscillator
                            _InitApp
                          _initBoost
                           _initFuzz
                        _updateBoost
                         _updateFuzz
 ---------------------------------------------------------------------------------
 (1) _updateFuzz                                           3     3      0    2515
                                              7 BANK0      3     3      0
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (1) _updateBoost                                          1     1      0    1564
                                              7 BANK0      1     1      0
                      _setBoostState
 ---------------------------------------------------------------------------------
 (1) _initFuzz                                             2     2      0    3069
                                              7 BANK0      2     2      0
                       _getFuzzState
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (2) _setFuzzState                                         2     0      2    1564
                                              5 BANK0      2     0      2
                    _updateFuzzState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _updateFuzzState                                      2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     2     0      2     928
                                              2 BANK0      2     0      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _getFuzzState                                         2     0      2     554
                                              1 BANK0      2     0      2
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (1) _initBoost                                            2     2      0    2141
                                              7 BANK0      2     2      0
                      _getBoostState
                      _setBoostState
 ---------------------------------------------------------------------------------
 (2) _setBoostState                                        2     0      2    1564
                                              5 BANK0      2     0      2
                   _updateBoostState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2     626
                                              0 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateBoostState                                     2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (4) _saveState                                            4     4      0     527
                                             12 COMMON     1     1      0
                                              0 BANK0      3     3      0
                 _HEF_ByteArrayWrite
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayWrite                                   9     7      2     526
                                              4 COMMON     8     6      2
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     195
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getBoostState                                        2     0      2     554
                                              1 BANK0      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (3) _initStateManager                                     0     0      0     554
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (3) _getCurrentState                                      3     3      0     554
                                             11 COMMON     2     2      0
                                              0 BANK0      1     1      0
                  _HEF_ByteArrayRead
 ---------------------------------------------------------------------------------
 (4) _HEF_ByteArrayRead                                    7     5      2     553
                                              4 COMMON     7     5      2
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (5) _FLASH_ReadWord                                       3     1      2     259
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
   _initBoost
     _getBoostState
       _initStateManager
         _getCurrentState
           _HEF_ByteArrayRead
             _FLASH_ReadWord
     _setBoostState
       _updateBoostState
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _initFuzz
     _getFuzzState
       _getCurrentState
         _HEF_ByteArrayRead
           _FLASH_ReadWord
     _setFeedbackState
       _wait_ms
         ___lmul
     _setFuzzState
       _updateFuzzState
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateBoost
     _setBoostState
       _updateBoostState
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateFuzz
     _setFeedbackState
       _wait_ms
         ___lmul
     _setFuzzState
       _updateFuzzState
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      39       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      A      2C       6       55.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      39       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Nov 03 13:39:26 2016

                  __CFG_CP$OFF 0000              initFuzz@initState 0049                             l71 029D  
                  __CFG_LVP$ON 0000                            l240 0170                            l157 0059  
                          u605 0139                            u810 020F                            u635 0226  
                          u715 0268                            u725 026F                            u805 01F4  
                          u850 01D5                            u780 019B                            u845 01BA  
                          u775 0180                            u935 0063                            u965 0097  
                          u885 002D                            u895 003D                _getCurrentState 02AC  
                          _isr 0004                   __CFG_BORV$LO 0000                            wreg 0009  
                _boost_pressed 0024                           l1203 0135                           l1251 0238  
                         l1237 014D                           l1317 034D                           l1309 0340  
                         l1255 023A                           l1263 0250                           l1343 019D  
                         l1503 011A                           l1415 0034                           l1281 02C9  
                         l1419 0044                           l1277 02C3                           l1293 0267  
                         l1365 0211                           l1199 0133                           l1447 008A  
                         l1439 007B                           l1377 0371                           l1289 025D  
                         l1393 01D7                           l1449 008E                           l1491 00FB  
                         l1483 00E9                           l1459 00AA                           l1581 0385  
                         l1495 0102                           l1479 00D9                           l1497 0106  
                         ?_isr 0070                           u1005 00D2                           u1015 00E2  
                         u1055 010F                   __CFG_WRT$OFF 0000     __end_of_HEF_ByteArrayWrite 0179  
                         _main 0381                           fsr0h 0005                           fsr1h 0007  
                         fsr0l 0004                           indf0 0000                           indf1 0001  
                         fsr1l 0006                           btemp 007E                           ltemp 007E  
     __end_of_setFeedbackState 0221                           start 000D                           ttemp 007E  
                         wtemp 007E          __end_of_setBoostState 01ED                  __CFG_MCLRE$ON 0000  
              __end_of_InitApp 0318                          ??_isr 0070                          ?_main 0070  
                __CFG_WDTE$OFF 0000           updateFuzzState@state 0045                          _PMADR 0191  
      __end_of_updateFuzzState 0346            _ConfigureOscillator 03A0            ___lmul@multiplicand 0075  
     __end_of_updateBoostState 0353          updateBoostState@state 0045                 __CFG_BOREN$OFF 0000  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080                __end_of_wait_ms 02AC                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003         HEF_ByteArrayRead@block 0074  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F         HEF_ByteArrayRead@count 0075           ?_ConfigureOscillator 0070  
              __initialization 000E                   __end_of_main 0388        __end_of_getCurrentState 02CE  
               __CFG_LPBOR$OFF 0000               _initStateManager 039B                         ??_main 007D  
      __size_of_FLASH_ReadWord 0019             updateFuzz@fb_state 004A           __end_of_getFuzzState 038F  
               _feedback_state 003A              _HEF_ByteArrayRead 0221                         _ADRESH 009C  
                       _ADRESL 009B             ?_HEF_ByteArrayRead 0074                         _PMADRH 0192  
                       _PMADRL 0191                         _PMDATH 0194                         _PMDATL 0193  
                       _PMCON2 0196      __size_of_FLASH_EraseBlock 001C                      ??_InitApp 0071  
        ??_ConfigureOscillator 0071            ??_HEF_ByteArrayRead 0076                 __CFG_PWRTE$OFF 0000  
                       ___lmul 0255                 __CFG_STVREN$ON 0000               __end_of_initFuzz 0329  
             __end_of_init_adc 0381        FLASH_ReadWord@flashAddr 0071      __end_of_HEF_ByteArrayRead 0255  
             ?_updateFuzzState 0045        HEF_ByteArrayRead@bArray 007A                      ??_wait_ms 007D  
        __end_of_getBoostState 0377        __end_of__initialization 001E                   ?_updateBoost 0070  
             getCurrentState@r 0042                 __pcstackCOMMON 0070                   __pidataBANK0 0353  
             ?_getCurrentState 0070                     __pbssBANK0 0020             __size_of_initBoost 000C  
            ?_setFeedbackState 0044               _long_press_limit 0040                     __pmaintext 0381  
           ??_setFeedbackState 007D                  ?_setFuzzState 0047                        ?___lmul 0071  
                   __pintentry 0004             _HEF_ByteArrayWrite 0126             __size_of_saveState 0010  
               ___lmul@product 0079          __size_of_getFuzzState 0007                 _FLASH_ReadWord 02EA  
          ?_HEF_ByteArrayWrite 0074     __size_of_HEF_ByteArrayRead 0034                        _OSCSTAT 009A  
            ?_updateBoostState 0045               _FLASH_EraseBlock 02CE       __end_of_initStateManager 03A0  
                    ?_initFuzz 0070                      ?_init_adc 0070             ??_updateBoostState 007D  
                      _InitApp 0303           ??_HEF_ByteArrayWrite 0076                   _getFuzzState 0388  
               ??_setFuzzState 007D                     _pedalState 0032                __size_of___lmul 002F  
       __end_of_FLASH_ReadWord 0303                        __ptext1 0021                        __ptext2 00C6  
                      __ptext3 0318                        __ptext4 0179                        __ptext5 0339  
                      __ptext6 01ED                        __ptext7 0388                        __ptext8 035F  
                      __ptext9 01B3              __end_of_initBoost 036B                      _T2CONbits 001C  
                 __size_of_isr 0009                        _fuzz_up 003E         __size_of_setBoostState 003A  
                      _wait_ms 0284                        clrloop0 0390            setFuzzState@f_state 0047  
         end_of_initialization 001E              __end_of_saveState 0339                     ??_initFuzz 007D  
                      init_ram 0395                     ??_init_adc 0071                        initloop 0396  
                   _fuzz_state 003C           __size_of_updateBoost 0060                    wait_ms@time 0042  
    FLASH_ReadWord@GIEBitValue 0073                ?_FLASH_ReadWord 0071                      _PORTAbits 000C  
             __CFG_FOSC$INTOSC 0000                      _TRISAbits 008C                      _TRISCbits 008E  
                   _updateFuzz 0021       HEF_ByteArrayRead@wordAdd 0078        setFeedbackState@f_state 0044  
  __end_of_ConfigureOscillator 03A5                   _boost_toggle 0026        HEF_ByteArrayWrite@block 0079  
      HEF_ByteArrayWrite@count 0075                  _setBoostState 01B3                 __end_of___lmul 0284  
          start_initialization 000E                    __end_of_isr 000D           __end_of_setFuzzState 01B3  
     __size_of_updateFuzzState 000D                 ?_setBoostState 0047                       ??___lmul 0079  
                  __pdataBANK0 0036    FLASH_EraseBlock@GIEBitValue 0073       __end_of_FLASH_EraseBlock 02EA  
       __size_of_getBoostState 000C           setBoostState@f_state 0047      __size_of_setFeedbackState 0034  
                    ___latbits 0000                  __pcstackBANK0 0042       __size_of_getCurrentState 0022  
                  ?_updateFuzz 0070              ?_initStateManager 0070                       ?_InitApp 0070  
            __size_of_initFuzz 0011              __size_of_init_adc 000A             ??_initStateManager 007D  
           initBoost@initState 0049      __size_of_updateBoostState 000D    HEF_ByteArrayWrite@blockAddr 007A  
                   saveState@r 007C                      _initBoost 035F                       ?_wait_ms 0042  
  HEF_ByteArrayWrite@byteArray 0074                  _getBoostState 036B                       _LATAbits 010C  
              ??_setBoostState 007D                       _LATCbits 010E                      clear_ram0 038F  
                    _saveState 0329    __size_of_HEF_ByteArrayWrite 0053                      _fuzz_down 0028  
                     _PIR1bits 0011      FLASH_EraseBlock@startAddr 0071              ??_updateFuzzState 007D  
             ??_FLASH_ReadWord 0073            __size_of_updateFuzz 00A5                     _ADCON0bits 009D  
                   _ADCON1bits 009E          __size_of_setFuzzState 003A                    _boost_state 0036  
                   ?_initBoost 0070              ___lmul@multiplier 0071                 ?_getBoostState 0043  
            ??_getCurrentState 007B                     ?_saveState 0070                  ??_updateBoost 0049  
             __size_of_InitApp 0015                   _setFuzzState 0179                     _ANSELAbits 018C  
             _setFeedbackState 01ED                       __ptext10 0284                       __ptext11 0255  
                     __ptext20 02EA                       __ptext12 0346                       __ptext21 0303  
                     __ptext13 0329                       __ptext22 0377                       __ptext14 0126  
                     __ptext23 03A0                       __ptext15 02CE                       __ptext16 036B  
                     __ptext17 039B                       __ptext18 02AC                       __ptext19 0221  
             __size_of_wait_ms 0028                       _boost_up 0038                   _fuzz_pressed 002A  
                     _initFuzz 0318                       _init_adc 0377                  __size_of_main 0007  
 __size_of_ConfigureOscillator 0005                       int$flags 007E               _updateBoostState 0346  
              _fuzz_turning_on 002E            __end_of_updateBoost 0126              ?_FLASH_EraseBlock 0071  
           ??_FLASH_EraseBlock 0073                     _INTCONbits 000B                   ??_updateFuzz 0049  
                  ??_initBoost 007D                ??_getBoostState 007D                       intlevel1 0000  
                   _PMCON1bits 0195  HEF_ByteArrayWrite@GIEBitValue 0078              __CFG_CLKOUTEN$OFF 0000  
                  ??_saveState 0042                    _fuzz_toggle 002C                     _OSCCONbits 0099  
                ?_getFuzzState 0043             __end_of_updateFuzz 00C6                  _isInitialized 0030  
                 wait_ms@timel 0020      __size_of_initStateManager 0005                _updateFuzzState 0339  
               ??_getFuzzState 007D                    _updateBoost 00C6  
