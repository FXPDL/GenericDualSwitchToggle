

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Dec 26 23:43:06 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     	;# 
    38  0001                     	;# 
    39  0002                     	;# 
    40  0003                     	;# 
    41  0004                     	;# 
    42  0005                     	;# 
    43  0006                     	;# 
    44  0007                     	;# 
    45  0008                     	;# 
    46  0009                     	;# 
    47  000A                     	;# 
    48  000B                     	;# 
    49  000C                     	;# 
    50  000E                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0015                     	;# 
    55  0016                     	;# 
    56  0016                     	;# 
    57  0017                     	;# 
    58  0018                     	;# 
    59  0019                     	;# 
    60  001A                     	;# 
    61  001B                     	;# 
    62  001C                     	;# 
    63  008C                     	;# 
    64  008E                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0099                     	;# 
    72  009A                     	;# 
    73  009B                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009E                     	;# 
    78  009F                     	;# 
    79  010C                     	;# 
    80  010E                     	;# 
    81  0111                     	;# 
    82  0112                     	;# 
    83  0113                     	;# 
    84  0114                     	;# 
    85  0115                     	;# 
    86  0116                     	;# 
    87  0117                     	;# 
    88  0118                     	;# 
    89  0119                     	;# 
    90  011D                     	;# 
    91  018C                     	;# 
    92  018E                     	;# 
    93  0191                     	;# 
    94  0191                     	;# 
    95  0192                     	;# 
    96  0193                     	;# 
    97  0193                     	;# 
    98  0194                     	;# 
    99  0195                     	;# 
   100  0196                     	;# 
   101  0197                     	;# 
   102  020C                     	;# 
   103  0211                     	;# 
   104  0211                     	;# 
   105  0212                     	;# 
   106  0212                     	;# 
   107  0213                     	;# 
   108  0213                     	;# 
   109  0214                     	;# 
   110  0214                     	;# 
   111  0215                     	;# 
   112  0215                     	;# 
   113  0215                     	;# 
   114  0216                     	;# 
   115  0216                     	;# 
   116  0217                     	;# 
   117  0217                     	;# 
   118  0391                     	;# 
   119  0392                     	;# 
   120  0393                     	;# 
   121  0498                     	;# 
   122  0498                     	;# 
   123  0499                     	;# 
   124  049A                     	;# 
   125  049B                     	;# 
   126  049B                     	;# 
   127  049C                     	;# 
   128  049D                     	;# 
   129  049E                     	;# 
   130  049F                     	;# 
   131  0611                     	;# 
   132  0612                     	;# 
   133  0613                     	;# 
   134  0613                     	;# 
   135  0614                     	;# 
   136  0615                     	;# 
   137  0616                     	;# 
   138  0616                     	;# 
   139  0617                     	;# 
   140  0618                     	;# 
   141  0619                     	;# 
   142  0619                     	;# 
   143  061A                     	;# 
   144  061B                     	;# 
   145  061C                     	;# 
   146  061C                     	;# 
   147  0691                     	;# 
   148  0692                     	;# 
   149  0693                     	;# 
   150  0694                     	;# 
   151  0695                     	;# 
   152  0F0F                     	;# 
   153  0F10                     	;# 
   154  0F11                     	;# 
   155  0F12                     	;# 
   156  0F13                     	;# 
   157  0F14                     	;# 
   158  0F15                     	;# 
   159  0F16                     	;# 
   160  0F17                     	;# 
   161  0F18                     	;# 
   162  0F19                     	;# 
   163  0F1A                     	;# 
   164  0F1B                     	;# 
   165  0F1C                     	;# 
   166  0F1D                     	;# 
   167  0F1E                     	;# 
   168  0F1F                     	;# 
   169  0FE3                     	;# 
   170  0FE4                     	;# 
   171  0FE5                     	;# 
   172  0FE6                     	;# 
   173  0FE7                     	;# 
   174  0FE8                     	;# 
   175  0FE9                     	;# 
   176  0FEA                     	;# 
   177  0FEB                     	;# 
   178  0FED                     	;# 
   179  0FEE                     	;# 
   180  0FEF                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000E                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  008C                     	;# 
   208  008E                     	;# 
   209  0091                     	;# 
   210  0092                     	;# 
   211  0093                     	;# 
   212  0095                     	;# 
   213  0096                     	;# 
   214  0097                     	;# 
   215  0099                     	;# 
   216  009A                     	;# 
   217  009B                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  010C                     	;# 
   224  010E                     	;# 
   225  0111                     	;# 
   226  0112                     	;# 
   227  0113                     	;# 
   228  0114                     	;# 
   229  0115                     	;# 
   230  0116                     	;# 
   231  0117                     	;# 
   232  0118                     	;# 
   233  0119                     	;# 
   234  011D                     	;# 
   235  018C                     	;# 
   236  018E                     	;# 
   237  0191                     	;# 
   238  0191                     	;# 
   239  0192                     	;# 
   240  0193                     	;# 
   241  0193                     	;# 
   242  0194                     	;# 
   243  0195                     	;# 
   244  0196                     	;# 
   245  0197                     	;# 
   246  020C                     	;# 
   247  0211                     	;# 
   248  0211                     	;# 
   249  0212                     	;# 
   250  0212                     	;# 
   251  0213                     	;# 
   252  0213                     	;# 
   253  0214                     	;# 
   254  0214                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  0391                     	;# 
   263  0392                     	;# 
   264  0393                     	;# 
   265  0498                     	;# 
   266  0498                     	;# 
   267  0499                     	;# 
   268  049A                     	;# 
   269  049B                     	;# 
   270  049B                     	;# 
   271  049C                     	;# 
   272  049D                     	;# 
   273  049E                     	;# 
   274  049F                     	;# 
   275  0611                     	;# 
   276  0612                     	;# 
   277  0613                     	;# 
   278  0613                     	;# 
   279  0614                     	;# 
   280  0615                     	;# 
   281  0616                     	;# 
   282  0616                     	;# 
   283  0617                     	;# 
   284  0618                     	;# 
   285  0619                     	;# 
   286  0619                     	;# 
   287  061A                     	;# 
   288  061B                     	;# 
   289  061C                     	;# 
   290  061C                     	;# 
   291  0691                     	;# 
   292  0692                     	;# 
   293  0693                     	;# 
   294  0694                     	;# 
   295  0695                     	;# 
   296  0F0F                     	;# 
   297  0F10                     	;# 
   298  0F11                     	;# 
   299  0F12                     	;# 
   300  0F13                     	;# 
   301  0F14                     	;# 
   302  0F15                     	;# 
   303  0F16                     	;# 
   304  0F17                     	;# 
   305  0F18                     	;# 
   306  0F19                     	;# 
   307  0F1A                     	;# 
   308  0F1B                     	;# 
   309  0F1C                     	;# 
   310  0F1D                     	;# 
   311  0F1E                     	;# 
   312  0F1F                     	;# 
   313  0FE3                     	;# 
   314  0FE4                     	;# 
   315  0FE5                     	;# 
   316  0FE6                     	;# 
   317  0FE7                     	;# 
   318  0FE8                     	;# 
   319  0FE9                     	;# 
   320  0FEA                     	;# 
   321  0FEB                     	;# 
   322  0FED                     	;# 
   323  0FEE                     	;# 
   324  0FEF                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  0007                     	;# 
   333  0008                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000E                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0013                     	;# 
   342  0015                     	;# 
   343  0016                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001C                     	;# 
   351  008C                     	;# 
   352  008E                     	;# 
   353  0091                     	;# 
   354  0092                     	;# 
   355  0093                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  010C                     	;# 
   368  010E                     	;# 
   369  0111                     	;# 
   370  0112                     	;# 
   371  0113                     	;# 
   372  0114                     	;# 
   373  0115                     	;# 
   374  0116                     	;# 
   375  0117                     	;# 
   376  0118                     	;# 
   377  0119                     	;# 
   378  011D                     	;# 
   379  018C                     	;# 
   380  018E                     	;# 
   381  0191                     	;# 
   382  0191                     	;# 
   383  0192                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0197                     	;# 
   390  020C                     	;# 
   391  0211                     	;# 
   392  0211                     	;# 
   393  0212                     	;# 
   394  0212                     	;# 
   395  0213                     	;# 
   396  0213                     	;# 
   397  0214                     	;# 
   398  0214                     	;# 
   399  0215                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0216                     	;# 
   403  0216                     	;# 
   404  0217                     	;# 
   405  0217                     	;# 
   406  0391                     	;# 
   407  0392                     	;# 
   408  0393                     	;# 
   409  0498                     	;# 
   410  0498                     	;# 
   411  0499                     	;# 
   412  049A                     	;# 
   413  049B                     	;# 
   414  049B                     	;# 
   415  049C                     	;# 
   416  049D                     	;# 
   417  049E                     	;# 
   418  049F                     	;# 
   419  0611                     	;# 
   420  0612                     	;# 
   421  0613                     	;# 
   422  0613                     	;# 
   423  0614                     	;# 
   424  0615                     	;# 
   425  0616                     	;# 
   426  0616                     	;# 
   427  0617                     	;# 
   428  0618                     	;# 
   429  0619                     	;# 
   430  0619                     	;# 
   431  061A                     	;# 
   432  061B                     	;# 
   433  061C                     	;# 
   434  061C                     	;# 
   435  0691                     	;# 
   436  0692                     	;# 
   437  0693                     	;# 
   438  0694                     	;# 
   439  0695                     	;# 
   440  0F0F                     	;# 
   441  0F10                     	;# 
   442  0F11                     	;# 
   443  0F12                     	;# 
   444  0F13                     	;# 
   445  0F14                     	;# 
   446  0F15                     	;# 
   447  0F16                     	;# 
   448  0F17                     	;# 
   449  0F18                     	;# 
   450  0F19                     	;# 
   451  0F1A                     	;# 
   452  0F1B                     	;# 
   453  0F1C                     	;# 
   454  0F1D                     	;# 
   455  0F1E                     	;# 
   456  0F1F                     	;# 
   457  0FE3                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000E                     	;# 
   483  0011                     	;# 
   484  0012                     	;# 
   485  0013                     	;# 
   486  0015                     	;# 
   487  0016                     	;# 
   488  0016                     	;# 
   489  0017                     	;# 
   490  0018                     	;# 
   491  0019                     	;# 
   492  001A                     	;# 
   493  001B                     	;# 
   494  001C                     	;# 
   495  008C                     	;# 
   496  008E                     	;# 
   497  0091                     	;# 
   498  0092                     	;# 
   499  0093                     	;# 
   500  0095                     	;# 
   501  0096                     	;# 
   502  0097                     	;# 
   503  0099                     	;# 
   504  009A                     	;# 
   505  009B                     	;# 
   506  009B                     	;# 
   507  009C                     	;# 
   508  009D                     	;# 
   509  009E                     	;# 
   510  009F                     	;# 
   511  010C                     	;# 
   512  010E                     	;# 
   513  0111                     	;# 
   514  0112                     	;# 
   515  0113                     	;# 
   516  0114                     	;# 
   517  0115                     	;# 
   518  0116                     	;# 
   519  0117                     	;# 
   520  0118                     	;# 
   521  0119                     	;# 
   522  011D                     	;# 
   523  018C                     	;# 
   524  018E                     	;# 
   525  0191                     	;# 
   526  0191                     	;# 
   527  0192                     	;# 
   528  0193                     	;# 
   529  0193                     	;# 
   530  0194                     	;# 
   531  0195                     	;# 
   532  0196                     	;# 
   533  0197                     	;# 
   534  020C                     	;# 
   535  0211                     	;# 
   536  0211                     	;# 
   537  0212                     	;# 
   538  0212                     	;# 
   539  0213                     	;# 
   540  0213                     	;# 
   541  0214                     	;# 
   542  0214                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0216                     	;# 
   547  0216                     	;# 
   548  0217                     	;# 
   549  0217                     	;# 
   550  0391                     	;# 
   551  0392                     	;# 
   552  0393                     	;# 
   553  0498                     	;# 
   554  0498                     	;# 
   555  0499                     	;# 
   556  049A                     	;# 
   557  049B                     	;# 
   558  049B                     	;# 
   559  049C                     	;# 
   560  049D                     	;# 
   561  049E                     	;# 
   562  049F                     	;# 
   563  0611                     	;# 
   564  0612                     	;# 
   565  0613                     	;# 
   566  0613                     	;# 
   567  0614                     	;# 
   568  0615                     	;# 
   569  0616                     	;# 
   570  0616                     	;# 
   571  0617                     	;# 
   572  0618                     	;# 
   573  0619                     	;# 
   574  0619                     	;# 
   575  061A                     	;# 
   576  061B                     	;# 
   577  061C                     	;# 
   578  061C                     	;# 
   579  0691                     	;# 
   580  0692                     	;# 
   581  0693                     	;# 
   582  0694                     	;# 
   583  0695                     	;# 
   584  0F0F                     	;# 
   585  0F10                     	;# 
   586  0F11                     	;# 
   587  0F12                     	;# 
   588  0F13                     	;# 
   589  0F14                     	;# 
   590  0F15                     	;# 
   591  0F16                     	;# 
   592  0F17                     	;# 
   593  0F18                     	;# 
   594  0F19                     	;# 
   595  0F1A                     	;# 
   596  0F1B                     	;# 
   597  0F1C                     	;# 
   598  0F1D                     	;# 
   599  0F1E                     	;# 
   600  0F1F                     	;# 
   601  0FE3                     	;# 
   602  0FE4                     	;# 
   603  0FE5                     	;# 
   604  0FE6                     	;# 
   605  0FE7                     	;# 
   606  0FE8                     	;# 
   607  0FE9                     	;# 
   608  0FEA                     	;# 
   609  0FEB                     	;# 
   610  0FED                     	;# 
   611  0FEE                     	;# 
   612  0FEF                     	;# 
   613  0000                     	;# 
   614  0001                     	;# 
   615  0002                     	;# 
   616  0003                     	;# 
   617  0004                     	;# 
   618  0005                     	;# 
   619  0006                     	;# 
   620  0007                     	;# 
   621  0008                     	;# 
   622  0009                     	;# 
   623  000A                     	;# 
   624  000B                     	;# 
   625  000C                     	;# 
   626  000E                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0013                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008E                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0093                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  009F                     	;# 
   655  010C                     	;# 
   656  010E                     	;# 
   657  0111                     	;# 
   658  0112                     	;# 
   659  0113                     	;# 
   660  0114                     	;# 
   661  0115                     	;# 
   662  0116                     	;# 
   663  0117                     	;# 
   664  0118                     	;# 
   665  0119                     	;# 
   666  011D                     	;# 
   667  018C                     	;# 
   668  018E                     	;# 
   669  0191                     	;# 
   670  0191                     	;# 
   671  0192                     	;# 
   672  0193                     	;# 
   673  0193                     	;# 
   674  0194                     	;# 
   675  0195                     	;# 
   676  0196                     	;# 
   677  0197                     	;# 
   678  020C                     	;# 
   679  0211                     	;# 
   680  0211                     	;# 
   681  0212                     	;# 
   682  0212                     	;# 
   683  0213                     	;# 
   684  0213                     	;# 
   685  0214                     	;# 
   686  0214                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0216                     	;# 
   691  0216                     	;# 
   692  0217                     	;# 
   693  0217                     	;# 
   694  0391                     	;# 
   695  0392                     	;# 
   696  0393                     	;# 
   697  0498                     	;# 
   698  0498                     	;# 
   699  0499                     	;# 
   700  049A                     	;# 
   701  049B                     	;# 
   702  049B                     	;# 
   703  049C                     	;# 
   704  049D                     	;# 
   705  049E                     	;# 
   706  049F                     	;# 
   707  0611                     	;# 
   708  0612                     	;# 
   709  0613                     	;# 
   710  0613                     	;# 
   711  0614                     	;# 
   712  0615                     	;# 
   713  0616                     	;# 
   714  0616                     	;# 
   715  0617                     	;# 
   716  0618                     	;# 
   717  0619                     	;# 
   718  0619                     	;# 
   719  061A                     	;# 
   720  061B                     	;# 
   721  061C                     	;# 
   722  061C                     	;# 
   723  0691                     	;# 
   724  0692                     	;# 
   725  0693                     	;# 
   726  0694                     	;# 
   727  0695                     	;# 
   728  0F0F                     	;# 
   729  0F10                     	;# 
   730  0F11                     	;# 
   731  0F12                     	;# 
   732  0F13                     	;# 
   733  0F14                     	;# 
   734  0F15                     	;# 
   735  0F16                     	;# 
   736  0F17                     	;# 
   737  0F18                     	;# 
   738  0F19                     	;# 
   739  0F1A                     	;# 
   740  0F1B                     	;# 
   741  0F1C                     	;# 
   742  0F1D                     	;# 
   743  0F1E                     	;# 
   744  0F1F                     	;# 
   745  0FE3                     	;# 
   746  0FE4                     	;# 
   747  0FE5                     	;# 
   748  0FE6                     	;# 
   749  0FE7                     	;# 
   750  0FE8                     	;# 
   751  0FE9                     	;# 
   752  0FEA                     	;# 
   753  0FEB                     	;# 
   754  0FED                     	;# 
   755  0FEE                     	;# 
   756  0FEF                     	;# 
   757  0000                     	;# 
   758  0001                     	;# 
   759  0002                     	;# 
   760  0003                     	;# 
   761  0004                     	;# 
   762  0005                     	;# 
   763  0006                     	;# 
   764  0007                     	;# 
   765  0008                     	;# 
   766  0009                     	;# 
   767  000A                     	;# 
   768  000B                     	;# 
   769  000C                     	;# 
   770  000E                     	;# 
   771  0011                     	;# 
   772  0012                     	;# 
   773  0013                     	;# 
   774  0015                     	;# 
   775  0016                     	;# 
   776  0016                     	;# 
   777  0017                     	;# 
   778  0018                     	;# 
   779  0019                     	;# 
   780  001A                     	;# 
   781  001B                     	;# 
   782  001C                     	;# 
   783  008C                     	;# 
   784  008E                     	;# 
   785  0091                     	;# 
   786  0092                     	;# 
   787  0093                     	;# 
   788  0095                     	;# 
   789  0096                     	;# 
   790  0097                     	;# 
   791  0099                     	;# 
   792  009A                     	;# 
   793  009B                     	;# 
   794  009B                     	;# 
   795  009C                     	;# 
   796  009D                     	;# 
   797  009E                     	;# 
   798  009F                     	;# 
   799  010C                     	;# 
   800  010E                     	;# 
   801  0111                     	;# 
   802  0112                     	;# 
   803  0113                     	;# 
   804  0114                     	;# 
   805  0115                     	;# 
   806  0116                     	;# 
   807  0117                     	;# 
   808  0118                     	;# 
   809  0119                     	;# 
   810  011D                     	;# 
   811  018C                     	;# 
   812  018E                     	;# 
   813  0191                     	;# 
   814  0191                     	;# 
   815  0192                     	;# 
   816  0193                     	;# 
   817  0193                     	;# 
   818  0194                     	;# 
   819  0195                     	;# 
   820  0196                     	;# 
   821  0197                     	;# 
   822  020C                     	;# 
   823  0211                     	;# 
   824  0211                     	;# 
   825  0212                     	;# 
   826  0212                     	;# 
   827  0213                     	;# 
   828  0213                     	;# 
   829  0214                     	;# 
   830  0214                     	;# 
   831  0215                     	;# 
   832  0215                     	;# 
   833  0215                     	;# 
   834  0216                     	;# 
   835  0216                     	;# 
   836  0217                     	;# 
   837  0217                     	;# 
   838  0391                     	;# 
   839  0392                     	;# 
   840  0393                     	;# 
   841  0498                     	;# 
   842  0498                     	;# 
   843  0499                     	;# 
   844  049A                     	;# 
   845  049B                     	;# 
   846  049B                     	;# 
   847  049C                     	;# 
   848  049D                     	;# 
   849  049E                     	;# 
   850  049F                     	;# 
   851  0611                     	;# 
   852  0612                     	;# 
   853  0613                     	;# 
   854  0613                     	;# 
   855  0614                     	;# 
   856  0615                     	;# 
   857  0616                     	;# 
   858  0616                     	;# 
   859  0617                     	;# 
   860  0618                     	;# 
   861  0619                     	;# 
   862  0619                     	;# 
   863  061A                     	;# 
   864  061B                     	;# 
   865  061C                     	;# 
   866  061C                     	;# 
   867  0691                     	;# 
   868  0692                     	;# 
   869  0693                     	;# 
   870  0694                     	;# 
   871  0695                     	;# 
   872  0F0F                     	;# 
   873  0F10                     	;# 
   874  0F11                     	;# 
   875  0F12                     	;# 
   876  0F13                     	;# 
   877  0F14                     	;# 
   878  0F15                     	;# 
   879  0F16                     	;# 
   880  0F17                     	;# 
   881  0F18                     	;# 
   882  0F19                     	;# 
   883  0F1A                     	;# 
   884  0F1B                     	;# 
   885  0F1C                     	;# 
   886  0F1D                     	;# 
   887  0F1E                     	;# 
   888  0F1F                     	;# 
   889  0FE3                     	;# 
   890  0FE4                     	;# 
   891  0FE5                     	;# 
   892  0FE6                     	;# 
   893  0FE7                     	;# 
   894  0FE8                     	;# 
   895  0FE9                     	;# 
   896  0FEA                     	;# 
   897  0FEB                     	;# 
   898  0FED                     	;# 
   899  0FEE                     	;# 
   900  0FEF                     	;# 
   901  0000                     	;# 
   902  0001                     	;# 
   903  0002                     	;# 
   904  0003                     	;# 
   905  0004                     	;# 
   906  0005                     	;# 
   907  0006                     	;# 
   908  0007                     	;# 
   909  0008                     	;# 
   910  0009                     	;# 
   911  000A                     	;# 
   912  000B                     	;# 
   913  000C                     	;# 
   914  000E                     	;# 
   915  0011                     	;# 
   916  0012                     	;# 
   917  0013                     	;# 
   918  0015                     	;# 
   919  0016                     	;# 
   920  0016                     	;# 
   921  0017                     	;# 
   922  0018                     	;# 
   923  0019                     	;# 
   924  001A                     	;# 
   925  001B                     	;# 
   926  001C                     	;# 
   927  008C                     	;# 
   928  008E                     	;# 
   929  0091                     	;# 
   930  0092                     	;# 
   931  0093                     	;# 
   932  0095                     	;# 
   933  0096                     	;# 
   934  0097                     	;# 
   935  0099                     	;# 
   936  009A                     	;# 
   937  009B                     	;# 
   938  009B                     	;# 
   939  009C                     	;# 
   940  009D                     	;# 
   941  009E                     	;# 
   942  009F                     	;# 
   943  010C                     	;# 
   944  010E                     	;# 
   945  0111                     	;# 
   946  0112                     	;# 
   947  0113                     	;# 
   948  0114                     	;# 
   949  0115                     	;# 
   950  0116                     	;# 
   951  0117                     	;# 
   952  0118                     	;# 
   953  0119                     	;# 
   954  011D                     	;# 
   955  018C                     	;# 
   956  018E                     	;# 
   957  0191                     	;# 
   958  0191                     	;# 
   959  0192                     	;# 
   960  0193                     	;# 
   961  0193                     	;# 
   962  0194                     	;# 
   963  0195                     	;# 
   964  0196                     	;# 
   965  0197                     	;# 
   966  020C                     	;# 
   967  0211                     	;# 
   968  0211                     	;# 
   969  0212                     	;# 
   970  0212                     	;# 
   971  0213                     	;# 
   972  0213                     	;# 
   973  0214                     	;# 
   974  0214                     	;# 
   975  0215                     	;# 
   976  0215                     	;# 
   977  0215                     	;# 
   978  0216                     	;# 
   979  0216                     	;# 
   980  0217                     	;# 
   981  0217                     	;# 
   982  0391                     	;# 
   983  0392                     	;# 
   984  0393                     	;# 
   985  0498                     	;# 
   986  0498                     	;# 
   987  0499                     	;# 
   988  049A                     	;# 
   989  049B                     	;# 
   990  049B                     	;# 
   991  049C                     	;# 
   992  049D                     	;# 
   993  049E                     	;# 
   994  049F                     	;# 
   995  0611                     	;# 
   996  0612                     	;# 
   997  0613                     	;# 
   998  0613                     	;# 
   999  0614                     	;# 
  1000  0615                     	;# 
  1001  0616                     	;# 
  1002  0616                     	;# 
  1003  0617                     	;# 
  1004  0618                     	;# 
  1005  0619                     	;# 
  1006  0619                     	;# 
  1007  061A                     	;# 
  1008  061B                     	;# 
  1009  061C                     	;# 
  1010  061C                     	;# 
  1011  0691                     	;# 
  1012  0692                     	;# 
  1013  0693                     	;# 
  1014  0694                     	;# 
  1015  0695                     	;# 
  1016  0F0F                     	;# 
  1017  0F10                     	;# 
  1018  0F11                     	;# 
  1019  0F12                     	;# 
  1020  0F13                     	;# 
  1021  0F14                     	;# 
  1022  0F15                     	;# 
  1023  0F16                     	;# 
  1024  0F17                     	;# 
  1025  0F18                     	;# 
  1026  0F19                     	;# 
  1027  0F1A                     	;# 
  1028  0F1B                     	;# 
  1029  0F1C                     	;# 
  1030  0F1D                     	;# 
  1031  0F1E                     	;# 
  1032  0F1F                     	;# 
  1033  0FE3                     	;# 
  1034  0FE4                     	;# 
  1035  0FE5                     	;# 
  1036  0FE6                     	;# 
  1037  0FE7                     	;# 
  1038  0FE8                     	;# 
  1039  0FE9                     	;# 
  1040  0FEA                     	;# 
  1041  0FEB                     	;# 
  1042  0FED                     	;# 
  1043  0FEE                     	;# 
  1044  0FEF                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0008                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000E                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0013                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008E                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0093                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  009F                     	;# 
  1087  010C                     	;# 
  1088  010E                     	;# 
  1089  0111                     	;# 
  1090  0112                     	;# 
  1091  0113                     	;# 
  1092  0114                     	;# 
  1093  0115                     	;# 
  1094  0116                     	;# 
  1095  0117                     	;# 
  1096  0118                     	;# 
  1097  0119                     	;# 
  1098  011D                     	;# 
  1099  018C                     	;# 
  1100  018E                     	;# 
  1101  0191                     	;# 
  1102  0191                     	;# 
  1103  0192                     	;# 
  1104  0193                     	;# 
  1105  0193                     	;# 
  1106  0194                     	;# 
  1107  0195                     	;# 
  1108  0196                     	;# 
  1109  0197                     	;# 
  1110  020C                     	;# 
  1111  0211                     	;# 
  1112  0211                     	;# 
  1113  0212                     	;# 
  1114  0212                     	;# 
  1115  0213                     	;# 
  1116  0213                     	;# 
  1117  0214                     	;# 
  1118  0214                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0216                     	;# 
  1123  0216                     	;# 
  1124  0217                     	;# 
  1125  0217                     	;# 
  1126  0391                     	;# 
  1127  0392                     	;# 
  1128  0393                     	;# 
  1129  0498                     	;# 
  1130  0498                     	;# 
  1131  0499                     	;# 
  1132  049A                     	;# 
  1133  049B                     	;# 
  1134  049B                     	;# 
  1135  049C                     	;# 
  1136  049D                     	;# 
  1137  049E                     	;# 
  1138  049F                     	;# 
  1139  0611                     	;# 
  1140  0612                     	;# 
  1141  0613                     	;# 
  1142  0613                     	;# 
  1143  0614                     	;# 
  1144  0615                     	;# 
  1145  0616                     	;# 
  1146  0616                     	;# 
  1147  0617                     	;# 
  1148  0618                     	;# 
  1149  0619                     	;# 
  1150  0619                     	;# 
  1151  061A                     	;# 
  1152  061B                     	;# 
  1153  061C                     	;# 
  1154  061C                     	;# 
  1155  0691                     	;# 
  1156  0692                     	;# 
  1157  0693                     	;# 
  1158  0694                     	;# 
  1159  0695                     	;# 
  1160  0F0F                     	;# 
  1161  0F10                     	;# 
  1162  0F11                     	;# 
  1163  0F12                     	;# 
  1164  0F13                     	;# 
  1165  0F14                     	;# 
  1166  0F15                     	;# 
  1167  0F16                     	;# 
  1168  0F17                     	;# 
  1169  0F18                     	;# 
  1170  0F19                     	;# 
  1171  0F1A                     	;# 
  1172  0F1B                     	;# 
  1173  0F1C                     	;# 
  1174  0F1D                     	;# 
  1175  0F1E                     	;# 
  1176  0F1F                     	;# 
  1177  0FE3                     	;# 
  1178  0FE4                     	;# 
  1179  0FE5                     	;# 
  1180  0FE6                     	;# 
  1181  0FE7                     	;# 
  1182  0FE8                     	;# 
  1183  0FE9                     	;# 
  1184  0FEA                     	;# 
  1185  0FEB                     	;# 
  1186  0FED                     	;# 
  1187  0FEE                     	;# 
  1188  0FEF                     	;# 
  1189  0000                     	;# 
  1190  0001                     	;# 
  1191  0002                     	;# 
  1192  0003                     	;# 
  1193  0004                     	;# 
  1194  0005                     	;# 
  1195  0006                     	;# 
  1196  0007                     	;# 
  1197  0008                     	;# 
  1198  0009                     	;# 
  1199  000A                     	;# 
  1200  000B                     	;# 
  1201  000C                     	;# 
  1202  000E                     	;# 
  1203  0011                     	;# 
  1204  0012                     	;# 
  1205  0013                     	;# 
  1206  0015                     	;# 
  1207  0016                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001C                     	;# 
  1215  008C                     	;# 
  1216  008E                     	;# 
  1217  0091                     	;# 
  1218  0092                     	;# 
  1219  0093                     	;# 
  1220  0095                     	;# 
  1221  0096                     	;# 
  1222  0097                     	;# 
  1223  0099                     	;# 
  1224  009A                     	;# 
  1225  009B                     	;# 
  1226  009B                     	;# 
  1227  009C                     	;# 
  1228  009D                     	;# 
  1229  009E                     	;# 
  1230  009F                     	;# 
  1231  010C                     	;# 
  1232  010E                     	;# 
  1233  0111                     	;# 
  1234  0112                     	;# 
  1235  0113                     	;# 
  1236  0114                     	;# 
  1237  0115                     	;# 
  1238  0116                     	;# 
  1239  0117                     	;# 
  1240  0118                     	;# 
  1241  0119                     	;# 
  1242  011D                     	;# 
  1243  018C                     	;# 
  1244  018E                     	;# 
  1245  0191                     	;# 
  1246  0191                     	;# 
  1247  0192                     	;# 
  1248  0193                     	;# 
  1249  0193                     	;# 
  1250  0194                     	;# 
  1251  0195                     	;# 
  1252  0196                     	;# 
  1253  0197                     	;# 
  1254  020C                     	;# 
  1255  0211                     	;# 
  1256  0211                     	;# 
  1257  0212                     	;# 
  1258  0212                     	;# 
  1259  0213                     	;# 
  1260  0213                     	;# 
  1261  0214                     	;# 
  1262  0214                     	;# 
  1263  0215                     	;# 
  1264  0215                     	;# 
  1265  0215                     	;# 
  1266  0216                     	;# 
  1267  0216                     	;# 
  1268  0217                     	;# 
  1269  0217                     	;# 
  1270  0391                     	;# 
  1271  0392                     	;# 
  1272  0393                     	;# 
  1273  0498                     	;# 
  1274  0498                     	;# 
  1275  0499                     	;# 
  1276  049A                     	;# 
  1277  049B                     	;# 
  1278  049B                     	;# 
  1279  049C                     	;# 
  1280  049D                     	;# 
  1281  049E                     	;# 
  1282  049F                     	;# 
  1283  0611                     	;# 
  1284  0612                     	;# 
  1285  0613                     	;# 
  1286  0613                     	;# 
  1287  0614                     	;# 
  1288  0615                     	;# 
  1289  0616                     	;# 
  1290  0616                     	;# 
  1291  0617                     	;# 
  1292  0618                     	;# 
  1293  0619                     	;# 
  1294  0619                     	;# 
  1295  061A                     	;# 
  1296  061B                     	;# 
  1297  061C                     	;# 
  1298  061C                     	;# 
  1299  0691                     	;# 
  1300  0692                     	;# 
  1301  0693                     	;# 
  1302  0694                     	;# 
  1303  0695                     	;# 
  1304  0F0F                     	;# 
  1305  0F10                     	;# 
  1306  0F11                     	;# 
  1307  0F12                     	;# 
  1308  0F13                     	;# 
  1309  0F14                     	;# 
  1310  0F15                     	;# 
  1311  0F16                     	;# 
  1312  0F17                     	;# 
  1313  0F18                     	;# 
  1314  0F19                     	;# 
  1315  0F1A                     	;# 
  1316  0F1B                     	;# 
  1317  0F1C                     	;# 
  1318  0F1D                     	;# 
  1319  0F1E                     	;# 
  1320  0F1F                     	;# 
  1321  0FE3                     	;# 
  1322  0FE4                     	;# 
  1323  0FE5                     	;# 
  1324  0FE6                     	;# 
  1325  0FE7                     	;# 
  1326  0FE8                     	;# 
  1327  0FE9                     	;# 
  1328  0FEA                     	;# 
  1329  0FEB                     	;# 
  1330  0FED                     	;# 
  1331  0FEE                     	;# 
  1332  0FEF                     	;# 
  1333  0000                     	;# 
  1334  0001                     	;# 
  1335  0002                     	;# 
  1336  0003                     	;# 
  1337  0004                     	;# 
  1338  0005                     	;# 
  1339  0006                     	;# 
  1340  0007                     	;# 
  1341  0008                     	;# 
  1342  0009                     	;# 
  1343  000A                     	;# 
  1344  000B                     	;# 
  1345  000C                     	;# 
  1346  000E                     	;# 
  1347  0011                     	;# 
  1348  0012                     	;# 
  1349  0013                     	;# 
  1350  0015                     	;# 
  1351  0016                     	;# 
  1352  0016                     	;# 
  1353  0017                     	;# 
  1354  0018                     	;# 
  1355  0019                     	;# 
  1356  001A                     	;# 
  1357  001B                     	;# 
  1358  001C                     	;# 
  1359  008C                     	;# 
  1360  008E                     	;# 
  1361  0091                     	;# 
  1362  0092                     	;# 
  1363  0093                     	;# 
  1364  0095                     	;# 
  1365  0096                     	;# 
  1366  0097                     	;# 
  1367  0099                     	;# 
  1368  009A                     	;# 
  1369  009B                     	;# 
  1370  009B                     	;# 
  1371  009C                     	;# 
  1372  009D                     	;# 
  1373  009E                     	;# 
  1374  009F                     	;# 
  1375  010C                     	;# 
  1376  010E                     	;# 
  1377  0111                     	;# 
  1378  0112                     	;# 
  1379  0113                     	;# 
  1380  0114                     	;# 
  1381  0115                     	;# 
  1382  0116                     	;# 
  1383  0117                     	;# 
  1384  0118                     	;# 
  1385  0119                     	;# 
  1386  011D                     	;# 
  1387  018C                     	;# 
  1388  018E                     	;# 
  1389  0191                     	;# 
  1390  0191                     	;# 
  1391  0192                     	;# 
  1392  0193                     	;# 
  1393  0193                     	;# 
  1394  0194                     	;# 
  1395  0195                     	;# 
  1396  0196                     	;# 
  1397  0197                     	;# 
  1398  020C                     	;# 
  1399  0211                     	;# 
  1400  0211                     	;# 
  1401  0212                     	;# 
  1402  0212                     	;# 
  1403  0213                     	;# 
  1404  0213                     	;# 
  1405  0214                     	;# 
  1406  0214                     	;# 
  1407  0215                     	;# 
  1408  0215                     	;# 
  1409  0215                     	;# 
  1410  0216                     	;# 
  1411  0216                     	;# 
  1412  0217                     	;# 
  1413  0217                     	;# 
  1414  0391                     	;# 
  1415  0392                     	;# 
  1416  0393                     	;# 
  1417  0498                     	;# 
  1418  0498                     	;# 
  1419  0499                     	;# 
  1420  049A                     	;# 
  1421  049B                     	;# 
  1422  049B                     	;# 
  1423  049C                     	;# 
  1424  049D                     	;# 
  1425  049E                     	;# 
  1426  049F                     	;# 
  1427  0611                     	;# 
  1428  0612                     	;# 
  1429  0613                     	;# 
  1430  0613                     	;# 
  1431  0614                     	;# 
  1432  0615                     	;# 
  1433  0616                     	;# 
  1434  0616                     	;# 
  1435  0617                     	;# 
  1436  0618                     	;# 
  1437  0619                     	;# 
  1438  0619                     	;# 
  1439  061A                     	;# 
  1440  061B                     	;# 
  1441  061C                     	;# 
  1442  061C                     	;# 
  1443  0691                     	;# 
  1444  0692                     	;# 
  1445  0693                     	;# 
  1446  0694                     	;# 
  1447  0695                     	;# 
  1448  0F0F                     	;# 
  1449  0F10                     	;# 
  1450  0F11                     	;# 
  1451  0F12                     	;# 
  1452  0F13                     	;# 
  1453  0F14                     	;# 
  1454  0F15                     	;# 
  1455  0F16                     	;# 
  1456  0F17                     	;# 
  1457  0F18                     	;# 
  1458  0F19                     	;# 
  1459  0F1A                     	;# 
  1460  0F1B                     	;# 
  1461  0F1C                     	;# 
  1462  0F1D                     	;# 
  1463  0F1E                     	;# 
  1464  0F1F                     	;# 
  1465  0FE3                     	;# 
  1466  0FE4                     	;# 
  1467  0FE5                     	;# 
  1468  0FE6                     	;# 
  1469  0FE7                     	;# 
  1470  0FE8                     	;# 
  1471  0FE9                     	;# 
  1472  0FEA                     	;# 
  1473  0FEB                     	;# 
  1474  0FED                     	;# 
  1475  0FEE                     	;# 
  1476  0FEF                     	;# 
  1477                           
  1478                           	psect	idataBANK0
  1479  0361                     __pidataBANK0:	
  1480                           
  1481                           ;initializer for _long_press_limit
  1482  0361  3400               	retlw	0
  1483  0362  342D               	retlw	45
  1484                           
  1485                           ;initializer for _switch1_state
  1486  0363  34FF               	retlw	255
  1487  0364  34FF               	retlw	255
  1488                           
  1489                           ;initializer for _switch1_up
  1490  0365  3401               	retlw	1
  1491  0366  3400               	retlw	0
  1492                           
  1493                           ;initializer for _switch2_state
  1494  0367  34FF               	retlw	255
  1495  0368  34FF               	retlw	255
  1496                           
  1497                           ;initializer for _switch2_up
  1498  0369  3401               	retlw	1
  1499  036A  3400               	retlw	0
  1500  000B                     _INTCONbits	set	11
  1501  0011                     _PIR1bits	set	17
  1502  000C                     _PORTAbits	set	12
  1503  001C                     _T2CONbits	set	28
  1504  009D                     _ADCON0bits	set	157
  1505  009E                     _ADCON1bits	set	158
  1506  009C                     _ADRESH	set	156
  1507  009B                     _ADRESL	set	155
  1508  0099                     _OSCCONbits	set	153
  1509  009A                     _OSCSTAT	set	154
  1510  008C                     _TRISAbits	set	140
  1511  008E                     _TRISCbits	set	142
  1512  010C                     _LATAbits	set	268
  1513  010E                     _LATCbits	set	270
  1514  0191                     _PMADR	set	401
  1515  018C                     _ANSELAbits	set	396
  1516  0192                     _PMADRH	set	402
  1517  0191                     _PMADRL	set	401
  1518  0195                     _PMCON1bits	set	405
  1519  0196                     _PMCON2	set	406
  1520  0194                     _PMDATH	set	404
  1521  0193                     _PMDATL	set	403
  1522                           
  1523                           ; #config settings
  1524  0000                     
  1525                           	psect	cinit
  1526  000E                     start_initialization:	
  1527  000E                     __initialization:	
  1528                           
  1529                           ; Clear objects allocated to BANK0
  1530  000E  3020               	movlw	low __pbssBANK0
  1531  000F  0084               	movwf	4
  1532  0010  3000               	movlw	high __pbssBANK0
  1533  0011  0085               	movwf	5
  1534  0012  301A               	movlw	26
  1535  0013  2383               	fcall	clear_ram0
  1536                           
  1537                           ; Initialize objects allocated to BANK0
  1538  0014  3061               	movlw	low __pidataBANK0
  1539  0015  0084               	movwf	4
  1540  0016  3083               	movlw	(high __pidataBANK0)| (0+128)
  1541  0017  0085               	movwf	5
  1542  0018  303A               	movlw	low __pdataBANK0
  1543  0019  0086               	movwf	6
  1544  001A  3000               	movlw	high __pdataBANK0
  1545  001B  0087               	movwf	7
  1546  001C  300A               	movlw	10
  1547  001D  2389               	fcall	init_ram
  1548  001E                     end_of_initialization:	
  1549                           ;End of C runtime variable initialization code
  1550                           
  1551  001E                     __end_of__initialization:	
  1552  001E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1553  001F  0020               	movlb	0
  1554  0020  2B75               	ljmp	_main	;jump to C main() function
  1555                           
  1556                           	psect	bssBANK0
  1557  0020                     __pbssBANK0:	
  1558  0020                     wait_ms@timel:	
  1559  0020                     	ds	4
  1560  0024                     _isInitialized:	
  1561  0024                     	ds	2
  1562  0026                     _switch1_down:	
  1563  0026                     	ds	2
  1564  0028                     _switch1_pressed:	
  1565  0028                     	ds	2
  1566  002A                     _switch1_toggle:	
  1567  002A                     	ds	2
  1568  002C                     _switch1_turning_on:	
  1569  002C                     	ds	2
  1570  002E                     _switch2_down:	
  1571  002E                     	ds	2
  1572  0030                     _switch2_pressed:	
  1573  0030                     	ds	2
  1574  0032                     _switch2_toggle:	
  1575  0032                     	ds	2
  1576  0034                     _switch2_turning_on:	
  1577  0034                     	ds	2
  1578  0036                     _pedalState:	
  1579  0036                     	ds	4
  1580                           
  1581                           	psect	dataBANK0
  1582  003A                     __pdataBANK0:	
  1583  003A                     _long_press_limit:	
  1584  003A                     	ds	2
  1585  003C                     _switch1_state:	
  1586  003C                     	ds	2
  1587  003E                     _switch1_up:	
  1588  003E                     	ds	2
  1589  0040                     _switch2_state:	
  1590  0040                     	ds	2
  1591  0042                     _switch2_up:	
  1592  0042                     	ds	2
  1593                           
  1594                           	psect	clrtext
  1595  0383                     clear_ram0:	
  1596                           ;	Called with FSR0 containing the base address, and
  1597                           ;	WREG with the size to clear
  1598                           
  1599  0383  0064               	clrwdt	;clear the watchdog before getting into this loop
  1600  0384                     clrloop0:	
  1601  0384  0180               	clrf	0	;clear RAM location pointed to by FSR
  1602  0385  3101               	addfsr 0,1
  1603  0386  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1604  0387  2B84               	goto	clrloop0	;have we reached the end yet?
  1605  0388  3400               	retlw	0	;all done for this memory range, return
  1606                           
  1607                           	psect	inittext
  1608  0389                     init_ram:	
  1609  0389  00FE               	movwf	126
  1610  038A                     initloop:	
  1611  038A  0012               	moviw fsr0++
  1612  038B  001E               	movwi fsr1++
  1613  038C  0BFE               	decfsz	126,f
  1614  038D  2B8A               	goto	initloop
  1615  038E  3400               	retlw	0
  1616                           
  1617                           	psect	cstackCOMMON
  1618  0070                     __pcstackCOMMON:	
  1619  0070                     ?_ConfigureOscillator:	
  1620  0070                     ?_InitApp:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623  0070                     ?_initSwitch1:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0070                     ?_initSwitch2:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629  0070                     ?_updateSwitch1:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0070                     ?_updateSwitch2:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635  0070                     ?_init_adc:	
  1636                           ; 1 bytes @ 0x0
  1637                           
  1638  0070                     ?_saveState:	
  1639                           ; 1 bytes @ 0x0
  1640                           
  1641  0070                     ?_isr:	
  1642                           ; 1 bytes @ 0x0
  1643                           
  1644  0070                     ??_isr:	
  1645                           ; 1 bytes @ 0x0
  1646                           
  1647  0070                     ?_main:	
  1648                           ; 1 bytes @ 0x0
  1649                           
  1650  0070                     ?_initStateManager:	
  1651                           ; 1 bytes @ 0x0
  1652                           
  1653  0070                     ?_getCurrentState:	
  1654                           ; 1 bytes @ 0x0
  1655                           
  1656                           
  1657                           ; 4 bytes @ 0x0
  1658  0070                     	ds	1
  1659  0071                     ?_FLASH_EraseBlock:	
  1660  0071                     ??_ConfigureOscillator:	
  1661                           ; 1 bytes @ 0x1
  1662                           
  1663  0071                     ??_InitApp:	
  1664                           ; 1 bytes @ 0x1
  1665                           
  1666  0071                     ??_init_adc:	
  1667                           ; 1 bytes @ 0x1
  1668                           
  1669  0071                     ?_FLASH_ReadWord:	
  1670                           ; 1 bytes @ 0x1
  1671                           
  1672  0071                     ?___lmul:	
  1673                           ; 2 bytes @ 0x1
  1674                           
  1675  0071                     FLASH_ReadWord@flashAddr:	
  1676                           ; 4 bytes @ 0x1
  1677                           
  1678  0071                     FLASH_EraseBlock@startAddr:	
  1679                           ; 2 bytes @ 0x1
  1680                           
  1681  0071                     ___lmul@multiplier:	
  1682                           ; 2 bytes @ 0x1
  1683                           
  1684                           
  1685                           ; 4 bytes @ 0x1
  1686  0071                     	ds	2
  1687  0073                     ??_FLASH_EraseBlock:	
  1688  0073                     ??_FLASH_ReadWord:	
  1689                           ; 1 bytes @ 0x3
  1690                           
  1691  0073                     FLASH_ReadWord@GIEBitValue:	
  1692                           ; 1 bytes @ 0x3
  1693                           
  1694  0073                     FLASH_EraseBlock@GIEBitValue:	
  1695                           ; 1 bytes @ 0x3
  1696                           
  1697                           
  1698                           ; 1 bytes @ 0x3
  1699  0073                     	ds	1
  1700  0074                     ?_HEF_ByteArrayWrite:	
  1701  0074                     ?_HEF_ByteArrayRead:	
  1702                           ; 1 bytes @ 0x4
  1703                           
  1704  0074                     HEF_ByteArrayWrite@byteArray:	
  1705                           ; 1 bytes @ 0x4
  1706                           
  1707  0074                     HEF_ByteArrayRead@block:	
  1708                           ; 1 bytes @ 0x4
  1709                           
  1710                           
  1711                           ; 1 bytes @ 0x4
  1712  0074                     	ds	1
  1713  0075                     HEF_ByteArrayWrite@count:	
  1714  0075                     HEF_ByteArrayRead@count:	
  1715                           ; 1 bytes @ 0x5
  1716                           
  1717  0075                     ___lmul@multiplicand:	
  1718                           ; 1 bytes @ 0x5
  1719                           
  1720                           
  1721                           ; 4 bytes @ 0x5
  1722  0075                     	ds	1
  1723  0076                     ??_HEF_ByteArrayWrite:	
  1724  0076                     ??_HEF_ByteArrayRead:	
  1725                           ; 1 bytes @ 0x6
  1726                           
  1727                           
  1728                           ; 1 bytes @ 0x6
  1729  0076                     	ds	2
  1730  0078                     HEF_ByteArrayWrite@GIEBitValue:	
  1731  0078                     HEF_ByteArrayRead@wordAdd:	
  1732                           ; 1 bytes @ 0x8
  1733                           
  1734                           
  1735                           ; 2 bytes @ 0x8
  1736  0078                     	ds	1
  1737  0079                     ??___lmul:	
  1738  0079                     HEF_ByteArrayWrite@block:	
  1739                           ; 1 bytes @ 0x9
  1740                           
  1741  0079                     ___lmul@product:	
  1742                           ; 1 bytes @ 0x9
  1743                           
  1744                           
  1745                           ; 4 bytes @ 0x9
  1746  0079                     	ds	1
  1747  007A                     HEF_ByteArrayRead@bArray:	
  1748  007A                     HEF_ByteArrayWrite@blockAddr:	
  1749                           ; 1 bytes @ 0xA
  1750                           
  1751                           
  1752                           ; 2 bytes @ 0xA
  1753  007A                     	ds	1
  1754  007B                     ??_getCurrentState:	
  1755                           
  1756                           ; 1 bytes @ 0xB
  1757  007B                     	ds	1
  1758  007C                     saveState@r:	
  1759                           
  1760                           ; 1 bytes @ 0xC
  1761  007C                     	ds	1
  1762  007D                     ??_initSwitch1:	
  1763  007D                     ??_initSwitch2:	
  1764                           ; 1 bytes @ 0xD
  1765                           
  1766  007D                     ??_setSwitch1State:	
  1767                           ; 1 bytes @ 0xD
  1768                           
  1769  007D                     ??_setSwitch2State:	
  1770                           ; 1 bytes @ 0xD
  1771                           
  1772  007D                     ??_main:	
  1773                           ; 1 bytes @ 0xD
  1774                           
  1775  007D                     ??_wait_ms:	
  1776                           ; 1 bytes @ 0xD
  1777                           
  1778  007D                     ??_initStateManager:	
  1779                           ; 1 bytes @ 0xD
  1780                           
  1781  007D                     ??_getSwitch1State:	
  1782                           ; 1 bytes @ 0xD
  1783                           
  1784  007D                     ??_getSwitch2State:	
  1785                           ; 1 bytes @ 0xD
  1786                           
  1787  007D                     ??_updateSwitch1State:	
  1788                           ; 1 bytes @ 0xD
  1789                           
  1790  007D                     ??_updateSwitch2State:	
  1791                           ; 1 bytes @ 0xD
  1792                           
  1793                           
  1794                           	psect	cstackBANK0
  1795  0044                     __pcstackBANK0:	
  1796                           ; 1 bytes @ 0xD
  1797                           
  1798  0044                     ??_saveState:	
  1799  0044                     ?_wait_ms:	
  1800                           ; 1 bytes @ 0x0
  1801                           
  1802  0044                     getCurrentState@r:	
  1803                           ; 1 bytes @ 0x0
  1804                           
  1805  0044                     wait_ms@time:	
  1806                           ; 1 bytes @ 0x0
  1807                           
  1808                           
  1809                           ; 2 bytes @ 0x0
  1810  0044                     	ds	1
  1811  0045                     ?_getSwitch1State:	
  1812  0045                     ?_getSwitch2State:	
  1813                           ; 2 bytes @ 0x1
  1814                           
  1815                           
  1816                           ; 2 bytes @ 0x1
  1817  0045                     	ds	2
  1818  0047                     ?_updateSwitch1State:	
  1819  0047                     ?_updateSwitch2State:	
  1820                           ; 1 bytes @ 0x3
  1821                           
  1822  0047                     updateSwitch1State@state:	
  1823                           ; 1 bytes @ 0x3
  1824                           
  1825  0047                     updateSwitch2State@state:	
  1826                           ; 2 bytes @ 0x3
  1827                           
  1828                           
  1829                           ; 2 bytes @ 0x3
  1830  0047                     	ds	2
  1831  0049                     ?_setSwitch1State:	
  1832  0049                     ?_setSwitch2State:	
  1833                           ; 1 bytes @ 0x5
  1834                           
  1835  0049                     setSwitch1State@f_state:	
  1836                           ; 1 bytes @ 0x5
  1837                           
  1838  0049                     setSwitch2State@f_state:	
  1839                           ; 2 bytes @ 0x5
  1840                           
  1841                           
  1842                           ; 2 bytes @ 0x5
  1843  0049                     	ds	2
  1844  004B                     ??_updateSwitch1:	
  1845  004B                     ??_updateSwitch2:	
  1846                           ; 1 bytes @ 0x7
  1847                           
  1848  004B                     initSwitch1@initState:	
  1849                           ; 1 bytes @ 0x7
  1850                           
  1851  004B                     initSwitch2@initState:	
  1852                           ; 2 bytes @ 0x7
  1853                           
  1854                           
  1855                           ; 2 bytes @ 0x7
  1856  004B                     	ds	2
  1857                           
  1858                           	psect	maintext
  1859  0375                     __pmaintext:	
  1860 ;;
  1861 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1862 ;;
  1863 ;; *************** function _main *****************
  1864 ;; Defined at:
  1865 ;;		line 28 in file "main.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : B1F/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1
  1879 ;;      Params:         0       0       0
  1880 ;;      Locals:         0       0       0
  1881 ;;      Temps:          0       0       0
  1882 ;;      Totals:         0       0       0
  1883 ;;Total ram usage:        0 bytes
  1884 ;; Hardware stack levels required when called:    7
  1885 ;; This function calls:
  1886 ;;		_ConfigureOscillator
  1887 ;;		_InitApp
  1888 ;;		_initSwitch1
  1889 ;;		_initSwitch2
  1890 ;;		_updateSwitch1
  1891 ;;		_updateSwitch2
  1892 ;; This function is called by:
  1893 ;;		Startup code after reset
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           
  1898                           ;psect for function _main
  1899  0375                     _main:	
  1900                           
  1901                           ;main.c: 29: ConfigureOscillator();
  1902                           
  1903                           ;incstack = 0
  1904                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1905  0375  2394               	fcall	_ConfigureOscillator
  1906                           
  1907                           ;main.c: 30: InitApp();
  1908  0376  22FE               	fcall	_InitApp
  1909                           
  1910                           ;main.c: 33: initSwitch1();
  1911  0377  2355               	fcall	_initSwitch1
  1912                           
  1913                           ;main.c: 34: initSwitch2();
  1914  0378  233D               	fcall	_initSwitch2
  1915  0379                     l1568:	
  1916                           ;main.c: 36: while (1) {
  1917                           
  1918                           
  1919                           ;main.c: 37: updateSwitch1();
  1920  0379  20BB               	fcall	_updateSwitch1
  1921                           
  1922                           ;main.c: 38: updateSwitch2();
  1923  037A  2021               	fcall	_updateSwitch2
  1924  037B  2B79               	goto	l1568
  1925  037C                     __end_of_main:	
  1926                           
  1927                           	psect	text1
  1928  0021                     __ptext1:	
  1929 ;; *************** function _updateSwitch2 *****************
  1930 ;; Defined at:
  1931 ;;		line 29 in file "switch2.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      void 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMMON   BANK0   BANK1
  1945 ;;      Params:         0       0       0
  1946 ;;      Locals:         0       0       0
  1947 ;;      Temps:          0       1       0
  1948 ;;      Totals:         0       1       0
  1949 ;;Total ram usage:        1 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    6
  1952 ;; This function calls:
  1953 ;;		_setSwitch1State
  1954 ;;		_setSwitch2State
  1955 ;; This function is called by:
  1956 ;;		_main
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           
  1961                           ;psect for function _updateSwitch2
  1962  0021                     _updateSwitch2:	
  1963                           
  1964                           ;switch2.c: 36: if (PORTAbits.RA5 == 0) {
  1965                           
  1966                           ;incstack = 0
  1967                           ; Regs used in _updateSwitch2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1968  0021  0020               	movlb	0	; select bank0
  1969  0022  1A8C               	btfsc	12,5	;volatile
  1970  0023  2834               	goto	l1446
  1971                           
  1972                           ;switch2.c: 37: if (switch2_pressed > 0) {
  1973  0024  0831               	movf	_switch2_pressed+1,w
  1974  0025  3A80               	xorlw	128
  1975  0026  00CB               	movwf	??_updateSwitch2
  1976  0027  3080               	movlw	128
  1977  0028  024B               	subwf	??_updateSwitch2,w
  1978  0029  1D03               	skipz
  1979  002A  282D               	goto	u925
  1980  002B  3001               	movlw	1
  1981  002C  0230               	subwf	_switch2_pressed,w
  1982  002D                     u925:	
  1983  002D  1C03               	skipc
  1984  002E  2844               	goto	l1450
  1985                           
  1986                           ;switch2.c: 38: switch2_pressed--;
  1987  002F  30FF               	movlw	255
  1988  0030  0020               	movlb	0	; select bank0
  1989  0031  07B0               	addwf	_switch2_pressed,f
  1990  0032  30FF               	movlw	255
  1991  0033  2843               	goto	L1
  1992  0034                     l1446:	
  1993                           ;switch2.c: 39: }
  1994                           ;switch2.c: 40: } else if (switch2_pressed < 25) {
  1995                           
  1996  0034  0831               	movf	_switch2_pressed+1,w
  1997  0035  3A80               	xorlw	128
  1998  0036  00CB               	movwf	??_updateSwitch2
  1999  0037  3080               	movlw	128
  2000  0038  024B               	subwf	??_updateSwitch2,w
  2001  0039  1D03               	skipz
  2002  003A  283D               	goto	u935
  2003  003B  3019               	movlw	25
  2004  003C  0230               	subwf	_switch2_pressed,w
  2005  003D                     u935:	
  2006  003D  1803               	skipnc
  2007  003E  2844               	goto	l1450
  2008                           
  2009                           ;switch2.c: 41: switch2_pressed++;
  2010  003F  3001               	movlw	1
  2011  0040  0020               	movlb	0	; select bank0
  2012  0041  07B0               	addwf	_switch2_pressed,f
  2013  0042  3000               	movlw	0
  2014  0043                     L1:	
  2015  0043  3DB1               	addwfc	_switch2_pressed+1,f
  2016  0044                     l1450:	
  2017                           
  2018                           ;switch2.c: 42: }
  2019                           ;switch2.c: 48: if (switch2_pressed == 0) {
  2020  0044  0020               	movlb	0	; select bank0
  2021  0045  0830               	movf	_switch2_pressed,w
  2022  0046  0431               	iorwf	_switch2_pressed+1,w
  2023  0047  1D03               	btfss	3,2
  2024  0048  288F               	goto	l1478
  2025                           
  2026                           ;switch2.c: 49: switch2_down++;
  2027  0049  3001               	movlw	1
  2028  004A  07AE               	addwf	_switch2_down,f
  2029  004B  3000               	movlw	0
  2030  004C  3DAF               	addwfc	_switch2_down+1,f
  2031                           
  2032                           ;switch2.c: 59: if (switch2_down >= long_press_limit) {
  2033  004D  082F               	movf	_switch2_down+1,w
  2034  004E  3A80               	xorlw	128
  2035  004F  00CB               	movwf	??_updateSwitch2
  2036  0050  083B               	movf	_long_press_limit+1,w
  2037  0051  3A80               	xorlw	128
  2038  0052  024B               	subwf	??_updateSwitch2,w
  2039  0053  1D03               	skipz
  2040  0054  2857               	goto	u955
  2041  0055  083A               	movf	_long_press_limit,w
  2042  0056  022E               	subwf	_switch2_down,w
  2043  0057                     u955:	
  2044  0057  1C03               	skipc
  2045  0058  2873               	goto	l1466
  2046                           
  2047                           ;switch2.c: 60: switch2_down = long_press_limit;
  2048  0059  0020               	movlb	0	; select bank0
  2049  005A  083B               	movf	_long_press_limit+1,w
  2050  005B  00AF               	movwf	_switch2_down+1
  2051  005C  083A               	movf	_long_press_limit,w
  2052  005D  00AE               	movwf	_switch2_down
  2053                           
  2054                           ;switch2.c: 61: setSwitch1State(0);
  2055  005E  3000               	movlw	0
  2056  005F  00C9               	movwf	setSwitch1State@f_state
  2057  0060  00CA               	movwf	setSwitch1State@f_state+1
  2058  0061  21E2               	fcall	_setSwitch1State
  2059                           
  2060                           ;switch2.c: 62: switch2_toggle = 0;
  2061  0062  0020               	movlb	0	; select bank0
  2062  0063  01B2               	clrf	_switch2_toggle
  2063  0064  01B3               	clrf	_switch2_toggle+1
  2064                           
  2065                           ;switch2.c: 64: if (switch2_state == 0) {
  2066  0065  0840               	movf	_switch2_state,w
  2067  0066  0441               	iorwf	_switch2_state+1,w
  2068  0067  1D03               	btfss	3,2
  2069  0068  288B               	goto	l1476
  2070                           
  2071                           ;switch2.c: 66: switch2_turning_on = 1;
  2072  0069  3001               	movlw	1
  2073  006A  00B4               	movwf	_switch2_turning_on
  2074  006B  3000               	movlw	0
  2075  006C  00B5               	movwf	_switch2_turning_on+1
  2076                           
  2077                           ;switch2.c: 67: setSwitch2State(1);
  2078  006D  3001               	movlw	1
  2079  006E  00C9               	movwf	setSwitch2State@f_state
  2080  006F  3000               	movlw	0
  2081  0070  00CA               	movwf	setSwitch2State@f_state+1
  2082  0071  21A8               	fcall	_setSwitch2State
  2083                           
  2084                           ;switch2.c: 68: }
  2085                           ;switch2.c: 69: } else {
  2086  0072  288B               	goto	l1476
  2087  0073                     l1466:	
  2088                           
  2089                           ;switch2.c: 71: if (switch2_state == 1) {
  2090  0073  0020               	movlb	0	; select bank0
  2091  0074  0340               	decf	_switch2_state,w
  2092  0075  0441               	iorwf	_switch2_state+1,w
  2093  0076  1D03               	btfss	3,2
  2094  0077  2883               	goto	l1474
  2095                           
  2096                           ;switch2.c: 72: if (switch2_up == 1) {
  2097  0078  0342               	decf	_switch2_up,w
  2098  0079  0443               	iorwf	_switch2_up+1,w
  2099  007A  1D03               	btfss	3,2
  2100  007B  288B               	goto	l1476
  2101                           
  2102                           ;switch2.c: 73: switch2_toggle = 1;
  2103  007C  3001               	movlw	1
  2104  007D  00B2               	movwf	_switch2_toggle
  2105  007E  3000               	movlw	0
  2106  007F  00B3               	movwf	_switch2_toggle+1
  2107                           
  2108                           ;switch2.c: 74: switch2_turning_on = 0;
  2109  0080  01B4               	clrf	_switch2_turning_on
  2110  0081  01B5               	clrf	_switch2_turning_on+1
  2111                           
  2112                           ;switch2.c: 75: }
  2113                           ;switch2.c: 77: } else {
  2114  0082  288B               	goto	l1476
  2115  0083                     l1474:	
  2116                           
  2117                           ;switch2.c: 79: switch2_turning_on = 1;
  2118  0083  3001               	movlw	1
  2119  0084  00B4               	movwf	_switch2_turning_on
  2120  0085  3000               	movlw	0
  2121  0086  00B5               	movwf	_switch2_turning_on+1
  2122                           
  2123                           ;switch2.c: 80: switch2_toggle = 1;
  2124  0087  3001               	movlw	1
  2125  0088  00B2               	movwf	_switch2_toggle
  2126  0089  3000               	movlw	0
  2127  008A  00B3               	movwf	_switch2_toggle+1
  2128  008B                     l1476:	
  2129                           
  2130                           ;switch2.c: 82: }
  2131                           ;switch2.c: 83: }
  2132                           ;switch2.c: 84: switch2_up = 0;
  2133  008B  0020               	movlb	0	; select bank0
  2134  008C  01C2               	clrf	_switch2_up
  2135  008D  01C3               	clrf	_switch2_up+1
  2136                           
  2137                           ;switch2.c: 85: } else if (switch2_pressed >= 25) {
  2138  008E  0008               	return
  2139  008F                     l1478:	
  2140  008F  0831               	movf	_switch2_pressed+1,w
  2141  0090  3A80               	xorlw	128
  2142  0091  00CB               	movwf	??_updateSwitch2
  2143  0092  3080               	movlw	128
  2144  0093  024B               	subwf	??_updateSwitch2,w
  2145  0094  1D03               	skipz
  2146  0095  2898               	goto	u995
  2147  0096  3019               	movlw	25
  2148  0097  0230               	subwf	_switch2_pressed,w
  2149  0098                     u995:	
  2150  0098  1C03               	skipc
  2151  0099  0008               	return
  2152                           
  2153                           ;switch2.c: 86: if (switch2_toggle == 1) {
  2154  009A  0020               	movlb	0	; select bank0
  2155  009B  0332               	decf	_switch2_toggle,w
  2156  009C  0433               	iorwf	_switch2_toggle+1,w
  2157  009D  1D03               	btfss	3,2
  2158  009E  28A4               	goto	l1484
  2159                           
  2160                           ;switch2.c: 87: setSwitch2State(switch2_turning_on);
  2161  009F  0835               	movf	_switch2_turning_on+1,w
  2162  00A0  00CA               	movwf	setSwitch2State@f_state+1
  2163  00A1  0834               	movf	_switch2_turning_on,w
  2164  00A2  00C9               	movwf	setSwitch2State@f_state
  2165  00A3  21A8               	fcall	_setSwitch2State
  2166  00A4                     l1484:	
  2167                           
  2168                           ;switch2.c: 88: }
  2169                           ;switch2.c: 89: LATCbits.LATC5 = switch2_state;
  2170  00A4  0020               	movlb	0	; select bank0
  2171  00A5  0C40               	rrf	_switch2_state,w
  2172  00A6  0022               	movlb	2	; select bank2
  2173  00A7  1C03               	skipc
  2174  00A8  128E               	bcf	14,5	;volatile
  2175  00A9  1803               	skipnc
  2176  00AA  168E               	bsf	14,5	;volatile
  2177                           
  2178                           ;switch2.c: 90: switch2_turning_on = 0;
  2179  00AB  0020               	movlb	0	; select bank0
  2180  00AC  01B4               	clrf	_switch2_turning_on
  2181  00AD  01B5               	clrf	_switch2_turning_on+1
  2182                           
  2183                           ;switch2.c: 91: switch2_toggle = 0;
  2184  00AE  01B2               	clrf	_switch2_toggle
  2185  00AF  01B3               	clrf	_switch2_toggle+1
  2186                           
  2187                           ;switch2.c: 92: switch2_up = 1;
  2188  00B0  3001               	movlw	1
  2189  00B1  00C2               	movwf	_switch2_up
  2190  00B2  3000               	movlw	0
  2191  00B3  00C3               	movwf	_switch2_up+1
  2192                           
  2193                           ;switch2.c: 93: switch2_down = 0;
  2194  00B4  01AE               	clrf	_switch2_down
  2195  00B5  01AF               	clrf	_switch2_down+1
  2196                           
  2197                           ;switch2.c: 94: switch2_pressed = 25;
  2198  00B6  3019               	movlw	25
  2199  00B7  00B0               	movwf	_switch2_pressed
  2200  00B8  3000               	movlw	0
  2201  00B9  00B1               	movwf	_switch2_pressed+1
  2202  00BA  0008               	return
  2203  00BB                     __end_of_updateSwitch2:	
  2204                           
  2205                           	psect	text2
  2206  00BB                     __ptext2:	
  2207 ;; *************** function _updateSwitch1 *****************
  2208 ;; Defined at:
  2209 ;;		line 29 in file "switch1.c"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;		None
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;		None
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      void 
  2216 ;; Registers used:
  2217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMMON   BANK0   BANK1
  2223 ;;      Params:         0       0       0
  2224 ;;      Locals:         0       0       0
  2225 ;;      Temps:          0       1       0
  2226 ;;      Totals:         0       1       0
  2227 ;;Total ram usage:        1 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    6
  2230 ;; This function calls:
  2231 ;;		_setSwitch1State
  2232 ;;		_setSwitch2State
  2233 ;; This function is called by:
  2234 ;;		_main
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           
  2239                           ;psect for function _updateSwitch1
  2240  00BB                     _updateSwitch1:	
  2241                           
  2242                           ;switch1.c: 36: if (PORTAbits.RA4 == 0) {
  2243                           
  2244                           ;incstack = 0
  2245                           ; Regs used in _updateSwitch1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2246  00BB  0020               	movlb	0	; select bank0
  2247  00BC  1A0C               	btfsc	12,4	;volatile
  2248  00BD  28CE               	goto	l1390
  2249                           
  2250                           ;switch1.c: 37: if (switch1_pressed > 0) {
  2251  00BE  0829               	movf	_switch1_pressed+1,w
  2252  00BF  3A80               	xorlw	128
  2253  00C0  00CB               	movwf	??_updateSwitch1
  2254  00C1  3080               	movlw	128
  2255  00C2  024B               	subwf	??_updateSwitch1,w
  2256  00C3  1D03               	skipz
  2257  00C4  28C7               	goto	u825
  2258  00C5  3001               	movlw	1
  2259  00C6  0228               	subwf	_switch1_pressed,w
  2260  00C7                     u825:	
  2261  00C7  1C03               	skipc
  2262  00C8  28DE               	goto	l1394
  2263                           
  2264                           ;switch1.c: 38: switch1_pressed--;
  2265  00C9  30FF               	movlw	255
  2266  00CA  0020               	movlb	0	; select bank0
  2267  00CB  07A8               	addwf	_switch1_pressed,f
  2268  00CC  30FF               	movlw	255
  2269  00CD  28DD               	goto	L2
  2270  00CE                     l1390:	
  2271                           ;switch1.c: 39: }
  2272                           ;switch1.c: 40: } else if (switch1_pressed < 25) {
  2273                           
  2274  00CE  0829               	movf	_switch1_pressed+1,w
  2275  00CF  3A80               	xorlw	128
  2276  00D0  00CB               	movwf	??_updateSwitch1
  2277  00D1  3080               	movlw	128
  2278  00D2  024B               	subwf	??_updateSwitch1,w
  2279  00D3  1D03               	skipz
  2280  00D4  28D7               	goto	u835
  2281  00D5  3019               	movlw	25
  2282  00D6  0228               	subwf	_switch1_pressed,w
  2283  00D7                     u835:	
  2284  00D7  1803               	skipnc
  2285  00D8  28DE               	goto	l1394
  2286                           
  2287                           ;switch1.c: 41: switch1_pressed++;
  2288  00D9  3001               	movlw	1
  2289  00DA  0020               	movlb	0	; select bank0
  2290  00DB  07A8               	addwf	_switch1_pressed,f
  2291  00DC  3000               	movlw	0
  2292  00DD                     L2:	
  2293  00DD  3DA9               	addwfc	_switch1_pressed+1,f
  2294  00DE                     l1394:	
  2295                           
  2296                           ;switch1.c: 42: }
  2297                           ;switch1.c: 48: if (switch1_pressed == 0) {
  2298  00DE  0020               	movlb	0	; select bank0
  2299  00DF  0828               	movf	_switch1_pressed,w
  2300  00E0  0429               	iorwf	_switch1_pressed+1,w
  2301  00E1  1D03               	btfss	3,2
  2302  00E2  2929               	goto	l1422
  2303                           
  2304                           ;switch1.c: 49: switch1_down++;
  2305  00E3  3001               	movlw	1
  2306  00E4  07A6               	addwf	_switch1_down,f
  2307  00E5  3000               	movlw	0
  2308  00E6  3DA7               	addwfc	_switch1_down+1,f
  2309                           
  2310                           ;switch1.c: 59: if (switch1_down >= long_press_limit) {
  2311  00E7  0827               	movf	_switch1_down+1,w
  2312  00E8  3A80               	xorlw	128
  2313  00E9  00CB               	movwf	??_updateSwitch1
  2314  00EA  083B               	movf	_long_press_limit+1,w
  2315  00EB  3A80               	xorlw	128
  2316  00EC  024B               	subwf	??_updateSwitch1,w
  2317  00ED  1D03               	skipz
  2318  00EE  28F1               	goto	u855
  2319  00EF  083A               	movf	_long_press_limit,w
  2320  00F0  0226               	subwf	_switch1_down,w
  2321  00F1                     u855:	
  2322  00F1  1C03               	skipc
  2323  00F2  290D               	goto	l1410
  2324                           
  2325                           ;switch1.c: 60: switch1_down = long_press_limit;
  2326  00F3  0020               	movlb	0	; select bank0
  2327  00F4  083B               	movf	_long_press_limit+1,w
  2328  00F5  00A7               	movwf	_switch1_down+1
  2329  00F6  083A               	movf	_long_press_limit,w
  2330  00F7  00A6               	movwf	_switch1_down
  2331                           
  2332                           ;switch1.c: 61: setSwitch2State(0);
  2333  00F8  3000               	movlw	0
  2334  00F9  00C9               	movwf	setSwitch2State@f_state
  2335  00FA  00CA               	movwf	setSwitch2State@f_state+1
  2336  00FB  21A8               	fcall	_setSwitch2State
  2337                           
  2338                           ;switch1.c: 62: switch1_toggle = 0;
  2339  00FC  0020               	movlb	0	; select bank0
  2340  00FD  01AA               	clrf	_switch1_toggle
  2341  00FE  01AB               	clrf	_switch1_toggle+1
  2342                           
  2343                           ;switch1.c: 64: if (switch1_state == 0) {
  2344  00FF  083C               	movf	_switch1_state,w
  2345  0100  043D               	iorwf	_switch1_state+1,w
  2346  0101  1D03               	btfss	3,2
  2347  0102  2925               	goto	l1420
  2348                           
  2349                           ;switch1.c: 66: switch1_turning_on = 1;
  2350  0103  3001               	movlw	1
  2351  0104  00AC               	movwf	_switch1_turning_on
  2352  0105  3000               	movlw	0
  2353  0106  00AD               	movwf	_switch1_turning_on+1
  2354                           
  2355                           ;switch1.c: 67: setSwitch1State(1);
  2356  0107  3001               	movlw	1
  2357  0108  00C9               	movwf	setSwitch1State@f_state
  2358  0109  3000               	movlw	0
  2359  010A  00CA               	movwf	setSwitch1State@f_state+1
  2360  010B  21E2               	fcall	_setSwitch1State
  2361                           
  2362                           ;switch1.c: 68: }
  2363                           ;switch1.c: 69: } else {
  2364  010C  2925               	goto	l1420
  2365  010D                     l1410:	
  2366                           
  2367                           ;switch1.c: 70: if (switch1_state == 1) {
  2368  010D  0020               	movlb	0	; select bank0
  2369  010E  033C               	decf	_switch1_state,w
  2370  010F  043D               	iorwf	_switch1_state+1,w
  2371  0110  1D03               	btfss	3,2
  2372  0111  291D               	goto	l1418
  2373                           
  2374                           ;switch1.c: 71: if (switch1_up == 1) {
  2375  0112  033E               	decf	_switch1_up,w
  2376  0113  043F               	iorwf	_switch1_up+1,w
  2377  0114  1D03               	btfss	3,2
  2378  0115  2925               	goto	l1420
  2379                           
  2380                           ;switch1.c: 72: switch1_toggle = 1;
  2381  0116  3001               	movlw	1
  2382  0117  00AA               	movwf	_switch1_toggle
  2383  0118  3000               	movlw	0
  2384  0119  00AB               	movwf	_switch1_toggle+1
  2385                           
  2386                           ;switch1.c: 73: switch1_turning_on = 0;
  2387  011A  01AC               	clrf	_switch1_turning_on
  2388  011B  01AD               	clrf	_switch1_turning_on+1
  2389                           
  2390                           ;switch1.c: 74: }
  2391                           ;switch1.c: 76: } else {
  2392  011C  2925               	goto	l1420
  2393  011D                     l1418:	
  2394                           
  2395                           ;switch1.c: 78: switch1_turning_on = 1;
  2396  011D  3001               	movlw	1
  2397  011E  00AC               	movwf	_switch1_turning_on
  2398  011F  3000               	movlw	0
  2399  0120  00AD               	movwf	_switch1_turning_on+1
  2400                           
  2401                           ;switch1.c: 79: switch1_toggle = 1;
  2402  0121  3001               	movlw	1
  2403  0122  00AA               	movwf	_switch1_toggle
  2404  0123  3000               	movlw	0
  2405  0124  00AB               	movwf	_switch1_toggle+1
  2406  0125                     l1420:	
  2407                           
  2408                           ;switch1.c: 81: }
  2409                           ;switch1.c: 82: }
  2410                           ;switch1.c: 83: switch1_up = 0;
  2411  0125  0020               	movlb	0	; select bank0
  2412  0126  01BE               	clrf	_switch1_up
  2413  0127  01BF               	clrf	_switch1_up+1
  2414                           
  2415                           ;switch1.c: 84: } else if (switch1_pressed >= 25) {
  2416  0128  0008               	return
  2417  0129                     l1422:	
  2418  0129  0829               	movf	_switch1_pressed+1,w
  2419  012A  3A80               	xorlw	128
  2420  012B  00CB               	movwf	??_updateSwitch1
  2421  012C  3080               	movlw	128
  2422  012D  024B               	subwf	??_updateSwitch1,w
  2423  012E  1D03               	skipz
  2424  012F  2932               	goto	u895
  2425  0130  3019               	movlw	25
  2426  0131  0228               	subwf	_switch1_pressed,w
  2427  0132                     u895:	
  2428  0132  1C03               	skipc
  2429  0133  0008               	return
  2430                           
  2431                           ;switch1.c: 85: if (switch1_toggle == 1) {
  2432  0134  0020               	movlb	0	; select bank0
  2433  0135  032A               	decf	_switch1_toggle,w
  2434  0136  042B               	iorwf	_switch1_toggle+1,w
  2435  0137  1D03               	btfss	3,2
  2436  0138  293E               	goto	l1428
  2437                           
  2438                           ;switch1.c: 86: setSwitch1State(switch1_turning_on);
  2439  0139  082D               	movf	_switch1_turning_on+1,w
  2440  013A  00CA               	movwf	setSwitch1State@f_state+1
  2441  013B  082C               	movf	_switch1_turning_on,w
  2442  013C  00C9               	movwf	setSwitch1State@f_state
  2443  013D  21E2               	fcall	_setSwitch1State
  2444  013E                     l1428:	
  2445                           
  2446                           ;switch1.c: 87: }
  2447                           ;switch1.c: 88: LATAbits.LATA2 = switch1_state;
  2448  013E  0020               	movlb	0	; select bank0
  2449  013F  0C3C               	rrf	_switch1_state,w
  2450  0140  0022               	movlb	2	; select bank2
  2451  0141  1C03               	skipc
  2452  0142  110C               	bcf	12,2	;volatile
  2453  0143  1803               	skipnc
  2454  0144  150C               	bsf	12,2	;volatile
  2455                           
  2456                           ;switch1.c: 89: switch1_turning_on = 0;
  2457  0145  0020               	movlb	0	; select bank0
  2458  0146  01AC               	clrf	_switch1_turning_on
  2459  0147  01AD               	clrf	_switch1_turning_on+1
  2460                           
  2461                           ;switch1.c: 90: switch1_toggle = 0;
  2462  0148  01AA               	clrf	_switch1_toggle
  2463  0149  01AB               	clrf	_switch1_toggle+1
  2464                           
  2465                           ;switch1.c: 91: switch1_up = 1;
  2466  014A  3001               	movlw	1
  2467  014B  00BE               	movwf	_switch1_up
  2468  014C  3000               	movlw	0
  2469  014D  00BF               	movwf	_switch1_up+1
  2470                           
  2471                           ;switch1.c: 92: switch1_down = 0;
  2472  014E  01A6               	clrf	_switch1_down
  2473  014F  01A7               	clrf	_switch1_down+1
  2474                           
  2475                           ;switch1.c: 93: switch1_pressed = 25;
  2476  0150  3019               	movlw	25
  2477  0151  00A8               	movwf	_switch1_pressed
  2478  0152  3000               	movlw	0
  2479  0153  00A9               	movwf	_switch1_pressed+1
  2480  0154  0008               	return
  2481  0155                     __end_of_updateSwitch1:	
  2482                           
  2483                           	psect	text3
  2484  033D                     __ptext3:	
  2485 ;; *************** function _initSwitch2 *****************
  2486 ;; Defined at:
  2487 ;;		line 24 in file "switch2.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;		None
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  initState       2    7[BANK0 ] int 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMMON   BANK0   BANK1
  2501 ;;      Params:         0       0       0
  2502 ;;      Locals:         0       2       0
  2503 ;;      Temps:          0       0       0
  2504 ;;      Totals:         0       2       0
  2505 ;;Total ram usage:        2 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    6
  2508 ;; This function calls:
  2509 ;;		_getSwitch2State
  2510 ;;		_setSwitch2State
  2511 ;; This function is called by:
  2512 ;;		_main
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           
  2517                           ;psect for function _initSwitch2
  2518  033D                     _initSwitch2:	
  2519                           
  2520                           ;switch2.c: 25: int initState = getSwitch2State();
  2521                           
  2522                           ;incstack = 0
  2523                           ; Regs used in _initSwitch2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2524  033D  2349               	fcall	_getSwitch2State
  2525  033E  0020               	movlb	0	; select bank0
  2526  033F  0846               	movf	?_getSwitch2State+1,w
  2527  0340  00CC               	movwf	initSwitch2@initState+1
  2528  0341  0845               	movf	?_getSwitch2State,w
  2529  0342  00CB               	movwf	initSwitch2@initState
  2530                           
  2531                           ;switch2.c: 26: setSwitch2State(initState);
  2532  0343  084C               	movf	initSwitch2@initState+1,w
  2533  0344  00CA               	movwf	setSwitch2State@f_state+1
  2534  0345  084B               	movf	initSwitch2@initState,w
  2535  0346  00C9               	movwf	setSwitch2State@f_state
  2536  0347  21A8               	fcall	_setSwitch2State
  2537  0348  0008               	return
  2538  0349                     __end_of_initSwitch2:	
  2539                           
  2540                           	psect	text4
  2541  01A8                     __ptext4:	
  2542 ;; *************** function _setSwitch2State *****************
  2543 ;; Defined at:
  2544 ;;		line 98 in file "switch2.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;  f_state         2    5[BANK0 ] int 
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1
  2558 ;;      Params:         0       2       0
  2559 ;;      Locals:         0       0       0
  2560 ;;      Temps:          0       0       0
  2561 ;;      Totals:         0       2       0
  2562 ;;Total ram usage:        2 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    5
  2565 ;; This function calls:
  2566 ;;		_updateSwitch2State
  2567 ;;		_wait_ms
  2568 ;; This function is called by:
  2569 ;;		_updateSwitch1
  2570 ;;		_initSwitch2
  2571 ;;		_updateSwitch2
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           
  2576                           ;psect for function _setSwitch2State
  2577  01A8                     _setSwitch2State:	
  2578                           
  2579                           ;switch2.c: 99: if (switch2_state == f_state) {return;}
  2580                           
  2581                           ;incstack = 0
  2582                           ; Regs used in _setSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2583  01A8  0020               	movlb	0	; select bank0
  2584  01A9  084A               	movf	setSwitch2State@f_state+1,w
  2585  01AA  0641               	xorwf	_switch2_state+1,w
  2586  01AB  1D03               	skipz
  2587  01AC  29AF               	goto	u785
  2588  01AD  0849               	movf	setSwitch2State@f_state,w
  2589  01AE  0640               	xorwf	_switch2_state,w
  2590  01AF                     u785:	
  2591  01AF  1903               	btfsc	3,2
  2592  01B0  0008               	return
  2593                           
  2594                           ;switch2.c: 100: switch2_state = f_state;
  2595  01B1  084A               	movf	setSwitch2State@f_state+1,w
  2596  01B2  00C1               	movwf	_switch2_state+1
  2597  01B3  0849               	movf	setSwitch2State@f_state,w
  2598  01B4  00C0               	movwf	_switch2_state
  2599                           
  2600                           ;switch2.c: 101: LATCbits.LATC5 = f_state;
  2601  01B5  0C49               	rrf	setSwitch2State@f_state,w
  2602  01B6  0022               	movlb	2	; select bank2
  2603  01B7  1C03               	skipc
  2604  01B8  128E               	bcf	14,5	;volatile
  2605  01B9  1803               	skipnc
  2606  01BA  168E               	bsf	14,5	;volatile
  2607                           
  2608                           ;switch2.c: 102: LATCbits.LATC0 = f_state;
  2609  01BB  0020               	movlb	0	; select bank0
  2610  01BC  0C49               	rrf	setSwitch2State@f_state,w
  2611  01BD  0022               	movlb	2	; select bank2
  2612  01BE  1C03               	skipc
  2613  01BF  100E               	bcf	14,0	;volatile
  2614  01C0  1803               	skipnc
  2615  01C1  140E               	bsf	14,0	;volatile
  2616                           
  2617                           ;switch2.c: 103: LATCbits.LATC4 = !f_state;
  2618  01C2  0020               	movlb	0	; select bank0
  2619  01C3  0849               	movf	setSwitch2State@f_state,w
  2620  01C4  044A               	iorwf	setSwitch2State@f_state+1,w
  2621  01C5  1D03               	btfss	3,2
  2622  01C6  29CA               	goto	u790
  2623  01C7  0022               	movlb	2	; select bank2
  2624  01C8  160E               	bsf	14,4	;volatile
  2625  01C9  29CC               	goto	l1370
  2626  01CA                     u790:	
  2627  01CA  0022               	movlb	2	; select bank2
  2628  01CB  120E               	bcf	14,4	;volatile
  2629  01CC                     l1370:	
  2630                           
  2631                           ;switch2.c: 105: wait_ms(20);
  2632  01CC  3014               	movlw	20
  2633  01CD  0020               	movlb	0	; select bank0
  2634  01CE  00C4               	movwf	wait_ms@time
  2635  01CF  3000               	movlw	0
  2636  01D0  00C5               	movwf	wait_ms@time+1
  2637  01D1  227F               	fcall	_wait_ms
  2638                           
  2639                           ;switch2.c: 107: LATCbits.LATC0 = 0;
  2640  01D2  0022               	movlb	2	; select bank2
  2641  01D3  100E               	bcf	14,0	;volatile
  2642                           
  2643                           ;switch2.c: 108: LATCbits.LATC4 = 0;
  2644  01D4  120E               	bcf	14,4	;volatile
  2645                           
  2646                           ;switch2.c: 110: updateSwitch2State(switch2_state);
  2647  01D5  0020               	movlb	0	; select bank0
  2648  01D6  0841               	movf	_switch2_state+1,w
  2649  01D7  00C8               	movwf	updateSwitch2State@state+1
  2650  01D8  0840               	movf	_switch2_state,w
  2651  01D9  00C7               	movwf	updateSwitch2State@state
  2652  01DA  2323               	fcall	_updateSwitch2State
  2653                           
  2654                           ;switch2.c: 111: wait_ms(20);
  2655  01DB  3014               	movlw	20
  2656  01DC  0020               	movlb	0	; select bank0
  2657  01DD  00C4               	movwf	wait_ms@time
  2658  01DE  3000               	movlw	0
  2659  01DF  00C5               	movwf	wait_ms@time+1
  2660  01E0  227F               	fcall	_wait_ms
  2661  01E1  0008               	return
  2662  01E2                     __end_of_setSwitch2State:	
  2663                           
  2664                           	psect	text5
  2665  0323                     __ptext5:	
  2666 ;; *************** function _updateSwitch2State *****************
  2667 ;; Defined at:
  2668 ;;		line 65 in file "state_manager.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;  state           2    3[BANK0 ] int 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;		None
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMMON   BANK0   BANK1
  2682 ;;      Params:         0       2       0
  2683 ;;      Locals:         0       0       0
  2684 ;;      Temps:          0       0       0
  2685 ;;      Totals:         0       2       0
  2686 ;;Total ram usage:        2 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    4
  2689 ;; This function calls:
  2690 ;;		_saveState
  2691 ;; This function is called by:
  2692 ;;		_setSwitch2State
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           
  2697                           ;psect for function _updateSwitch2State
  2698  0323                     _updateSwitch2State:	
  2699                           
  2700                           ;state_manager.c: 66: if (state != 1) {state = 0;}
  2701                           
  2702                           ;incstack = 0
  2703                           ; Regs used in _updateSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2704  0323  0020               	movlb	0	; select bank0
  2705  0324  0347               	decf	updateSwitch2State@state,w
  2706  0325  0448               	iorwf	updateSwitch2State@state+1,w
  2707  0326  1903               	btfsc	3,2
  2708  0327  2B2A               	goto	l1318
  2709  0328  01C7               	clrf	updateSwitch2State@state
  2710  0329  01C8               	clrf	updateSwitch2State@state+1
  2711  032A                     l1318:	
  2712                           
  2713                           ;state_manager.c: 68: pedalState.switch2 = state;
  2714  032A  0848               	movf	updateSwitch2State@state+1,w
  2715  032B  00B9               	movwf	_pedalState+3
  2716  032C  0847               	movf	updateSwitch2State@state,w
  2717  032D  00B8               	movwf	_pedalState+2
  2718                           
  2719                           ;state_manager.c: 69: saveState();
  2720  032E  2313               	fcall	_saveState
  2721  032F  0008               	return
  2722  0330                     __end_of_updateSwitch2State:	
  2723                           
  2724                           	psect	text6
  2725  0349                     __ptext6:	
  2726 ;; *************** function _getSwitch2State *****************
  2727 ;; Defined at:
  2728 ;;		line 49 in file "state_manager.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;		None
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;		None
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  2    1[BANK0 ] int 
  2735 ;; Registers used:
  2736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMMON   BANK0   BANK1
  2742 ;;      Params:         0       2       0
  2743 ;;      Locals:         0       0       0
  2744 ;;      Temps:          0       0       0
  2745 ;;      Totals:         0       2       0
  2746 ;;Total ram usage:        2 bytes
  2747 ;; Hardware stack levels used:    1
  2748 ;; Hardware stack levels required when called:    5
  2749 ;; This function calls:
  2750 ;;		_initStateManager
  2751 ;; This function is called by:
  2752 ;;		_initSwitch2
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           
  2757                           ;psect for function _getSwitch2State
  2758  0349                     _getSwitch2State:	
  2759                           
  2760                           ;state_manager.c: 50: if (!isInitialized) {
  2761                           
  2762                           ;incstack = 0
  2763                           ; Regs used in _getSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2764  0349  0020               	movlb	0	; select bank0
  2765  034A  0824               	movf	_isInitialized,w
  2766  034B  0425               	iorwf	_isInitialized+1,w
  2767  034C  1D03               	btfss	3,2
  2768  034D  2B4F               	goto	l1332
  2769                           
  2770                           ;state_manager.c: 51: initStateManager();
  2771  034E  238F               	fcall	_initStateManager
  2772  034F                     l1332:	
  2773                           
  2774                           ;state_manager.c: 52: }
  2775                           ;state_manager.c: 53: return pedalState.switch2;
  2776  034F  0020               	movlb	0	; select bank0
  2777  0350  0839               	movf	_pedalState+3,w
  2778  0351  00C6               	movwf	?_getSwitch2State+1
  2779  0352  0838               	movf	_pedalState+2,w
  2780  0353  00C5               	movwf	?_getSwitch2State
  2781  0354  0008               	return
  2782  0355                     __end_of_getSwitch2State:	
  2783                           
  2784                           	psect	text7
  2785  038F                     __ptext7:	
  2786 ;; *************** function _initStateManager *****************
  2787 ;; Defined at:
  2788 ;;		line 18 in file "state_manager.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;		None
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;		None
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  1    wreg      void 
  2795 ;; Registers used:
  2796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMMON   BANK0   BANK1
  2802 ;;      Params:         0       0       0
  2803 ;;      Locals:         0       0       0
  2804 ;;      Temps:          0       0       0
  2805 ;;      Totals:         0       0       0
  2806 ;;Total ram usage:        0 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    4
  2809 ;; This function calls:
  2810 ;;		_getCurrentState
  2811 ;; This function is called by:
  2812 ;;		_getSwitch2State
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           
  2817                           ;psect for function _initStateManager
  2818  038F                     _initStateManager:	
  2819                           
  2820                           ;state_manager.c: 19: isInitialized = 0;
  2821                           
  2822                           ;incstack = 0
  2823                           ; Regs used in _initStateManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2824  038F  0020               	movlb	0	; select bank0
  2825  0390  01A4               	clrf	_isInitialized
  2826  0391  01A5               	clrf	_isInitialized+1
  2827                           
  2828                           ;state_manager.c: 20: getCurrentState();
  2829  0392  22A7               	fcall	_getCurrentState
  2830  0393  0008               	return
  2831  0394                     __end_of_initStateManager:	
  2832                           
  2833                           	psect	text8
  2834  0355                     __ptext8:	
  2835 ;; *************** function _initSwitch1 *****************
  2836 ;; Defined at:
  2837 ;;		line 24 in file "switch1.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;		None
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  initState       2    7[BANK0 ] int 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      void 
  2844 ;; Registers used:
  2845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMMON   BANK0   BANK1
  2851 ;;      Params:         0       0       0
  2852 ;;      Locals:         0       2       0
  2853 ;;      Temps:          0       0       0
  2854 ;;      Totals:         0       2       0
  2855 ;;Total ram usage:        2 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    6
  2858 ;; This function calls:
  2859 ;;		_getSwitch1State
  2860 ;;		_setSwitch1State
  2861 ;; This function is called by:
  2862 ;;		_main
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           
  2867                           ;psect for function _initSwitch1
  2868  0355                     _initSwitch1:	
  2869                           
  2870                           ;switch1.c: 25: int initState = getSwitch1State();
  2871                           
  2872                           ;incstack = 0
  2873                           ; Regs used in _initSwitch1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2874  0355  237C               	fcall	_getSwitch1State
  2875  0356  0020               	movlb	0	; select bank0
  2876  0357  0846               	movf	?_getSwitch1State+1,w
  2877  0358  00CC               	movwf	initSwitch1@initState+1
  2878  0359  0845               	movf	?_getSwitch1State,w
  2879  035A  00CB               	movwf	initSwitch1@initState
  2880                           
  2881                           ;switch1.c: 26: setSwitch1State(initState);
  2882  035B  084C               	movf	initSwitch1@initState+1,w
  2883  035C  00CA               	movwf	setSwitch1State@f_state+1
  2884  035D  084B               	movf	initSwitch1@initState,w
  2885  035E  00C9               	movwf	setSwitch1State@f_state
  2886  035F  21E2               	fcall	_setSwitch1State
  2887  0360  0008               	return
  2888  0361                     __end_of_initSwitch1:	
  2889                           
  2890                           	psect	text9
  2891  01E2                     __ptext9:	
  2892 ;; *************** function _setSwitch1State *****************
  2893 ;; Defined at:
  2894 ;;		line 97 in file "switch1.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  f_state         2    5[BANK0 ] int 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMMON   BANK0   BANK1
  2908 ;;      Params:         0       2       0
  2909 ;;      Locals:         0       0       0
  2910 ;;      Temps:          0       0       0
  2911 ;;      Totals:         0       2       0
  2912 ;;Total ram usage:        2 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    5
  2915 ;; This function calls:
  2916 ;;		_updateSwitch1State
  2917 ;;		_wait_ms
  2918 ;; This function is called by:
  2919 ;;		_initSwitch1
  2920 ;;		_updateSwitch1
  2921 ;;		_updateSwitch2
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           
  2926                           ;psect for function _setSwitch1State
  2927  01E2                     _setSwitch1State:	
  2928                           
  2929                           ;switch1.c: 98: if (switch1_state == f_state) {return;}
  2930                           
  2931                           ;incstack = 0
  2932                           ; Regs used in _setSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2933  01E2  0020               	movlb	0	; select bank0
  2934  01E3  084A               	movf	setSwitch1State@f_state+1,w
  2935  01E4  063D               	xorwf	_switch1_state+1,w
  2936  01E5  1D03               	skipz
  2937  01E6  29E9               	goto	u755
  2938  01E7  0849               	movf	setSwitch1State@f_state,w
  2939  01E8  063C               	xorwf	_switch1_state,w
  2940  01E9                     u755:	
  2941  01E9  1903               	btfsc	3,2
  2942  01EA  0008               	return
  2943                           
  2944                           ;switch1.c: 99: switch1_state = f_state;
  2945  01EB  084A               	movf	setSwitch1State@f_state+1,w
  2946  01EC  00BD               	movwf	_switch1_state+1
  2947  01ED  0849               	movf	setSwitch1State@f_state,w
  2948  01EE  00BC               	movwf	_switch1_state
  2949                           
  2950                           ;switch1.c: 100: LATAbits.LATA2 = f_state;
  2951  01EF  0C49               	rrf	setSwitch1State@f_state,w
  2952  01F0  0022               	movlb	2	; select bank2
  2953  01F1  1C03               	skipc
  2954  01F2  110C               	bcf	12,2	;volatile
  2955  01F3  1803               	skipnc
  2956  01F4  150C               	bsf	12,2	;volatile
  2957                           
  2958                           ;switch1.c: 101: LATCbits.LATC2 = f_state;
  2959  01F5  0020               	movlb	0	; select bank0
  2960  01F6  0C49               	rrf	setSwitch1State@f_state,w
  2961  01F7  0022               	movlb	2	; select bank2
  2962  01F8  1C03               	skipc
  2963  01F9  110E               	bcf	14,2	;volatile
  2964  01FA  1803               	skipnc
  2965  01FB  150E               	bsf	14,2	;volatile
  2966                           
  2967                           ;switch1.c: 102: LATCbits.LATC1 = !f_state;
  2968  01FC  0020               	movlb	0	; select bank0
  2969  01FD  0849               	movf	setSwitch1State@f_state,w
  2970  01FE  044A               	iorwf	setSwitch1State@f_state+1,w
  2971  01FF  1D03               	btfss	3,2
  2972  0200  2A04               	goto	u760
  2973  0201  0022               	movlb	2	; select bank2
  2974  0202  148E               	bsf	14,1	;volatile
  2975  0203  2A06               	goto	l1348
  2976  0204                     u760:	
  2977  0204  0022               	movlb	2	; select bank2
  2978  0205  108E               	bcf	14,1	;volatile
  2979  0206                     l1348:	
  2980                           
  2981                           ;switch1.c: 104: wait_ms(20);
  2982  0206  3014               	movlw	20
  2983  0207  0020               	movlb	0	; select bank0
  2984  0208  00C4               	movwf	wait_ms@time
  2985  0209  3000               	movlw	0
  2986  020A  00C5               	movwf	wait_ms@time+1
  2987  020B  227F               	fcall	_wait_ms
  2988                           
  2989                           ;switch1.c: 106: LATCbits.LATC2 = 0;
  2990  020C  0022               	movlb	2	; select bank2
  2991  020D  110E               	bcf	14,2	;volatile
  2992                           
  2993                           ;switch1.c: 107: LATCbits.LATC1 = 0;
  2994  020E  108E               	bcf	14,1	;volatile
  2995                           
  2996                           ;switch1.c: 109: updateSwitch1State(switch1_state);
  2997  020F  0020               	movlb	0	; select bank0
  2998  0210  083D               	movf	_switch1_state+1,w
  2999  0211  00C8               	movwf	updateSwitch1State@state+1
  3000  0212  083C               	movf	_switch1_state,w
  3001  0213  00C7               	movwf	updateSwitch1State@state
  3002  0214  2330               	fcall	_updateSwitch1State
  3003                           
  3004                           ;switch1.c: 110: wait_ms(20);
  3005  0215  3014               	movlw	20
  3006  0216  0020               	movlb	0	; select bank0
  3007  0217  00C4               	movwf	wait_ms@time
  3008  0218  3000               	movlw	0
  3009  0219  00C5               	movwf	wait_ms@time+1
  3010  021A  227F               	fcall	_wait_ms
  3011  021B  0008               	return
  3012  021C                     __end_of_setSwitch1State:	
  3013                           
  3014                           	psect	text10
  3015  027F                     __ptext10:	
  3016 ;; *************** function _wait_ms *****************
  3017 ;; Defined at:
  3018 ;;		line 23 in file "system.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  time            2    0[BANK0 ] unsigned int 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;		None
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0, pclath, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMMON   BANK0   BANK1
  3032 ;;      Params:         0       2       0
  3033 ;;      Locals:         0       0       0
  3034 ;;      Temps:          0       0       0
  3035 ;;      Totals:         0       2       0
  3036 ;;Total ram usage:        2 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    2
  3039 ;; This function calls:
  3040 ;;		___lmul
  3041 ;; This function is called by:
  3042 ;;		_setSwitch1State
  3043 ;;		_setSwitch2State
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           
  3048                           ;psect for function _wait_ms
  3049  027F                     _wait_ms:	
  3050                           
  3051                           ;system.c: 25: static long timel = 0;
  3052                           ;system.c: 26: timel = time * 1000l;
  3053                           
  3054                           ;incstack = 0
  3055                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  3056  027F  0020               	movlb	0	; select bank0
  3057  0280  0844               	movf	wait_ms@time,w
  3058  0281  00F1               	movwf	___lmul@multiplier
  3059  0282  0845               	movf	wait_ms@time+1,w
  3060  0283  00F2               	movwf	___lmul@multiplier+1
  3061  0284  01F3               	clrf	___lmul@multiplier+2
  3062  0285  01F4               	clrf	___lmul@multiplier+3
  3063  0286  3000               	movlw	0
  3064  0287  00F8               	movwf	___lmul@multiplicand+3
  3065  0288  3000               	movlw	0
  3066  0289  00F7               	movwf	___lmul@multiplicand+2
  3067  028A  3003               	movlw	3
  3068  028B  00F6               	movwf	___lmul@multiplicand+1
  3069  028C  30E8               	movlw	232
  3070  028D  00F5               	movwf	___lmul@multiplicand
  3071  028E  2250               	fcall	___lmul
  3072  028F  0874               	movf	?___lmul+3,w
  3073  0290  0020               	movlb	0	; select bank0
  3074  0291  00A3               	movwf	wait_ms@timel+3
  3075  0292  0873               	movf	?___lmul+2,w
  3076  0293  00A2               	movwf	wait_ms@timel+2
  3077  0294  0872               	movf	?___lmul+1,w
  3078  0295  00A1               	movwf	wait_ms@timel+1
  3079  0296  0871               	movf	?___lmul,w
  3080  0297  00A0               	movwf	wait_ms@timel
  3081  0298                     l71:	
  3082                           ;system.c: 27: for( ; timel; timel--);
  3083                           
  3084  0298  0823               	movf	wait_ms@timel+3,w
  3085  0299  0422               	iorwf	wait_ms@timel+2,w
  3086  029A  0421               	iorwf	wait_ms@timel+1,w
  3087  029B  0420               	iorwf	wait_ms@timel,w
  3088  029C  1903               	btfsc	3,2
  3089  029D  0008               	return
  3090  029E  30FF               	movlw	255
  3091  029F  07A0               	addwf	wait_ms@timel,f
  3092  02A0  30FF               	movlw	255
  3093  02A1  3DA1               	addwfc	wait_ms@timel+1,f
  3094  02A2  30FF               	movlw	255
  3095  02A3  3DA2               	addwfc	wait_ms@timel+2,f
  3096  02A4  30FF               	movlw	255
  3097  02A5  3DA3               	addwfc	wait_ms@timel+3,f
  3098  02A6  2A98               	goto	l71
  3099  02A7                     __end_of_wait_ms:	
  3100                           
  3101                           	psect	text11
  3102  0250                     __ptext11:	
  3103 ;; *************** function ___lmul *****************
  3104 ;; Defined at:
  3105 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  multiplier      4    1[COMMON] unsigned long 
  3108 ;;  multiplicand    4    5[COMMON] unsigned long 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;  product         4    9[COMMON] unsigned long 
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  4    1[COMMON] unsigned long 
  3113 ;; Registers used:
  3114 ;;		wreg, status,2, status,0
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMMON   BANK0   BANK1
  3120 ;;      Params:         8       0       0
  3121 ;;      Locals:         4       0       0
  3122 ;;      Temps:          0       0       0
  3123 ;;      Totals:        12       0       0
  3124 ;;Total ram usage:       12 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    1
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_wait_ms
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           
  3135                           ;psect for function ___lmul
  3136  0250                     ___lmul:	
  3137                           
  3138                           ;incstack = 0
  3139                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3140  0250  3000               	movlw	0
  3141  0251  00FC               	movwf	___lmul@product+3
  3142  0252  3000               	movlw	0
  3143  0253  00FB               	movwf	___lmul@product+2
  3144  0254  3000               	movlw	0
  3145  0255  00FA               	movwf	___lmul@product+1
  3146  0256  3000               	movlw	0
  3147  0257  00F9               	movwf	___lmul@product
  3148  0258                     l1286:	
  3149  0258  1C71               	btfss	___lmul@multiplier,0
  3150  0259  2A62               	goto	l1290
  3151  025A  0875               	movf	___lmul@multiplicand,w
  3152  025B  07F9               	addwf	___lmul@product,f
  3153  025C  0876               	movf	___lmul@multiplicand+1,w
  3154  025D  3DFA               	addwfc	___lmul@product+1,f
  3155  025E  0877               	movf	___lmul@multiplicand+2,w
  3156  025F  3DFB               	addwfc	___lmul@product+2,f
  3157  0260  0878               	movf	___lmul@multiplicand+3,w
  3158  0261  3DFC               	addwfc	___lmul@product+3,f
  3159  0262                     l1290:	
  3160  0262  3001               	movlw	1
  3161  0263                     u685:	
  3162  0263  35F5               	lslf	___lmul@multiplicand,f
  3163  0264  0DF6               	rlf	___lmul@multiplicand+1,f
  3164  0265  0DF7               	rlf	___lmul@multiplicand+2,f
  3165  0266  0DF8               	rlf	___lmul@multiplicand+3,f
  3166  0267  0B89               	decfsz	9,f
  3167  0268  2A63               	goto	u685
  3168  0269  3001               	movlw	1
  3169  026A                     u695:	
  3170  026A  36F4               	lsrf	___lmul@multiplier+3,f
  3171  026B  0CF3               	rrf	___lmul@multiplier+2,f
  3172  026C  0CF2               	rrf	___lmul@multiplier+1,f
  3173  026D  0CF1               	rrf	___lmul@multiplier,f
  3174  026E  0B89               	decfsz	9,f
  3175  026F  2A6A               	goto	u695
  3176  0270  0874               	movf	___lmul@multiplier+3,w
  3177  0271  0473               	iorwf	___lmul@multiplier+2,w
  3178  0272  0472               	iorwf	___lmul@multiplier+1,w
  3179  0273  0471               	iorwf	___lmul@multiplier,w
  3180  0274  1D03               	skipz
  3181  0275  2A58               	goto	l1286
  3182  0276  087C               	movf	___lmul@product+3,w
  3183  0277  00F4               	movwf	?___lmul+3
  3184  0278  087B               	movf	___lmul@product+2,w
  3185  0279  00F3               	movwf	?___lmul+2
  3186  027A  087A               	movf	___lmul@product+1,w
  3187  027B  00F2               	movwf	?___lmul+1
  3188  027C  0879               	movf	___lmul@product,w
  3189  027D  00F1               	movwf	?___lmul
  3190  027E  0008               	return
  3191  027F                     __end_of___lmul:	
  3192                           
  3193                           	psect	text12
  3194  0330                     __ptext12:	
  3195 ;; *************** function _updateSwitch1State *****************
  3196 ;; Defined at:
  3197 ;;		line 57 in file "state_manager.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;  state           2    3[BANK0 ] int 
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;		None
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      void 
  3204 ;; Registers used:
  3205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMMON   BANK0   BANK1
  3211 ;;      Params:         0       2       0
  3212 ;;      Locals:         0       0       0
  3213 ;;      Temps:          0       0       0
  3214 ;;      Totals:         0       2       0
  3215 ;;Total ram usage:        2 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:    4
  3218 ;; This function calls:
  3219 ;;		_saveState
  3220 ;; This function is called by:
  3221 ;;		_setSwitch1State
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           
  3226                           ;psect for function _updateSwitch1State
  3227  0330                     _updateSwitch1State:	
  3228                           
  3229                           ;state_manager.c: 58: if (state != 1) {state = 0;}
  3230                           
  3231                           ;incstack = 0
  3232                           ; Regs used in _updateSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3233  0330  0020               	movlb	0	; select bank0
  3234  0331  0347               	decf	updateSwitch1State@state,w
  3235  0332  0448               	iorwf	updateSwitch1State@state+1,w
  3236  0333  1903               	btfsc	3,2
  3237  0334  2B37               	goto	l1310
  3238  0335  01C7               	clrf	updateSwitch1State@state
  3239  0336  01C8               	clrf	updateSwitch1State@state+1
  3240  0337                     l1310:	
  3241                           
  3242                           ;state_manager.c: 60: pedalState.switch1 = state;
  3243  0337  0848               	movf	updateSwitch1State@state+1,w
  3244  0338  00B7               	movwf	_pedalState+1
  3245  0339  0847               	movf	updateSwitch1State@state,w
  3246  033A  00B6               	movwf	_pedalState
  3247                           
  3248                           ;state_manager.c: 61: saveState();
  3249  033B  2313               	fcall	_saveState
  3250  033C  0008               	return
  3251  033D                     __end_of_updateSwitch1State:	
  3252                           
  3253                           	psect	text13
  3254  0313                     __ptext13:	
  3255 ;; *************** function _saveState *****************
  3256 ;; Defined at:
  3257 ;;		line 72 in file "state_manager.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;		None
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  r               1   12[COMMON] unsigned char 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMMON   BANK0   BANK1
  3271 ;;      Params:         0       0       0
  3272 ;;      Locals:         1       0       0
  3273 ;;      Temps:          0       3       0
  3274 ;;      Totals:         1       3       0
  3275 ;;Total ram usage:        4 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    3
  3278 ;; This function calls:
  3279 ;;		_HEF_ByteArrayWrite
  3280 ;; This function is called by:
  3281 ;;		_updateSwitch1State
  3282 ;;		_updateSwitch2State
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           
  3287                           ;psect for function _saveState
  3288  0313                     _saveState:	
  3289                           
  3290                           ;state_manager.c: 73: uint8_t r;
  3291                           ;state_manager.c: 74: r = HEF_ByteArrayWrite(1, (void *) &pedalState, sizeof (pedalState
      +                          ));
  3292                           
  3293                           ;incstack = 0
  3294                           ; Regs used in _saveState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3295  0313  3036               	movlw	(low (_pedalState| 0))& (0+255)
  3296  0314  0020               	movlb	0	; select bank0
  3297  0315  00C4               	movwf	??_saveState
  3298  0316  0844               	movf	??_saveState,w
  3299  0317  00F4               	movwf	HEF_ByteArrayWrite@byteArray
  3300  0318  3004               	movlw	4
  3301  0319  00C5               	movwf	??_saveState+1
  3302  031A  0845               	movf	??_saveState+1,w
  3303  031B  00F5               	movwf	HEF_ByteArrayWrite@count
  3304  031C  3001               	movlw	1
  3305  031D  2155               	fcall	_HEF_ByteArrayWrite
  3306  031E  0020               	movlb	0	; select bank0
  3307  031F  00C6               	movwf	??_saveState+2
  3308  0320  0846               	movf	??_saveState+2,w
  3309  0321  00FC               	movwf	saveState@r
  3310  0322  0008               	return
  3311  0323                     __end_of_saveState:	
  3312                           
  3313                           	psect	text14
  3314  0155                     __ptext14:	
  3315 ;; *************** function _HEF_ByteArrayWrite *****************
  3316 ;; Defined at:
  3317 ;;		line 12 in file "HEF.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  block           1    wreg     unsigned char 
  3320 ;;  byteArray       1    4[COMMON] PTR unsigned char 
  3321 ;;		 -> pedalState(4), 
  3322 ;;  count           1    5[COMMON] unsigned char 
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;  block           1    9[COMMON] unsigned char 
  3325 ;;  blockAddr       2   10[COMMON] unsigned int 
  3326 ;;  GIEBitValue     1    8[COMMON] unsigned char 
  3327 ;;  i               1    0        unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      char 
  3330 ;; Registers used:
  3331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1
  3337 ;;      Params:         2       0       0
  3338 ;;      Locals:         4       0       0
  3339 ;;      Temps:          2       0       0
  3340 ;;      Totals:         8       0       0
  3341 ;;Total ram usage:        8 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    2
  3344 ;; This function calls:
  3345 ;;		_FLASH_EraseBlock
  3346 ;; This function is called by:
  3347 ;;		_saveState
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           
  3352                           ;psect for function _HEF_ByteArrayWrite
  3353  0155                     _HEF_ByteArrayWrite:	
  3354                           
  3355                           ;incstack = 0
  3356                           ; Regs used in _HEF_ByteArrayWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3357                           ;HEF_ByteArrayWrite@block stored from wreg
  3358  0155  00F9               	movwf	HEF_ByteArrayWrite@block
  3359                           
  3360                           ;HEF.c: 13: uint16_t blockAddr;
  3361                           ;HEF.c: 14: uint8_t GIEBitValue = INTCONbits.GIE;
  3362  0156  3000               	movlw	0
  3363  0157  1B8B               	btfsc	11,7	;volatile
  3364  0158  3001               	movlw	1
  3365  0159  00F8               	movwf	HEF_ByteArrayWrite@GIEBitValue
  3366                           
  3367                           ;HEF.c: 15: uint8_t i;
  3368                           ;HEF.c: 17: if ( ( block >= 128 / 32) || ( count > 32))
  3369  015A  3004               	movlw	4
  3370  015B  0279               	subwf	HEF_ByteArrayWrite@block,w
  3371  015C  1803               	skipnc
  3372  015D  2962               	goto	l1196
  3373  015E  3021               	movlw	33
  3374  015F  0275               	subwf	HEF_ByteArrayWrite@count,w
  3375  0160  1C03               	skipc
  3376  0161  2964               	goto	l1200
  3377  0162                     l1196:	
  3378                           
  3379                           ;HEF.c: 18: return -1;
  3380  0162  30FF               	movlw	255
  3381  0163  0008               	return
  3382  0164                     l1200:	
  3383                           
  3384                           ;HEF.c: 20: blockAddr = 16384 - 128 + block * 32;
  3385  0164  0879               	movf	HEF_ByteArrayWrite@block,w
  3386  0165  00F6               	movwf	??_HEF_ByteArrayWrite
  3387  0166  01F7               	clrf	??_HEF_ByteArrayWrite+1
  3388  0167  3005               	movlw	5
  3389  0168                     u575:	
  3390  0168  35F6               	lslf	??_HEF_ByteArrayWrite,f
  3391  0169  0DF7               	rlf	??_HEF_ByteArrayWrite+1,f
  3392  016A  0B89               	decfsz	9,f
  3393  016B  2968               	goto	u575
  3394  016C  0876               	movf	??_HEF_ByteArrayWrite,w
  3395  016D  3E80               	addlw	128
  3396  016E  00FA               	movwf	HEF_ByteArrayWrite@blockAddr
  3397  016F  303F               	movlw	63
  3398  0170  3D77               	addwfc	??_HEF_ByteArrayWrite+1,w
  3399  0171  00FB               	movwf	HEF_ByteArrayWrite@blockAddr+1
  3400                           
  3401                           ;HEF.c: 21: INTCONbits.GIE = 0;
  3402  0172  138B               	bcf	11,7	;volatile
  3403                           
  3404                           ;HEF.c: 23: FLASH_EraseBlock( blockAddr);
  3405  0173  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3406  0174  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  3407  0175  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3408  0176  00F1               	movwf	FLASH_EraseBlock@startAddr
  3409  0177  22C9               	fcall	_FLASH_EraseBlock
  3410                           
  3411                           ;HEF.c: 26: PMCON1bits.CFGS = 0;
  3412  0178  0023               	movlb	3	; select bank3
  3413  0179  1315               	bcf	21,6	;volatile
  3414                           
  3415                           ;HEF.c: 27: PMCON1bits.WREN = 1;
  3416  017A  1515               	bsf	21,2	;volatile
  3417                           
  3418                           ;HEF.c: 28: PMCON1bits.LWLO = 1;
  3419  017B  1695               	bsf	21,5	;volatile
  3420  017C                     l1234:	
  3421                           ;HEF.c: 30: while ( count > 0) {
  3422                           
  3423  017C  0875               	movf	HEF_ByteArrayWrite@count,w
  3424  017D  1903               	btfsc	3,2
  3425  017E  299F               	goto	l141
  3426                           
  3427                           ;HEF.c: 31: PMADR = blockAddr++;
  3428  017F  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3429  0180  0023               	movlb	3	; select bank3
  3430  0181  0092               	movwf	18	;volatile
  3431  0182  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3432  0183  0091               	movwf	17	;volatile
  3433  0184  3001               	movlw	1
  3434  0185  07FA               	addwf	HEF_ByteArrayWrite@blockAddr,f
  3435  0186  3000               	movlw	0
  3436  0187  3DFB               	addwfc	HEF_ByteArrayWrite@blockAddr+1,f
  3437                           
  3438                           ;HEF.c: 33: PMDATL = *byteArray++;
  3439  0188  0874               	movf	HEF_ByteArrayWrite@byteArray,w
  3440  0189  0086               	movwf	6
  3441  018A  0187               	clrf	7
  3442  018B  0801               	movf	1,w
  3443  018C  0093               	movwf	19	;volatile
  3444  018D  3001               	movlw	1
  3445  018E  00F6               	movwf	??_HEF_ByteArrayWrite
  3446  018F  0876               	movf	??_HEF_ByteArrayWrite,w
  3447  0190  07F4               	addwf	HEF_ByteArrayWrite@byteArray,f
  3448                           
  3449                           ;HEF.c: 34: PMDATH = 0;
  3450  0191  0194               	clrf	20	;volatile
  3451                           
  3452                           ;HEF.c: 35: if ( count == 1) {
  3453  0192  0375               	decf	HEF_ByteArrayWrite@count,w
  3454  0193  1903               	btfsc	3,2
  3455                           
  3456                           ;HEF.c: 36: PMCON1bits.LWLO = 0;
  3457  0194  1295               	bcf	21,5	;volatile
  3458                           
  3459                           ;HEF.c: 37: }
  3460                           ;HEF.c: 39: PMCON2 = 0x55;
  3461  0195  3055               	movlw	85
  3462  0196  0096               	movwf	22	;volsfr
  3463                           
  3464                           ;HEF.c: 40: PMCON2 = 0xAA;
  3465  0197  30AA               	movlw	170
  3466  0198  0096               	movwf	22	;volsfr
  3467                           
  3468                           ;HEF.c: 41: PMCON1bits.WR = 1;
  3469  0199  1495               	bsf	21,1	;volatile
  3470                           
  3471                           ;HEF.c: 42: __nop();
  3472  019A  0000               	nop
  3473                           
  3474                           ;HEF.c: 43: __nop();
  3475  019B  0000               	nop
  3476                           
  3477                           ;HEF.c: 44: count--;
  3478  019C  3001               	movlw	1
  3479  019D  02F5               	subwf	HEF_ByteArrayWrite@count,f
  3480  019E  297C               	goto	l1234
  3481  019F                     l141:	
  3482                           
  3483                           ;HEF.c: 45: }
  3484                           ;HEF.c: 47: PMCON1bits.WREN = 0;
  3485  019F  0023               	movlb	3	; select bank3
  3486  01A0  1115               	bcf	21,2	;volatile
  3487                           
  3488                           ;HEF.c: 48: INTCONbits.GIE = GIEBitValue;
  3489  01A1  0C78               	rrf	HEF_ByteArrayWrite@GIEBitValue,w
  3490  01A2  1C03               	skipc
  3491  01A3  138B               	bcf	11,7	;volatile
  3492  01A4  1803               	skipnc
  3493  01A5  178B               	bsf	11,7	;volatile
  3494                           
  3495                           ;HEF.c: 50: return 0;
  3496  01A6  3000               	movlw	0
  3497  01A7  0008               	return
  3498  01A8                     __end_of_HEF_ByteArrayWrite:	
  3499                           
  3500                           	psect	text15
  3501  02C9                     __ptext15:	
  3502 ;; *************** function _FLASH_EraseBlock *****************
  3503 ;; Defined at:
  3504 ;;		line 141 in file "mcc_generated_files/memory.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  startAddr       2    1[COMMON] unsigned int 
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  1    wreg      void 
  3511 ;; Registers used:
  3512 ;;		wreg, status,2, status,0
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMMON   BANK0   BANK1
  3518 ;;      Params:         2       0       0
  3519 ;;      Locals:         1       0       0
  3520 ;;      Temps:          0       0       0
  3521 ;;      Totals:         3       0       0
  3522 ;;Total ram usage:        3 bytes
  3523 ;; Hardware stack levels used:    1
  3524 ;; Hardware stack levels required when called:    1
  3525 ;; This function calls:
  3526 ;;		Nothing
  3527 ;; This function is called by:
  3528 ;;		_HEF_ByteArrayWrite
  3529 ;;		_FLASH_WriteBlock
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           
  3534                           ;psect for function _FLASH_EraseBlock
  3535  02C9                     _FLASH_EraseBlock:	
  3536                           
  3537                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
  3538                           
  3539                           ;incstack = 0
  3540                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  3541  02C9  3000               	movlw	0
  3542  02CA  1B8B               	btfsc	11,7	;volatile
  3543  02CB  3001               	movlw	1
  3544  02CC  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  3545                           
  3546                           ;memory.c: 145: INTCONbits.GIE = 0;
  3547  02CD  138B               	bcf	11,7	;volatile
  3548                           
  3549                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
  3550  02CE  0871               	movf	FLASH_EraseBlock@startAddr,w
  3551  02CF  0023               	movlb	3	; select bank3
  3552  02D0  0091               	movwf	17	;volatile
  3553                           
  3554                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
  3555  02D1  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  3556  02D2  0092               	movwf	18	;volatile
  3557                           
  3558                           ;memory.c: 152: PMCON1bits.CFGS = 0;
  3559  02D3  1315               	bcf	21,6	;volatile
  3560                           
  3561                           ;memory.c: 153: PMCON1bits.FREE = 1;
  3562  02D4  1615               	bsf	21,4	;volatile
  3563                           
  3564                           ;memory.c: 154: PMCON1bits.WREN = 1;
  3565  02D5  1515               	bsf	21,2	;volatile
  3566                           
  3567                           ;memory.c: 157: PMCON2 = 0x55;
  3568  02D6  3055               	movlw	85
  3569  02D7  0096               	movwf	22	;volsfr
  3570                           
  3571                           ;memory.c: 158: PMCON2 = 0xAA;
  3572  02D8  30AA               	movlw	170
  3573  02D9  0096               	movwf	22	;volsfr
  3574                           
  3575                           ;memory.c: 159: PMCON1bits.WR = 1;
  3576  02DA  1495               	bsf	21,1	;volatile
  3577                           
  3578                           ;memory.c: 160: __nop();
  3579  02DB  0000               	nop
  3580                           
  3581                           ;memory.c: 161: __nop();
  3582  02DC  0000               	nop
  3583                           
  3584                           ;memory.c: 163: PMCON1bits.WREN = 0;
  3585  02DD  0023               	movlb	3	; select bank3
  3586  02DE  1115               	bcf	21,2	;volatile
  3587                           
  3588                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
  3589  02DF  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  3590  02E0  1C03               	skipc
  3591  02E1  138B               	bcf	11,7	;volatile
  3592  02E2  1803               	skipnc
  3593  02E3  178B               	bsf	11,7	;volatile
  3594  02E4  0008               	return
  3595  02E5                     __end_of_FLASH_EraseBlock:	
  3596                           
  3597                           	psect	text16
  3598  037C                     __ptext16:	
  3599 ;; *************** function _getSwitch1State *****************
  3600 ;; Defined at:
  3601 ;;		line 42 in file "state_manager.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;		None
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;		None
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  2    1[BANK0 ] int 
  3608 ;; Registers used:
  3609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMMON   BANK0   BANK1
  3615 ;;      Params:         0       2       0
  3616 ;;      Locals:         0       0       0
  3617 ;;      Temps:          0       0       0
  3618 ;;      Totals:         0       2       0
  3619 ;;Total ram usage:        2 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    4
  3622 ;; This function calls:
  3623 ;;		_getCurrentState
  3624 ;; This function is called by:
  3625 ;;		_initSwitch1
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           
  3630                           ;psect for function _getSwitch1State
  3631  037C                     _getSwitch1State:	
  3632                           
  3633                           ;state_manager.c: 43: getCurrentState();
  3634                           
  3635                           ;incstack = 0
  3636                           ; Regs used in _getSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3637  037C  22A7               	fcall	_getCurrentState
  3638                           
  3639                           ;state_manager.c: 44: return pedalState.switch1;
  3640  037D  0020               	movlb	0	; select bank0
  3641  037E  0837               	movf	_pedalState+1,w
  3642  037F  00C6               	movwf	?_getSwitch1State+1
  3643  0380  0836               	movf	_pedalState,w
  3644  0381  00C5               	movwf	?_getSwitch1State
  3645  0382  0008               	return
  3646  0383                     __end_of_getSwitch1State:	
  3647                           
  3648                           	psect	text17
  3649  02A7                     __ptext17:	
  3650 ;; *************** function _getCurrentState *****************
  3651 ;; Defined at:
  3652 ;;		line 23 in file "state_manager.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;		None
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  r               1    0[BANK0 ] unsigned char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  4  155[None  ] struct .
  3659 ;; Registers used:
  3660 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMMON   BANK0   BANK1
  3666 ;;      Params:         0       0       0
  3667 ;;      Locals:         0       1       0
  3668 ;;      Temps:          2       0       0
  3669 ;;      Totals:         2       1       0
  3670 ;;Total ram usage:        3 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    3
  3673 ;; This function calls:
  3674 ;;		_HEF_ByteArrayRead
  3675 ;; This function is called by:
  3676 ;;		_initStateManager
  3677 ;;		_getSwitch1State
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           
  3682                           ;psect for function _getCurrentState
  3683  02A7                     _getCurrentState:	
  3684                           
  3685                           ;state_manager.c: 24: if (!isInitialized) {
  3686                           
  3687                           ;incstack = 0
  3688                           ; Regs used in _getCurrentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3689  02A7  0020               	movlb	0	; select bank0
  3690  02A8  0824               	movf	_isInitialized,w
  3691  02A9  0425               	iorwf	_isInitialized+1,w
  3692  02AA  1D03               	btfss	3,2
  3693  02AB  0008               	return
  3694                           
  3695                           ;state_manager.c: 25: uint8_t r;
  3696                           ;state_manager.c: 28: r = HEF_ByteArrayRead((void *) &pedalState, 1, sizeof (pedalState)
      +                          );
  3697  02AC  01F4               	clrf	HEF_ByteArrayRead@block
  3698  02AD  0AF4               	incf	HEF_ByteArrayRead@block,f
  3699  02AE  3004               	movlw	4
  3700  02AF  00FB               	movwf	??_getCurrentState
  3701  02B0  087B               	movf	??_getCurrentState,w
  3702  02B1  00F5               	movwf	HEF_ByteArrayRead@count
  3703  02B2  3036               	movlw	(low (_pedalState| 0))& (0+255)
  3704  02B3  221C               	fcall	_HEF_ByteArrayRead
  3705  02B4  00FC               	movwf	??_getCurrentState+1
  3706  02B5  087C               	movf	??_getCurrentState+1,w
  3707  02B6  0020               	movlb	0	; select bank0
  3708  02B7  00C4               	movwf	getCurrentState@r
  3709                           
  3710                           ;state_manager.c: 30: if (pedalState.switch1 != 1) {
  3711  02B8  0336               	decf	_pedalState,w
  3712  02B9  0437               	iorwf	_pedalState+1,w
  3713  02BA  1903               	btfsc	3,2
  3714  02BB  2ABE               	goto	l1274
  3715                           
  3716                           ;state_manager.c: 31: pedalState.switch1 = 0;
  3717  02BC  01B6               	clrf	_pedalState
  3718  02BD  01B7               	clrf	_pedalState+1
  3719  02BE                     l1274:	
  3720                           
  3721                           ;state_manager.c: 32: }
  3722                           ;state_manager.c: 34: if (pedalState.switch2 != 1) {
  3723  02BE  0338               	decf	_pedalState+2,w
  3724  02BF  0439               	iorwf	_pedalState+3,w
  3725  02C0  1903               	btfsc	3,2
  3726  02C1  2AC4               	goto	l1278
  3727                           
  3728                           ;state_manager.c: 35: pedalState.switch2 = 0;
  3729  02C2  01B8               	clrf	_pedalState+2
  3730  02C3  01B9               	clrf	_pedalState+3
  3731  02C4                     l1278:	
  3732                           
  3733                           ;state_manager.c: 36: }
  3734                           ;state_manager.c: 37: isInitialized = 1;
  3735  02C4  3001               	movlw	1
  3736  02C5  00A4               	movwf	_isInitialized
  3737  02C6  3000               	movlw	0
  3738  02C7  00A5               	movwf	_isInitialized+1
  3739  02C8  0008               	return
  3740  02C9                     __end_of_getCurrentState:	
  3741                           ;state_manager.c: 38: }
  3742                           ;state_manager.c: 39: return pedalState;
  3743                           ;	Return value of _getCurrentState is never used
  3744                           
  3745                           
  3746                           	psect	text18
  3747  021C                     __ptext18:	
  3748 ;; *************** function _HEF_ByteArrayRead *****************
  3749 ;; Defined at:
  3750 ;;		line 53 in file "HEF.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  bArray          1    wreg     PTR unsigned char 
  3753 ;;		 -> pedalState(4), 
  3754 ;;  block           1    4[COMMON] unsigned char 
  3755 ;;  count           1    5[COMMON] unsigned char 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;  bArray          1   10[COMMON] PTR unsigned char 
  3758 ;;		 -> pedalState(4), 
  3759 ;;  wordAdd         2    8[COMMON] unsigned int 
  3760 ;; Return value:  Size  Location     Type
  3761 ;;                  1    wreg      char 
  3762 ;; Registers used:
  3763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3764 ;; Tracked objects:
  3765 ;;		On entry : 0/0
  3766 ;;		On exit  : 0/0
  3767 ;;		Unchanged: 0/0
  3768 ;; Data sizes:     COMMON   BANK0   BANK1
  3769 ;;      Params:         2       0       0
  3770 ;;      Locals:         3       0       0
  3771 ;;      Temps:          2       0       0
  3772 ;;      Totals:         7       0       0
  3773 ;;Total ram usage:        7 bytes
  3774 ;; Hardware stack levels used:    1
  3775 ;; Hardware stack levels required when called:    2
  3776 ;; This function calls:
  3777 ;;		_FLASH_ReadWord
  3778 ;; This function is called by:
  3779 ;;		_getCurrentState
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           
  3784                           ;psect for function _HEF_ByteArrayRead
  3785  021C                     _HEF_ByteArrayRead:	
  3786                           
  3787                           ;incstack = 0
  3788                           ; Regs used in _HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3789                           ;HEF_ByteArrayRead@bArray stored from wreg
  3790  021C  00FA               	movwf	HEF_ByteArrayRead@bArray
  3791                           
  3792                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
  3793  021D  0874               	movf	HEF_ByteArrayRead@block,w
  3794  021E  00F6               	movwf	??_HEF_ByteArrayRead
  3795  021F  01F7               	clrf	??_HEF_ByteArrayRead+1
  3796  0220  3005               	movlw	5
  3797  0221                     u605:	
  3798  0221  35F6               	lslf	??_HEF_ByteArrayRead,f
  3799  0222  0DF7               	rlf	??_HEF_ByteArrayRead+1,f
  3800  0223  0B89               	decfsz	9,f
  3801  0224  2A21               	goto	u605
  3802  0225  0876               	movf	??_HEF_ByteArrayRead,w
  3803  0226  3E80               	addlw	128
  3804  0227  00F8               	movwf	HEF_ByteArrayRead@wordAdd
  3805  0228  303F               	movlw	63
  3806  0229  3D77               	addwfc	??_HEF_ByteArrayRead+1,w
  3807  022A  00F9               	movwf	HEF_ByteArrayRead@wordAdd+1
  3808                           
  3809                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
  3810  022B  3021               	movlw	33
  3811  022C  0275               	subwf	HEF_ByteArrayRead@count,w
  3812  022D  1803               	skipnc
  3813  022E  2A33               	goto	l1248
  3814  022F  3004               	movlw	4
  3815  0230  0274               	subwf	HEF_ByteArrayRead@block,w
  3816  0231  1C03               	skipc
  3817  0232  2A4B               	goto	l1260
  3818  0233                     l1248:	
  3819                           
  3820                           ;HEF.c: 60: return -1;
  3821  0233  30FF               	movlw	255
  3822  0234  0008               	return
  3823  0235                     l1252:	
  3824                           ;HEF.c: 63: while ( count > 0)
  3825                           
  3826                           
  3827                           ;HEF.c: 64: {
  3828                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
  3829  0235  0879               	movf	HEF_ByteArrayRead@wordAdd+1,w
  3830  0236  00F2               	movwf	FLASH_ReadWord@flashAddr+1
  3831  0237  0878               	movf	HEF_ByteArrayRead@wordAdd,w
  3832  0238  00F1               	movwf	FLASH_ReadWord@flashAddr
  3833  0239  22E5               	fcall	_FLASH_ReadWord
  3834  023A  0871               	movf	?_FLASH_ReadWord,w
  3835  023B  00F6               	movwf	??_HEF_ByteArrayRead
  3836  023C  087A               	movf	HEF_ByteArrayRead@bArray,w
  3837  023D  0086               	movwf	6
  3838  023E  0187               	clrf	7
  3839  023F  0876               	movf	??_HEF_ByteArrayRead,w
  3840  0240  0081               	movwf	1
  3841  0241  3001               	movlw	1
  3842  0242  07F8               	addwf	HEF_ByteArrayRead@wordAdd,f
  3843  0243  3000               	movlw	0
  3844  0244  3DF9               	addwfc	HEF_ByteArrayRead@wordAdd+1,f
  3845  0245  3001               	movlw	1
  3846  0246  00F6               	movwf	??_HEF_ByteArrayRead
  3847  0247  0876               	movf	??_HEF_ByteArrayRead,w
  3848  0248  07FA               	addwf	HEF_ByteArrayRead@bArray,f
  3849                           
  3850                           ;HEF.c: 66: count--;
  3851  0249  3001               	movlw	1
  3852  024A  02F5               	subwf	HEF_ByteArrayRead@count,f
  3853  024B                     l1260:	
  3854  024B  0875               	movf	HEF_ByteArrayRead@count,w
  3855  024C  1D03               	btfss	3,2
  3856  024D  2A35               	goto	l1252
  3857                           
  3858                           ;HEF.c: 67: }
  3859                           ;HEF.c: 70: return 0;
  3860  024E  3000               	movlw	0
  3861  024F  0008               	return
  3862  0250                     __end_of_HEF_ByteArrayRead:	
  3863                           
  3864                           	psect	text19
  3865  02E5                     __ptext19:	
  3866 ;; *************** function _FLASH_ReadWord *****************
  3867 ;; Defined at:
  3868 ;;		line 58 in file "mcc_generated_files/memory.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;  flashAddr       2    1[COMMON] unsigned int 
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  2    1[COMMON] unsigned int 
  3875 ;; Registers used:
  3876 ;;		wreg, status,2, status,0
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1
  3882 ;;      Params:         2       0       0
  3883 ;;      Locals:         1       0       0
  3884 ;;      Temps:          0       0       0
  3885 ;;      Totals:         3       0       0
  3886 ;;Total ram usage:        3 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    1
  3889 ;; This function calls:
  3890 ;;		Nothing
  3891 ;; This function is called by:
  3892 ;;		_HEF_ByteArrayRead
  3893 ;;		_FLASH_WriteWord
  3894 ;;		_HEF_ByteRead
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           
  3899                           ;psect for function _FLASH_ReadWord
  3900  02E5                     _FLASH_ReadWord:	
  3901                           
  3902                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  3903                           
  3904                           ;incstack = 0
  3905                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3906  02E5  3000               	movlw	0
  3907  02E6  1B8B               	btfsc	11,7	;volatile
  3908  02E7  3001               	movlw	1
  3909  02E8  00F3               	movwf	FLASH_ReadWord@GIEBitValue
  3910                           
  3911                           ;memory.c: 61: INTCONbits.GIE = 0;
  3912  02E9  138B               	bcf	11,7	;volatile
  3913                           
  3914                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  3915  02EA  0871               	movf	FLASH_ReadWord@flashAddr,w
  3916  02EB  0023               	movlb	3	; select bank3
  3917  02EC  0091               	movwf	17	;volatile
  3918                           
  3919                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  3920  02ED  0872               	movf	FLASH_ReadWord@flashAddr+1,w
  3921  02EE  0092               	movwf	18	;volatile
  3922                           
  3923                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  3924  02EF  1315               	bcf	21,6	;volatile
  3925                           
  3926                           ;memory.c: 66: PMCON1bits.RD = 1;
  3927  02F0  1415               	bsf	21,0	;volatile
  3928                           
  3929                           ;memory.c: 67: __nop();
  3930  02F1  0000               	nop
  3931                           
  3932                           ;memory.c: 68: __nop();
  3933  02F2  0000               	nop
  3934                           
  3935                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  3936  02F3  0C73               	rrf	FLASH_ReadWord@GIEBitValue,w
  3937  02F4  1C03               	skipc
  3938  02F5  138B               	bcf	11,7	;volatile
  3939  02F6  1803               	skipnc
  3940  02F7  178B               	bsf	11,7	;volatile
  3941                           
  3942                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
  3943  02F8  0023               	movlb	3	; select bank3
  3944  02F9  0814               	movf	20,w	;volatile
  3945  02FA  00F2               	movwf	?_FLASH_ReadWord+1
  3946  02FB  0813               	movf	19,w	;volatile
  3947  02FC  00F1               	movwf	?_FLASH_ReadWord
  3948  02FD  0008               	return
  3949  02FE                     __end_of_FLASH_ReadWord:	
  3950                           
  3951                           	psect	text20
  3952  02FE                     __ptext20:	
  3953 ;; *************** function _InitApp *****************
  3954 ;; Defined at:
  3955 ;;		line 27 in file "user.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;		None
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;		None
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  1    wreg      void 
  3962 ;; Registers used:
  3963 ;;		wreg, status,2, status,0, pclath, cstack
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMMON   BANK0   BANK1
  3969 ;;      Params:         0       0       0
  3970 ;;      Locals:         0       0       0
  3971 ;;      Temps:          0       0       0
  3972 ;;      Totals:         0       0       0
  3973 ;;Total ram usage:        0 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    2
  3976 ;; This function calls:
  3977 ;;		_init_adc
  3978 ;; This function is called by:
  3979 ;;		_main
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           
  3984                           ;psect for function _InitApp
  3985  02FE                     _InitApp:	
  3986                           
  3987                           ;user.c: 28: TRISAbits.TRISA0 = 0;
  3988                           
  3989                           ;incstack = 0
  3990                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  3991  02FE  0021               	movlb	1	; select bank1
  3992  02FF  100C               	bcf	12,0	;volatile
  3993                           
  3994                           ;user.c: 29: TRISAbits.TRISA1 = 0;
  3995  0300  108C               	bcf	12,1	;volatile
  3996                           
  3997                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  3998  0301  110C               	bcf	12,2	;volatile
  3999                           
  4000                           ;user.c: 32: TRISAbits.TRISA4 = 1;
  4001  0302  160C               	bsf	12,4	;volatile
  4002                           
  4003                           ;user.c: 33: TRISAbits.TRISA5 = 1;
  4004  0303  168C               	bsf	12,5	;volatile
  4005                           
  4006                           ;user.c: 34: ANSELAbits.ANSA4 = 0;
  4007  0304  0023               	movlb	3	; select bank3
  4008  0305  120C               	bcf	12,4	;volatile
  4009                           
  4010                           ;user.c: 36: TRISCbits.TRISC0 = 0;
  4011  0306  0021               	movlb	1	; select bank1
  4012  0307  100E               	bcf	14,0	;volatile
  4013                           
  4014                           ;user.c: 37: TRISCbits.TRISC1 = 0;
  4015  0308  108E               	bcf	14,1	;volatile
  4016                           
  4017                           ;user.c: 38: TRISCbits.TRISC2 = 0;
  4018  0309  110E               	bcf	14,2	;volatile
  4019                           
  4020                           ;user.c: 39: TRISCbits.TRISC3 = 0;
  4021  030A  118E               	bcf	14,3	;volatile
  4022                           
  4023                           ;user.c: 40: TRISCbits.TRISC4 = 0;
  4024  030B  120E               	bcf	14,4	;volatile
  4025                           
  4026                           ;user.c: 41: TRISCbits.TRISC5 = 0;
  4027  030C  128E               	bcf	14,5	;volatile
  4028                           
  4029                           ;user.c: 43: LATCbits.LATC5 = 0;
  4030  030D  0022               	movlb	2	; select bank2
  4031  030E  128E               	bcf	14,5	;volatile
  4032                           
  4033                           ;user.c: 45: LATAbits.LATA2 = 0;
  4034  030F  110C               	bcf	12,2	;volatile
  4035                           
  4036                           ;user.c: 46: LATCbits.LATC3 = 0;
  4037  0310  118E               	bcf	14,3	;volatile
  4038                           
  4039                           ;user.c: 48: init_adc();
  4040  0311  236B               	fcall	_init_adc
  4041  0312  0008               	return
  4042  0313                     __end_of_InitApp:	
  4043                           
  4044                           	psect	text21
  4045  036B                     __ptext21:	
  4046 ;; *************** function _init_adc *****************
  4047 ;; Defined at:
  4048 ;;		line 60 in file "user.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;		None
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;		None
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      void 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMMON   BANK0   BANK1
  4062 ;;      Params:         0       0       0
  4063 ;;      Locals:         0       0       0
  4064 ;;      Temps:          0       0       0
  4065 ;;      Totals:         0       0       0
  4066 ;;Total ram usage:        0 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    1
  4069 ;; This function calls:
  4070 ;;		Nothing
  4071 ;; This function is called by:
  4072 ;;		_InitApp
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _init_adc
  4078  036B                     _init_adc:	
  4079                           
  4080                           ;user.c: 61: ADCON1bits.ADFM = 0b1;
  4081                           
  4082                           ;incstack = 0
  4083                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  4084  036B  0021               	movlb	1	; select bank1
  4085  036C  179E               	bsf	30,7	;volatile
  4086                           
  4087                           ;user.c: 62: ADCON1bits.ADCS = 0b110;
  4088  036D  081E               	movf	30,w	;volatile
  4089  036E  398F               	andlw	-113
  4090  036F  3860               	iorlw	96
  4091  0370  009E               	movwf	30	;volatile
  4092                           
  4093                           ;user.c: 63: ADCON1bits.ADPREF = 0b00;
  4094  0371  30FC               	movlw	-4
  4095  0372  059E               	andwf	30,f	;volatile
  4096                           
  4097                           ;user.c: 64: ADCON0bits.ADON = 0b1;
  4098  0373  141D               	bsf	29,0	;volatile
  4099  0374  0008               	return
  4100  0375                     __end_of_init_adc:	
  4101                           
  4102                           	psect	text22
  4103  0394                     __ptext22:	
  4104 ;; *************** function _ConfigureOscillator *****************
  4105 ;; Defined at:
  4106 ;;		line 17 in file "system.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;		None
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;		None
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  1    wreg      void 
  4113 ;; Registers used:
  4114 ;;		wreg, status,2, status,0
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMMON   BANK0   BANK1
  4120 ;;      Params:         0       0       0
  4121 ;;      Locals:         0       0       0
  4122 ;;      Temps:          0       0       0
  4123 ;;      Totals:         0       0       0
  4124 ;;Total ram usage:        0 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:    1
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_main
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           
  4135                           ;psect for function _ConfigureOscillator
  4136  0394                     _ConfigureOscillator:	
  4137                           
  4138                           ;system.c: 19: OSCCONbits.IRCF = 0b1111;
  4139                           
  4140                           ;incstack = 0
  4141                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  4142  0394  3078               	movlw	120
  4143  0395  0021               	movlb	1	; select bank1
  4144  0396  0499               	iorwf	25,f	;volatile
  4145                           
  4146                           ;system.c: 20: OSCSTAT = 0x00;
  4147  0397  019A               	clrf	26	;volatile
  4148  0398  0008               	return
  4149  0399                     __end_of_ConfigureOscillator:	
  4150                           
  4151                           	psect	intentry
  4152  0004                     __pintentry:	
  4153 ;; *************** function _isr *****************
  4154 ;; Defined at:
  4155 ;;		line 23 in file "interrupts.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      void 
  4162 ;; Registers used:
  4163 ;;		None
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMMON   BANK0   BANK1
  4169 ;;      Params:         0       0       0
  4170 ;;      Locals:         0       0       0
  4171 ;;      Temps:          1       0       0
  4172 ;;      Totals:         1       0       0
  4173 ;;Total ram usage:        1 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		Interrupt level 1
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182  0004                     _isr:	
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in _isr: []
  4186  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4187  0005  3180               	pagesel	$
  4188  0006  0020               	movlb	0	; select bank0
  4189  0007  087F               	movf	127,w
  4190  0008  00F0               	movwf	??_isr
  4191  0009  0870               	movf	??_isr,w
  4192  000A  00FF               	movwf	127
  4193  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4194  000C  0009               	retfie
  4195  000D                     __end_of_isr:	
  4196  007E                     btemp	set	126	;btemp
  4197  007E                     int$flags	set	126
  4198  007E                     wtemp	set	126
  4199  007E                     wtemp0	set	126
  4200  0080                     wtemp1	set	128
  4201  0082                     wtemp2	set	130
  4202  0084                     wtemp3	set	132
  4203  0086                     wtemp4	set	134
  4204  0088                     wtemp5	set	136
  4205  007F                     wtemp6	set	127
  4206  007E                     ttemp	set	126
  4207  007E                     ttemp0	set	126
  4208  0081                     ttemp1	set	129
  4209  0084                     ttemp2	set	132
  4210  0087                     ttemp3	set	135
  4211  007F                     ttemp4	set	127
  4212  007E                     ltemp	set	126
  4213  007E                     ltemp0	set	126
  4214  0082                     ltemp1	set	130
  4215  0086                     ltemp2	set	134
  4216  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      9      45
    BANK1            32      0       0

Pointer List with Targets:

    HEF_ByteArrayRead@bArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 

    HEF_ByteArrayWrite@byteArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 


Critical Paths under _main in COMMON

    _updateSwitch2State->_saveState
    _initStateManager->_getCurrentState
    _wait_ms->___lmul
    _updateSwitch1State->_saveState
    _saveState->_HEF_ByteArrayWrite
    _HEF_ByteArrayWrite->_FLASH_EraseBlock
    _getSwitch1State->_getCurrentState
    _getCurrentState->_HEF_ByteArrayRead
    _HEF_ByteArrayRead->_FLASH_ReadWord

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_initSwitch1
    _main->_initSwitch2
    _updateSwitch2->_setSwitch1State
    _updateSwitch2->_setSwitch2State
    _updateSwitch1->_setSwitch1State
    _updateSwitch1->_setSwitch2State
    _initSwitch2->_setSwitch2State
    _setSwitch2State->_updateSwitch2State
    _updateSwitch2State->_saveState
    _initStateManager->_getCurrentState
    _initSwitch1->_setSwitch1State
    _setSwitch1State->_updateSwitch1State
    _updateSwitch1State->_saveState
    _getSwitch1State->_getCurrentState

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10154
                _ConfigureOscillator
                            _InitApp
                        _initSwitch1
                        _initSwitch2
                      _updateSwitch1
                      _updateSwitch2
 ---------------------------------------------------------------------------------
 (1) _updateSwitch2                                        1     1      0    3000
                                              7 BANK0      1     1      0
                    _setSwitch1State
                    _setSwitch2State
 ---------------------------------------------------------------------------------
 (1) _updateSwitch1                                        1     1      0    3000
                                              7 BANK0      1     1      0
                    _setSwitch1State
                    _setSwitch2State
 ---------------------------------------------------------------------------------
 (1) _initSwitch2                                          2     2      0    2077
                                              7 BANK0      2     2      0
                    _getSwitch2State
                    _setSwitch2State
 ---------------------------------------------------------------------------------
 (2) _setSwitch2State                                      2     0      2    1500
                                              5 BANK0      2     0      2
                 _updateSwitch2State
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _updateSwitch2State                                   2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (2) _getSwitch2State                                      2     0      2     554
                                              1 BANK0      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (3) _initStateManager                                     0     0      0     554
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (1) _initSwitch1                                          2     2      0    2077
                                              7 BANK0      2     2      0
                    _getSwitch1State
                    _setSwitch1State
 ---------------------------------------------------------------------------------
 (2) _setSwitch1State                                      2     0      2    1500
                                              5 BANK0      2     0      2
                 _updateSwitch1State
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2     498
                                              0 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitch1State                                   2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (4) _saveState                                            4     4      0     527
                                             12 COMMON     1     1      0
                                              0 BANK0      3     3      0
                 _HEF_ByteArrayWrite
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayWrite                                   9     7      2     526
                                              4 COMMON     8     6      2
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     195
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getSwitch1State                                      2     0      2     554
                                              1 BANK0      2     0      2
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (4) _getCurrentState                                      3     3      0     554
                                             11 COMMON     2     2      0
                                              0 BANK0      1     1      0
                  _HEF_ByteArrayRead
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayRead                                    7     5      2     553
                                              4 COMMON     7     5      2
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (6) _FLASH_ReadWord                                       3     1      2     259
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
   _initSwitch1
     _getSwitch1State
       _getCurrentState
         _HEF_ByteArrayRead
           _FLASH_ReadWord
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _initSwitch2
     _getSwitch2State
       _initStateManager
         _getCurrentState
           _HEF_ByteArrayRead
             _FLASH_ReadWord
     _setSwitch2State
       _updateSwitch2State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateSwitch1
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
     _setSwitch2State
       _updateSwitch2State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateSwitch2
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
     _setSwitch2State
       _updateSwitch2State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      2D       6       56.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      3A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Dec 26 23:43:06 2016

                _updateSwitch1 00BB                  _updateSwitch2 0021                    __CFG_CP$OFF 0000  
                           l71 0298                    __CFG_LVP$ON 0000                            l141 019F  
                          u605 0221                            u575 0168                            u760 0204  
                          u825 00C7                            u755 01E9                            u835 00D7  
                          u685 0263                            u925 002D                            u790 01CA  
                          u695 026A                            u855 00F1                            u935 003D  
                          u785 01AF                            u955 0057                            u895 0132  
                          u995 0098                _getCurrentState 02A7                            _isr 0004  
                 __CFG_BORV$LO 0000                            wreg 0009                           l1200 0164  
                         l1310 0337                           l1234 017C                           l1410 010D  
                         l1252 0235                           l1260 024B                           l1332 034F  
                         l1420 0125                           l1318 032A                           l1422 0129  
                         l1248 0233                           l1274 02BE                           l1290 0262  
                         l1370 01CC                           l1418 011D                           l1450 0044  
                         l1196 0162                           l1348 0206                           l1428 013E  
                         l1278 02C4                           l1286 0258                           l1390 00CE  
                         l1446 0034                           l1394 00DE                           l1474 0083  
                         l1466 0073                           l1484 00A4                           l1476 008B  
                         l1478 008F                           l1568 0379                           ?_isr 0070  
                 __CFG_WRT$OFF 0000     __end_of_HEF_ByteArrayWrite 01A8                           _main 0375  
                         fsr0h 0005                           fsr1h 0007                           fsr0l 0004  
                         indf0 0000                           indf1 0001                           fsr1l 0006  
                         btemp 007E                           ltemp 007E                           start 000D  
                         ttemp 007E                           wtemp 007E                  __CFG_MCLRE$ON 0000  
               ?_updateSwitch1 0070                 ?_updateSwitch2 0070                __end_of_InitApp 0313  
                        ??_isr 0070                          ?_main 0070                   ?_initSwitch1 0070  
                 ?_initSwitch2 0070                  __CFG_WDTE$OFF 0000                          _PMADR 0191  
     __size_of_getSwitch1State 0007       __size_of_getSwitch2State 000C            _ConfigureOscillator 0394  
          ___lmul@multiplicand 0075             _updateSwitch1State 0330             _updateSwitch2State 0323  
               __CFG_BOREN$OFF 0000                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                __end_of_wait_ms 02A7  
                 _switch1_down 0026                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                 _switch2_down 002E                          status 0003         HEF_ByteArrayRead@block 0074  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F         HEF_ByteArrayRead@count 0075            ?_updateSwitch1State 0047  
          ?_updateSwitch2State 0047           ?_ConfigureOscillator 0070                __initialization 000E  
                 __end_of_main 037C        __end_of_getCurrentState 02C9                 __CFG_LPBOR$OFF 0000  
             _initStateManager 038F                         ??_main 007D           ??_updateSwitch1State 007D  
      __size_of_FLASH_ReadWord 0019           ??_updateSwitch2State 007D              _HEF_ByteArrayRead 021C  
                       _ADRESH 009C                         _ADRESL 009B             ?_HEF_ByteArrayRead 0074  
                       _PMADRH 0192                         _PMADRL 0191                         _PMDATH 0194  
                       _PMDATL 0193                         _PMCON2 0196      __size_of_FLASH_EraseBlock 001C  
                    ??_InitApp 0071          ??_ConfigureOscillator 0071                ??_updateSwitch1 004B  
              ??_updateSwitch2 004B            ??_HEF_ByteArrayRead 0076                 __CFG_PWRTE$OFF 0000  
                       ___lmul 0250                 __CFG_STVREN$ON 0000               __end_of_init_adc 0375  
      FLASH_ReadWord@flashAddr 0071      __end_of_HEF_ByteArrayRead 0250        HEF_ByteArrayRead@bArray 007A  
                    ??_wait_ms 007D                  _switch1_state 003C                  _switch2_state 0040  
            ??_getSwitch1State 007D              ??_getSwitch2State 007D        __end_of__initialization 001E  
             getCurrentState@r 0044                 __pcstackCOMMON 0070                   __pidataBANK0 0361  
             ?_getCurrentState 0070           __size_of_initSwitch1 000C           __size_of_initSwitch2 000C  
                   __pbssBANK0 0020         setSwitch1State@f_state 0049               _long_press_limit 003A  
                   __pmaintext 0375                        ?___lmul 0071                     __pintentry 0004  
           _HEF_ByteArrayWrite 0155             __size_of_saveState 0010       __size_of_setSwitch1State 003A  
     __size_of_setSwitch2State 003A                 ___lmul@product 0079                 _FLASH_ReadWord 02E5  
          ?_HEF_ByteArrayWrite 0074     __size_of_HEF_ByteArrayRead 0034                        _OSCSTAT 009A  
             _FLASH_EraseBlock 02C9       __end_of_initStateManager 0394                      ?_init_adc 0070  
                      _InitApp 02FE           ??_HEF_ByteArrayWrite 0076                     _pedalState 0036  
              __size_of___lmul 002F         __end_of_FLASH_ReadWord 02FE                        __ptext1 0021  
                      __ptext2 00BB                        __ptext3 033D                        __ptext4 01A8  
                      __ptext5 0323                        __ptext6 0349                        __ptext7 038F  
                      __ptext8 0355                        __ptext9 01E2                      _T2CONbits 001C  
                 __size_of_isr 0009                        _wait_ms 027F                        clrloop0 0384  
         end_of_initialization 001E              __end_of_saveState 0323                        init_ram 0389  
                   ??_init_adc 0071                        initloop 038A         setSwitch2State@f_state 0049  
                  wait_ms@time 0044      FLASH_ReadWord@GIEBitValue 0073                 _switch1_toggle 002A  
               _switch2_toggle 0032                ?_FLASH_ReadWord 0071                      _PORTAbits 000C  
              _getSwitch1State 037C                _getSwitch2State 0349    __size_of_updateSwitch1State 000D  
  __size_of_updateSwitch2State 000D              ??_setSwitch1State 007D               __CFG_FOSC$INTOSC 0000  
            ??_setSwitch2State 007D                      _TRISAbits 008C                      _TRISCbits 008E  
     HEF_ByteArrayRead@wordAdd 0078    __end_of_ConfigureOscillator 0399        HEF_ByteArrayWrite@block 0079  
      HEF_ByteArrayWrite@count 0075                     _switch1_up 003E                     _switch2_up 0042  
        __end_of_updateSwitch1 0155          __end_of_updateSwitch2 00BB                 __end_of___lmul 027F  
          start_initialization 000E                    __end_of_isr 000D                       ??___lmul 0079  
      __end_of_getSwitch1State 0383        __end_of_getSwitch2State 0355                    __pdataBANK0 003A  
  FLASH_EraseBlock@GIEBitValue 0073       __end_of_FLASH_EraseBlock 02E5                  ??_initSwitch1 007D  
                ??_initSwitch2 007D                      ___latbits 0000        updateSwitch1State@state 0047  
                __pcstackBANK0 0044       __size_of_getCurrentState 0022              ?_initStateManager 0070  
                     ?_InitApp 0070              __size_of_init_adc 000A             ??_initStateManager 007D  
      updateSwitch2State@state 0047    HEF_ByteArrayWrite@blockAddr 007A                     saveState@r 007C  
                     ?_wait_ms 0044            __end_of_initSwitch1 0361            __end_of_initSwitch2 0349  
  HEF_ByteArrayWrite@byteArray 0074                       _LATAbits 010C                       _LATCbits 010E  
                    clear_ram0 0383                      _saveState 0313    __size_of_HEF_ByteArrayWrite 0053  
           _switch1_turning_on 002C                       _PIR1bits 0011      FLASH_EraseBlock@startAddr 0071  
             ??_FLASH_ReadWord 0073                _setSwitch1State 01E2                _setSwitch2State 01A8  
             ?_getSwitch1State 0045               ?_getSwitch2State 0045                     _ADCON0bits 009D  
                   _ADCON1bits 009E             _switch2_turning_on 0034              ___lmul@multiplier 0071  
            ??_getCurrentState 007B           initSwitch1@initState 004B                     ?_saveState 0070  
             __size_of_InitApp 0015           initSwitch2@initState 004B     __end_of_updateSwitch1State 033D  
   __end_of_updateSwitch2State 0330                    _initSwitch1 0355                    _initSwitch2 033D  
                   _ANSELAbits 018C                       __ptext10 027F                       __ptext11 0250  
                     __ptext20 02FE                       __ptext12 0330                       __ptext21 036B  
                     __ptext13 0313                       __ptext22 0394                       __ptext14 0155  
                     __ptext15 02C9                       __ptext16 037C                       __ptext17 02A7  
                     __ptext18 021C                       __ptext19 02E5               __size_of_wait_ms 0028  
                     _init_adc 036B                  __size_of_main 0007        __end_of_setSwitch1State 021C  
      __end_of_setSwitch2State 01E2   __size_of_ConfigureOscillator 0005                       int$flags 007E  
            ?_FLASH_EraseBlock 0071             ??_FLASH_EraseBlock 0073                     _INTCONbits 000B  
       __size_of_updateSwitch1 009A         __size_of_updateSwitch2 009A                       intlevel1 0000  
                   _PMCON1bits 0195  HEF_ByteArrayWrite@GIEBitValue 0078              __CFG_CLKOUTEN$OFF 0000  
                  ??_saveState 0044                     _OSCCONbits 0099                  _isInitialized 0024  
                 wait_ms@timel 0020      __size_of_initStateManager 0005                _switch1_pressed 0028  
              _switch2_pressed 0030               ?_setSwitch1State 0049               ?_setSwitch2State 0049  
