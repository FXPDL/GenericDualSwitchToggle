

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Dec 27 08:46:34 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  0007                     	;# 
    49  0008                     	;# 
    50  0009                     	;# 
    51  000A                     	;# 
    52  000B                     	;# 
    53  000C                     	;# 
    54  000E                     	;# 
    55  0011                     	;# 
    56  0012                     	;# 
    57  0013                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0016                     	;# 
    61  0017                     	;# 
    62  0018                     	;# 
    63  0019                     	;# 
    64  001A                     	;# 
    65  001B                     	;# 
    66  001C                     	;# 
    67  008C                     	;# 
    68  008E                     	;# 
    69  0091                     	;# 
    70  0092                     	;# 
    71  0093                     	;# 
    72  0095                     	;# 
    73  0096                     	;# 
    74  0097                     	;# 
    75  0099                     	;# 
    76  009A                     	;# 
    77  009B                     	;# 
    78  009B                     	;# 
    79  009C                     	;# 
    80  009D                     	;# 
    81  009E                     	;# 
    82  009F                     	;# 
    83  010C                     	;# 
    84  010E                     	;# 
    85  0111                     	;# 
    86  0112                     	;# 
    87  0113                     	;# 
    88  0114                     	;# 
    89  0115                     	;# 
    90  0116                     	;# 
    91  0117                     	;# 
    92  0118                     	;# 
    93  0119                     	;# 
    94  011D                     	;# 
    95  018C                     	;# 
    96  018E                     	;# 
    97  0191                     	;# 
    98  0191                     	;# 
    99  0192                     	;# 
   100  0193                     	;# 
   101  0193                     	;# 
   102  0194                     	;# 
   103  0195                     	;# 
   104  0196                     	;# 
   105  0197                     	;# 
   106  020C                     	;# 
   107  0211                     	;# 
   108  0211                     	;# 
   109  0212                     	;# 
   110  0212                     	;# 
   111  0213                     	;# 
   112  0213                     	;# 
   113  0214                     	;# 
   114  0214                     	;# 
   115  0215                     	;# 
   116  0215                     	;# 
   117  0215                     	;# 
   118  0216                     	;# 
   119  0216                     	;# 
   120  0217                     	;# 
   121  0217                     	;# 
   122  0391                     	;# 
   123  0392                     	;# 
   124  0393                     	;# 
   125  0498                     	;# 
   126  0498                     	;# 
   127  0499                     	;# 
   128  049A                     	;# 
   129  049B                     	;# 
   130  049B                     	;# 
   131  049C                     	;# 
   132  049D                     	;# 
   133  049E                     	;# 
   134  049F                     	;# 
   135  0611                     	;# 
   136  0612                     	;# 
   137  0613                     	;# 
   138  0613                     	;# 
   139  0614                     	;# 
   140  0615                     	;# 
   141  0616                     	;# 
   142  0616                     	;# 
   143  0617                     	;# 
   144  0618                     	;# 
   145  0619                     	;# 
   146  0619                     	;# 
   147  061A                     	;# 
   148  061B                     	;# 
   149  061C                     	;# 
   150  061C                     	;# 
   151  0691                     	;# 
   152  0692                     	;# 
   153  0693                     	;# 
   154  0694                     	;# 
   155  0695                     	;# 
   156  0F0F                     	;# 
   157  0F10                     	;# 
   158  0F11                     	;# 
   159  0F12                     	;# 
   160  0F13                     	;# 
   161  0F14                     	;# 
   162  0F15                     	;# 
   163  0F16                     	;# 
   164  0F17                     	;# 
   165  0F18                     	;# 
   166  0F19                     	;# 
   167  0F1A                     	;# 
   168  0F1B                     	;# 
   169  0F1C                     	;# 
   170  0F1D                     	;# 
   171  0F1E                     	;# 
   172  0F1F                     	;# 
   173  0FE3                     	;# 
   174  0FE4                     	;# 
   175  0FE5                     	;# 
   176  0FE6                     	;# 
   177  0FE7                     	;# 
   178  0FE8                     	;# 
   179  0FE9                     	;# 
   180  0FEA                     	;# 
   181  0FEB                     	;# 
   182  0FED                     	;# 
   183  0FEE                     	;# 
   184  0FEF                     	;# 
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  0007                     	;# 
   193  0008                     	;# 
   194  0009                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  000E                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0013                     	;# 
   202  0015                     	;# 
   203  0016                     	;# 
   204  0016                     	;# 
   205  0017                     	;# 
   206  0018                     	;# 
   207  0019                     	;# 
   208  001A                     	;# 
   209  001B                     	;# 
   210  001C                     	;# 
   211  008C                     	;# 
   212  008E                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0095                     	;# 
   217  0096                     	;# 
   218  0097                     	;# 
   219  0099                     	;# 
   220  009A                     	;# 
   221  009B                     	;# 
   222  009B                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  009F                     	;# 
   227  010C                     	;# 
   228  010E                     	;# 
   229  0111                     	;# 
   230  0112                     	;# 
   231  0113                     	;# 
   232  0114                     	;# 
   233  0115                     	;# 
   234  0116                     	;# 
   235  0117                     	;# 
   236  0118                     	;# 
   237  0119                     	;# 
   238  011D                     	;# 
   239  018C                     	;# 
   240  018E                     	;# 
   241  0191                     	;# 
   242  0191                     	;# 
   243  0192                     	;# 
   244  0193                     	;# 
   245  0193                     	;# 
   246  0194                     	;# 
   247  0195                     	;# 
   248  0196                     	;# 
   249  0197                     	;# 
   250  020C                     	;# 
   251  0211                     	;# 
   252  0211                     	;# 
   253  0212                     	;# 
   254  0212                     	;# 
   255  0213                     	;# 
   256  0213                     	;# 
   257  0214                     	;# 
   258  0214                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0215                     	;# 
   262  0216                     	;# 
   263  0216                     	;# 
   264  0217                     	;# 
   265  0217                     	;# 
   266  0391                     	;# 
   267  0392                     	;# 
   268  0393                     	;# 
   269  0498                     	;# 
   270  0498                     	;# 
   271  0499                     	;# 
   272  049A                     	;# 
   273  049B                     	;# 
   274  049B                     	;# 
   275  049C                     	;# 
   276  049D                     	;# 
   277  049E                     	;# 
   278  049F                     	;# 
   279  0611                     	;# 
   280  0612                     	;# 
   281  0613                     	;# 
   282  0613                     	;# 
   283  0614                     	;# 
   284  0615                     	;# 
   285  0616                     	;# 
   286  0616                     	;# 
   287  0617                     	;# 
   288  0618                     	;# 
   289  0619                     	;# 
   290  0619                     	;# 
   291  061A                     	;# 
   292  061B                     	;# 
   293  061C                     	;# 
   294  061C                     	;# 
   295  0691                     	;# 
   296  0692                     	;# 
   297  0693                     	;# 
   298  0694                     	;# 
   299  0695                     	;# 
   300  0F0F                     	;# 
   301  0F10                     	;# 
   302  0F11                     	;# 
   303  0F12                     	;# 
   304  0F13                     	;# 
   305  0F14                     	;# 
   306  0F15                     	;# 
   307  0F16                     	;# 
   308  0F17                     	;# 
   309  0F18                     	;# 
   310  0F19                     	;# 
   311  0F1A                     	;# 
   312  0F1B                     	;# 
   313  0F1C                     	;# 
   314  0F1D                     	;# 
   315  0F1E                     	;# 
   316  0F1F                     	;# 
   317  0FE3                     	;# 
   318  0FE4                     	;# 
   319  0FE5                     	;# 
   320  0FE6                     	;# 
   321  0FE7                     	;# 
   322  0FE8                     	;# 
   323  0FE9                     	;# 
   324  0FEA                     	;# 
   325  0FEB                     	;# 
   326  0FED                     	;# 
   327  0FEE                     	;# 
   328  0FEF                     	;# 
   329  0000                     	;# 
   330  0001                     	;# 
   331  0002                     	;# 
   332  0003                     	;# 
   333  0004                     	;# 
   334  0005                     	;# 
   335  0006                     	;# 
   336  0007                     	;# 
   337  0008                     	;# 
   338  0009                     	;# 
   339  000A                     	;# 
   340  000B                     	;# 
   341  000C                     	;# 
   342  000E                     	;# 
   343  0011                     	;# 
   344  0012                     	;# 
   345  0013                     	;# 
   346  0015                     	;# 
   347  0016                     	;# 
   348  0016                     	;# 
   349  0017                     	;# 
   350  0018                     	;# 
   351  0019                     	;# 
   352  001A                     	;# 
   353  001B                     	;# 
   354  001C                     	;# 
   355  008C                     	;# 
   356  008E                     	;# 
   357  0091                     	;# 
   358  0092                     	;# 
   359  0093                     	;# 
   360  0095                     	;# 
   361  0096                     	;# 
   362  0097                     	;# 
   363  0099                     	;# 
   364  009A                     	;# 
   365  009B                     	;# 
   366  009B                     	;# 
   367  009C                     	;# 
   368  009D                     	;# 
   369  009E                     	;# 
   370  009F                     	;# 
   371  010C                     	;# 
   372  010E                     	;# 
   373  0111                     	;# 
   374  0112                     	;# 
   375  0113                     	;# 
   376  0114                     	;# 
   377  0115                     	;# 
   378  0116                     	;# 
   379  0117                     	;# 
   380  0118                     	;# 
   381  0119                     	;# 
   382  011D                     	;# 
   383  018C                     	;# 
   384  018E                     	;# 
   385  0191                     	;# 
   386  0191                     	;# 
   387  0192                     	;# 
   388  0193                     	;# 
   389  0193                     	;# 
   390  0194                     	;# 
   391  0195                     	;# 
   392  0196                     	;# 
   393  0197                     	;# 
   394  020C                     	;# 
   395  0211                     	;# 
   396  0211                     	;# 
   397  0212                     	;# 
   398  0212                     	;# 
   399  0213                     	;# 
   400  0213                     	;# 
   401  0214                     	;# 
   402  0214                     	;# 
   403  0215                     	;# 
   404  0215                     	;# 
   405  0215                     	;# 
   406  0216                     	;# 
   407  0216                     	;# 
   408  0217                     	;# 
   409  0217                     	;# 
   410  0391                     	;# 
   411  0392                     	;# 
   412  0393                     	;# 
   413  0498                     	;# 
   414  0498                     	;# 
   415  0499                     	;# 
   416  049A                     	;# 
   417  049B                     	;# 
   418  049B                     	;# 
   419  049C                     	;# 
   420  049D                     	;# 
   421  049E                     	;# 
   422  049F                     	;# 
   423  0611                     	;# 
   424  0612                     	;# 
   425  0613                     	;# 
   426  0613                     	;# 
   427  0614                     	;# 
   428  0615                     	;# 
   429  0616                     	;# 
   430  0616                     	;# 
   431  0617                     	;# 
   432  0618                     	;# 
   433  0619                     	;# 
   434  0619                     	;# 
   435  061A                     	;# 
   436  061B                     	;# 
   437  061C                     	;# 
   438  061C                     	;# 
   439  0691                     	;# 
   440  0692                     	;# 
   441  0693                     	;# 
   442  0694                     	;# 
   443  0695                     	;# 
   444  0F0F                     	;# 
   445  0F10                     	;# 
   446  0F11                     	;# 
   447  0F12                     	;# 
   448  0F13                     	;# 
   449  0F14                     	;# 
   450  0F15                     	;# 
   451  0F16                     	;# 
   452  0F17                     	;# 
   453  0F18                     	;# 
   454  0F19                     	;# 
   455  0F1A                     	;# 
   456  0F1B                     	;# 
   457  0F1C                     	;# 
   458  0F1D                     	;# 
   459  0F1E                     	;# 
   460  0F1F                     	;# 
   461  0FE3                     	;# 
   462  0FE4                     	;# 
   463  0FE5                     	;# 
   464  0FE6                     	;# 
   465  0FE7                     	;# 
   466  0FE8                     	;# 
   467  0FE9                     	;# 
   468  0FEA                     	;# 
   469  0FEB                     	;# 
   470  0FED                     	;# 
   471  0FEE                     	;# 
   472  0FEF                     	;# 
   473  0000                     	;# 
   474  0001                     	;# 
   475  0002                     	;# 
   476  0003                     	;# 
   477  0004                     	;# 
   478  0005                     	;# 
   479  0006                     	;# 
   480  0007                     	;# 
   481  0008                     	;# 
   482  0009                     	;# 
   483  000A                     	;# 
   484  000B                     	;# 
   485  000C                     	;# 
   486  000E                     	;# 
   487  0011                     	;# 
   488  0012                     	;# 
   489  0013                     	;# 
   490  0015                     	;# 
   491  0016                     	;# 
   492  0016                     	;# 
   493  0017                     	;# 
   494  0018                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001C                     	;# 
   499  008C                     	;# 
   500  008E                     	;# 
   501  0091                     	;# 
   502  0092                     	;# 
   503  0093                     	;# 
   504  0095                     	;# 
   505  0096                     	;# 
   506  0097                     	;# 
   507  0099                     	;# 
   508  009A                     	;# 
   509  009B                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  009F                     	;# 
   515  010C                     	;# 
   516  010E                     	;# 
   517  0111                     	;# 
   518  0112                     	;# 
   519  0113                     	;# 
   520  0114                     	;# 
   521  0115                     	;# 
   522  0116                     	;# 
   523  0117                     	;# 
   524  0118                     	;# 
   525  0119                     	;# 
   526  011D                     	;# 
   527  018C                     	;# 
   528  018E                     	;# 
   529  0191                     	;# 
   530  0191                     	;# 
   531  0192                     	;# 
   532  0193                     	;# 
   533  0193                     	;# 
   534  0194                     	;# 
   535  0195                     	;# 
   536  0196                     	;# 
   537  0197                     	;# 
   538  020C                     	;# 
   539  0211                     	;# 
   540  0211                     	;# 
   541  0212                     	;# 
   542  0212                     	;# 
   543  0213                     	;# 
   544  0213                     	;# 
   545  0214                     	;# 
   546  0214                     	;# 
   547  0215                     	;# 
   548  0215                     	;# 
   549  0215                     	;# 
   550  0216                     	;# 
   551  0216                     	;# 
   552  0217                     	;# 
   553  0217                     	;# 
   554  0391                     	;# 
   555  0392                     	;# 
   556  0393                     	;# 
   557  0498                     	;# 
   558  0498                     	;# 
   559  0499                     	;# 
   560  049A                     	;# 
   561  049B                     	;# 
   562  049B                     	;# 
   563  049C                     	;# 
   564  049D                     	;# 
   565  049E                     	;# 
   566  049F                     	;# 
   567  0611                     	;# 
   568  0612                     	;# 
   569  0613                     	;# 
   570  0613                     	;# 
   571  0614                     	;# 
   572  0615                     	;# 
   573  0616                     	;# 
   574  0616                     	;# 
   575  0617                     	;# 
   576  0618                     	;# 
   577  0619                     	;# 
   578  0619                     	;# 
   579  061A                     	;# 
   580  061B                     	;# 
   581  061C                     	;# 
   582  061C                     	;# 
   583  0691                     	;# 
   584  0692                     	;# 
   585  0693                     	;# 
   586  0694                     	;# 
   587  0695                     	;# 
   588  0F0F                     	;# 
   589  0F10                     	;# 
   590  0F11                     	;# 
   591  0F12                     	;# 
   592  0F13                     	;# 
   593  0F14                     	;# 
   594  0F15                     	;# 
   595  0F16                     	;# 
   596  0F17                     	;# 
   597  0F18                     	;# 
   598  0F19                     	;# 
   599  0F1A                     	;# 
   600  0F1B                     	;# 
   601  0F1C                     	;# 
   602  0F1D                     	;# 
   603  0F1E                     	;# 
   604  0F1F                     	;# 
   605  0FE3                     	;# 
   606  0FE4                     	;# 
   607  0FE5                     	;# 
   608  0FE6                     	;# 
   609  0FE7                     	;# 
   610  0FE8                     	;# 
   611  0FE9                     	;# 
   612  0FEA                     	;# 
   613  0FEB                     	;# 
   614  0FED                     	;# 
   615  0FEE                     	;# 
   616  0FEF                     	;# 
   617  0000                     	;# 
   618  0001                     	;# 
   619  0002                     	;# 
   620  0003                     	;# 
   621  0004                     	;# 
   622  0005                     	;# 
   623  0006                     	;# 
   624  0007                     	;# 
   625  0008                     	;# 
   626  0009                     	;# 
   627  000A                     	;# 
   628  000B                     	;# 
   629  000C                     	;# 
   630  000E                     	;# 
   631  0011                     	;# 
   632  0012                     	;# 
   633  0013                     	;# 
   634  0015                     	;# 
   635  0016                     	;# 
   636  0016                     	;# 
   637  0017                     	;# 
   638  0018                     	;# 
   639  0019                     	;# 
   640  001A                     	;# 
   641  001B                     	;# 
   642  001C                     	;# 
   643  008C                     	;# 
   644  008E                     	;# 
   645  0091                     	;# 
   646  0092                     	;# 
   647  0093                     	;# 
   648  0095                     	;# 
   649  0096                     	;# 
   650  0097                     	;# 
   651  0099                     	;# 
   652  009A                     	;# 
   653  009B                     	;# 
   654  009B                     	;# 
   655  009C                     	;# 
   656  009D                     	;# 
   657  009E                     	;# 
   658  009F                     	;# 
   659  010C                     	;# 
   660  010E                     	;# 
   661  0111                     	;# 
   662  0112                     	;# 
   663  0113                     	;# 
   664  0114                     	;# 
   665  0115                     	;# 
   666  0116                     	;# 
   667  0117                     	;# 
   668  0118                     	;# 
   669  0119                     	;# 
   670  011D                     	;# 
   671  018C                     	;# 
   672  018E                     	;# 
   673  0191                     	;# 
   674  0191                     	;# 
   675  0192                     	;# 
   676  0193                     	;# 
   677  0193                     	;# 
   678  0194                     	;# 
   679  0195                     	;# 
   680  0196                     	;# 
   681  0197                     	;# 
   682  020C                     	;# 
   683  0211                     	;# 
   684  0211                     	;# 
   685  0212                     	;# 
   686  0212                     	;# 
   687  0213                     	;# 
   688  0213                     	;# 
   689  0214                     	;# 
   690  0214                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0216                     	;# 
   695  0216                     	;# 
   696  0217                     	;# 
   697  0217                     	;# 
   698  0391                     	;# 
   699  0392                     	;# 
   700  0393                     	;# 
   701  0498                     	;# 
   702  0498                     	;# 
   703  0499                     	;# 
   704  049A                     	;# 
   705  049B                     	;# 
   706  049B                     	;# 
   707  049C                     	;# 
   708  049D                     	;# 
   709  049E                     	;# 
   710  049F                     	;# 
   711  0611                     	;# 
   712  0612                     	;# 
   713  0613                     	;# 
   714  0613                     	;# 
   715  0614                     	;# 
   716  0615                     	;# 
   717  0616                     	;# 
   718  0616                     	;# 
   719  0617                     	;# 
   720  0618                     	;# 
   721  0619                     	;# 
   722  0619                     	;# 
   723  061A                     	;# 
   724  061B                     	;# 
   725  061C                     	;# 
   726  061C                     	;# 
   727  0691                     	;# 
   728  0692                     	;# 
   729  0693                     	;# 
   730  0694                     	;# 
   731  0695                     	;# 
   732  0F0F                     	;# 
   733  0F10                     	;# 
   734  0F11                     	;# 
   735  0F12                     	;# 
   736  0F13                     	;# 
   737  0F14                     	;# 
   738  0F15                     	;# 
   739  0F16                     	;# 
   740  0F17                     	;# 
   741  0F18                     	;# 
   742  0F19                     	;# 
   743  0F1A                     	;# 
   744  0F1B                     	;# 
   745  0F1C                     	;# 
   746  0F1D                     	;# 
   747  0F1E                     	;# 
   748  0F1F                     	;# 
   749  0FE3                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000E                     	;# 
   775  0011                     	;# 
   776  0012                     	;# 
   777  0013                     	;# 
   778  0015                     	;# 
   779  0016                     	;# 
   780  0016                     	;# 
   781  0017                     	;# 
   782  0018                     	;# 
   783  0019                     	;# 
   784  001A                     	;# 
   785  001B                     	;# 
   786  001C                     	;# 
   787  008C                     	;# 
   788  008E                     	;# 
   789  0091                     	;# 
   790  0092                     	;# 
   791  0093                     	;# 
   792  0095                     	;# 
   793  0096                     	;# 
   794  0097                     	;# 
   795  0099                     	;# 
   796  009A                     	;# 
   797  009B                     	;# 
   798  009B                     	;# 
   799  009C                     	;# 
   800  009D                     	;# 
   801  009E                     	;# 
   802  009F                     	;# 
   803  010C                     	;# 
   804  010E                     	;# 
   805  0111                     	;# 
   806  0112                     	;# 
   807  0113                     	;# 
   808  0114                     	;# 
   809  0115                     	;# 
   810  0116                     	;# 
   811  0117                     	;# 
   812  0118                     	;# 
   813  0119                     	;# 
   814  011D                     	;# 
   815  018C                     	;# 
   816  018E                     	;# 
   817  0191                     	;# 
   818  0191                     	;# 
   819  0192                     	;# 
   820  0193                     	;# 
   821  0193                     	;# 
   822  0194                     	;# 
   823  0195                     	;# 
   824  0196                     	;# 
   825  0197                     	;# 
   826  020C                     	;# 
   827  0211                     	;# 
   828  0211                     	;# 
   829  0212                     	;# 
   830  0212                     	;# 
   831  0213                     	;# 
   832  0213                     	;# 
   833  0214                     	;# 
   834  0214                     	;# 
   835  0215                     	;# 
   836  0215                     	;# 
   837  0215                     	;# 
   838  0216                     	;# 
   839  0216                     	;# 
   840  0217                     	;# 
   841  0217                     	;# 
   842  0391                     	;# 
   843  0392                     	;# 
   844  0393                     	;# 
   845  0498                     	;# 
   846  0498                     	;# 
   847  0499                     	;# 
   848  049A                     	;# 
   849  049B                     	;# 
   850  049B                     	;# 
   851  049C                     	;# 
   852  049D                     	;# 
   853  049E                     	;# 
   854  049F                     	;# 
   855  0611                     	;# 
   856  0612                     	;# 
   857  0613                     	;# 
   858  0613                     	;# 
   859  0614                     	;# 
   860  0615                     	;# 
   861  0616                     	;# 
   862  0616                     	;# 
   863  0617                     	;# 
   864  0618                     	;# 
   865  0619                     	;# 
   866  0619                     	;# 
   867  061A                     	;# 
   868  061B                     	;# 
   869  061C                     	;# 
   870  061C                     	;# 
   871  0691                     	;# 
   872  0692                     	;# 
   873  0693                     	;# 
   874  0694                     	;# 
   875  0695                     	;# 
   876  0F0F                     	;# 
   877  0F10                     	;# 
   878  0F11                     	;# 
   879  0F12                     	;# 
   880  0F13                     	;# 
   881  0F14                     	;# 
   882  0F15                     	;# 
   883  0F16                     	;# 
   884  0F17                     	;# 
   885  0F18                     	;# 
   886  0F19                     	;# 
   887  0F1A                     	;# 
   888  0F1B                     	;# 
   889  0F1C                     	;# 
   890  0F1D                     	;# 
   891  0F1E                     	;# 
   892  0F1F                     	;# 
   893  0FE3                     	;# 
   894  0FE4                     	;# 
   895  0FE5                     	;# 
   896  0FE6                     	;# 
   897  0FE7                     	;# 
   898  0FE8                     	;# 
   899  0FE9                     	;# 
   900  0FEA                     	;# 
   901  0FEB                     	;# 
   902  0FED                     	;# 
   903  0FEE                     	;# 
   904  0FEF                     	;# 
   905  0000                     	;# 
   906  0001                     	;# 
   907  0002                     	;# 
   908  0003                     	;# 
   909  0004                     	;# 
   910  0005                     	;# 
   911  0006                     	;# 
   912  0007                     	;# 
   913  0008                     	;# 
   914  0009                     	;# 
   915  000A                     	;# 
   916  000B                     	;# 
   917  000C                     	;# 
   918  000E                     	;# 
   919  0011                     	;# 
   920  0012                     	;# 
   921  0013                     	;# 
   922  0015                     	;# 
   923  0016                     	;# 
   924  0016                     	;# 
   925  0017                     	;# 
   926  0018                     	;# 
   927  0019                     	;# 
   928  001A                     	;# 
   929  001B                     	;# 
   930  001C                     	;# 
   931  008C                     	;# 
   932  008E                     	;# 
   933  0091                     	;# 
   934  0092                     	;# 
   935  0093                     	;# 
   936  0095                     	;# 
   937  0096                     	;# 
   938  0097                     	;# 
   939  0099                     	;# 
   940  009A                     	;# 
   941  009B                     	;# 
   942  009B                     	;# 
   943  009C                     	;# 
   944  009D                     	;# 
   945  009E                     	;# 
   946  009F                     	;# 
   947  010C                     	;# 
   948  010E                     	;# 
   949  0111                     	;# 
   950  0112                     	;# 
   951  0113                     	;# 
   952  0114                     	;# 
   953  0115                     	;# 
   954  0116                     	;# 
   955  0117                     	;# 
   956  0118                     	;# 
   957  0119                     	;# 
   958  011D                     	;# 
   959  018C                     	;# 
   960  018E                     	;# 
   961  0191                     	;# 
   962  0191                     	;# 
   963  0192                     	;# 
   964  0193                     	;# 
   965  0193                     	;# 
   966  0194                     	;# 
   967  0195                     	;# 
   968  0196                     	;# 
   969  0197                     	;# 
   970  020C                     	;# 
   971  0211                     	;# 
   972  0211                     	;# 
   973  0212                     	;# 
   974  0212                     	;# 
   975  0213                     	;# 
   976  0213                     	;# 
   977  0214                     	;# 
   978  0214                     	;# 
   979  0215                     	;# 
   980  0215                     	;# 
   981  0215                     	;# 
   982  0216                     	;# 
   983  0216                     	;# 
   984  0217                     	;# 
   985  0217                     	;# 
   986  0391                     	;# 
   987  0392                     	;# 
   988  0393                     	;# 
   989  0498                     	;# 
   990  0498                     	;# 
   991  0499                     	;# 
   992  049A                     	;# 
   993  049B                     	;# 
   994  049B                     	;# 
   995  049C                     	;# 
   996  049D                     	;# 
   997  049E                     	;# 
   998  049F                     	;# 
   999  0611                     	;# 
  1000  0612                     	;# 
  1001  0613                     	;# 
  1002  0613                     	;# 
  1003  0614                     	;# 
  1004  0615                     	;# 
  1005  0616                     	;# 
  1006  0616                     	;# 
  1007  0617                     	;# 
  1008  0618                     	;# 
  1009  0619                     	;# 
  1010  0619                     	;# 
  1011  061A                     	;# 
  1012  061B                     	;# 
  1013  061C                     	;# 
  1014  061C                     	;# 
  1015  0691                     	;# 
  1016  0692                     	;# 
  1017  0693                     	;# 
  1018  0694                     	;# 
  1019  0695                     	;# 
  1020  0F0F                     	;# 
  1021  0F10                     	;# 
  1022  0F11                     	;# 
  1023  0F12                     	;# 
  1024  0F13                     	;# 
  1025  0F14                     	;# 
  1026  0F15                     	;# 
  1027  0F16                     	;# 
  1028  0F17                     	;# 
  1029  0F18                     	;# 
  1030  0F19                     	;# 
  1031  0F1A                     	;# 
  1032  0F1B                     	;# 
  1033  0F1C                     	;# 
  1034  0F1D                     	;# 
  1035  0F1E                     	;# 
  1036  0F1F                     	;# 
  1037  0FE3                     	;# 
  1038  0FE4                     	;# 
  1039  0FE5                     	;# 
  1040  0FE6                     	;# 
  1041  0FE7                     	;# 
  1042  0FE8                     	;# 
  1043  0FE9                     	;# 
  1044  0FEA                     	;# 
  1045  0FEB                     	;# 
  1046  0FED                     	;# 
  1047  0FEE                     	;# 
  1048  0FEF                     	;# 
  1049  0000                     	;# 
  1050  0001                     	;# 
  1051  0002                     	;# 
  1052  0003                     	;# 
  1053  0004                     	;# 
  1054  0005                     	;# 
  1055  0006                     	;# 
  1056  0007                     	;# 
  1057  0008                     	;# 
  1058  0009                     	;# 
  1059  000A                     	;# 
  1060  000B                     	;# 
  1061  000C                     	;# 
  1062  000E                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0013                     	;# 
  1066  0015                     	;# 
  1067  0016                     	;# 
  1068  0016                     	;# 
  1069  0017                     	;# 
  1070  0018                     	;# 
  1071  0019                     	;# 
  1072  001A                     	;# 
  1073  001B                     	;# 
  1074  001C                     	;# 
  1075  008C                     	;# 
  1076  008E                     	;# 
  1077  0091                     	;# 
  1078  0092                     	;# 
  1079  0093                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  009F                     	;# 
  1091  010C                     	;# 
  1092  010E                     	;# 
  1093  0111                     	;# 
  1094  0112                     	;# 
  1095  0113                     	;# 
  1096  0114                     	;# 
  1097  0115                     	;# 
  1098  0116                     	;# 
  1099  0117                     	;# 
  1100  0118                     	;# 
  1101  0119                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018E                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0194                     	;# 
  1111  0195                     	;# 
  1112  0196                     	;# 
  1113  0197                     	;# 
  1114  020C                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0216                     	;# 
  1127  0216                     	;# 
  1128  0217                     	;# 
  1129  0217                     	;# 
  1130  0391                     	;# 
  1131  0392                     	;# 
  1132  0393                     	;# 
  1133  0498                     	;# 
  1134  0498                     	;# 
  1135  0499                     	;# 
  1136  049A                     	;# 
  1137  049B                     	;# 
  1138  049B                     	;# 
  1139  049C                     	;# 
  1140  049D                     	;# 
  1141  049E                     	;# 
  1142  049F                     	;# 
  1143  0611                     	;# 
  1144  0612                     	;# 
  1145  0613                     	;# 
  1146  0613                     	;# 
  1147  0614                     	;# 
  1148  0615                     	;# 
  1149  0616                     	;# 
  1150  0616                     	;# 
  1151  0617                     	;# 
  1152  0618                     	;# 
  1153  0619                     	;# 
  1154  0619                     	;# 
  1155  061A                     	;# 
  1156  061B                     	;# 
  1157  061C                     	;# 
  1158  061C                     	;# 
  1159  0691                     	;# 
  1160  0692                     	;# 
  1161  0693                     	;# 
  1162  0694                     	;# 
  1163  0695                     	;# 
  1164  0F0F                     	;# 
  1165  0F10                     	;# 
  1166  0F11                     	;# 
  1167  0F12                     	;# 
  1168  0F13                     	;# 
  1169  0F14                     	;# 
  1170  0F15                     	;# 
  1171  0F16                     	;# 
  1172  0F17                     	;# 
  1173  0F18                     	;# 
  1174  0F19                     	;# 
  1175  0F1A                     	;# 
  1176  0F1B                     	;# 
  1177  0F1C                     	;# 
  1178  0F1D                     	;# 
  1179  0F1E                     	;# 
  1180  0F1F                     	;# 
  1181  0FE3                     	;# 
  1182  0FE4                     	;# 
  1183  0FE5                     	;# 
  1184  0FE6                     	;# 
  1185  0FE7                     	;# 
  1186  0FE8                     	;# 
  1187  0FE9                     	;# 
  1188  0FEA                     	;# 
  1189  0FEB                     	;# 
  1190  0FED                     	;# 
  1191  0FEE                     	;# 
  1192  0FEF                     	;# 
  1193  0000                     	;# 
  1194  0001                     	;# 
  1195  0002                     	;# 
  1196  0003                     	;# 
  1197  0004                     	;# 
  1198  0005                     	;# 
  1199  0006                     	;# 
  1200  0007                     	;# 
  1201  0008                     	;# 
  1202  0009                     	;# 
  1203  000A                     	;# 
  1204  000B                     	;# 
  1205  000C                     	;# 
  1206  000E                     	;# 
  1207  0011                     	;# 
  1208  0012                     	;# 
  1209  0013                     	;# 
  1210  0015                     	;# 
  1211  0016                     	;# 
  1212  0016                     	;# 
  1213  0017                     	;# 
  1214  0018                     	;# 
  1215  0019                     	;# 
  1216  001A                     	;# 
  1217  001B                     	;# 
  1218  001C                     	;# 
  1219  008C                     	;# 
  1220  008E                     	;# 
  1221  0091                     	;# 
  1222  0092                     	;# 
  1223  0093                     	;# 
  1224  0095                     	;# 
  1225  0096                     	;# 
  1226  0097                     	;# 
  1227  0099                     	;# 
  1228  009A                     	;# 
  1229  009B                     	;# 
  1230  009B                     	;# 
  1231  009C                     	;# 
  1232  009D                     	;# 
  1233  009E                     	;# 
  1234  009F                     	;# 
  1235  010C                     	;# 
  1236  010E                     	;# 
  1237  0111                     	;# 
  1238  0112                     	;# 
  1239  0113                     	;# 
  1240  0114                     	;# 
  1241  0115                     	;# 
  1242  0116                     	;# 
  1243  0117                     	;# 
  1244  0118                     	;# 
  1245  0119                     	;# 
  1246  011D                     	;# 
  1247  018C                     	;# 
  1248  018E                     	;# 
  1249  0191                     	;# 
  1250  0191                     	;# 
  1251  0192                     	;# 
  1252  0193                     	;# 
  1253  0193                     	;# 
  1254  0194                     	;# 
  1255  0195                     	;# 
  1256  0196                     	;# 
  1257  0197                     	;# 
  1258  020C                     	;# 
  1259  0211                     	;# 
  1260  0211                     	;# 
  1261  0212                     	;# 
  1262  0212                     	;# 
  1263  0213                     	;# 
  1264  0213                     	;# 
  1265  0214                     	;# 
  1266  0214                     	;# 
  1267  0215                     	;# 
  1268  0215                     	;# 
  1269  0215                     	;# 
  1270  0216                     	;# 
  1271  0216                     	;# 
  1272  0217                     	;# 
  1273  0217                     	;# 
  1274  0391                     	;# 
  1275  0392                     	;# 
  1276  0393                     	;# 
  1277  0498                     	;# 
  1278  0498                     	;# 
  1279  0499                     	;# 
  1280  049A                     	;# 
  1281  049B                     	;# 
  1282  049B                     	;# 
  1283  049C                     	;# 
  1284  049D                     	;# 
  1285  049E                     	;# 
  1286  049F                     	;# 
  1287  0611                     	;# 
  1288  0612                     	;# 
  1289  0613                     	;# 
  1290  0613                     	;# 
  1291  0614                     	;# 
  1292  0615                     	;# 
  1293  0616                     	;# 
  1294  0616                     	;# 
  1295  0617                     	;# 
  1296  0618                     	;# 
  1297  0619                     	;# 
  1298  0619                     	;# 
  1299  061A                     	;# 
  1300  061B                     	;# 
  1301  061C                     	;# 
  1302  061C                     	;# 
  1303  0691                     	;# 
  1304  0692                     	;# 
  1305  0693                     	;# 
  1306  0694                     	;# 
  1307  0695                     	;# 
  1308  0F0F                     	;# 
  1309  0F10                     	;# 
  1310  0F11                     	;# 
  1311  0F12                     	;# 
  1312  0F13                     	;# 
  1313  0F14                     	;# 
  1314  0F15                     	;# 
  1315  0F16                     	;# 
  1316  0F17                     	;# 
  1317  0F18                     	;# 
  1318  0F19                     	;# 
  1319  0F1A                     	;# 
  1320  0F1B                     	;# 
  1321  0F1C                     	;# 
  1322  0F1D                     	;# 
  1323  0F1E                     	;# 
  1324  0F1F                     	;# 
  1325  0FE3                     	;# 
  1326  0FE4                     	;# 
  1327  0FE5                     	;# 
  1328  0FE6                     	;# 
  1329  0FE7                     	;# 
  1330  0FE8                     	;# 
  1331  0FE9                     	;# 
  1332  0FEA                     	;# 
  1333  0FEB                     	;# 
  1334  0FED                     	;# 
  1335  0FEE                     	;# 
  1336  0FEF                     	;# 
  1337  0000                     	;# 
  1338  0001                     	;# 
  1339  0002                     	;# 
  1340  0003                     	;# 
  1341  0004                     	;# 
  1342  0005                     	;# 
  1343  0006                     	;# 
  1344  0007                     	;# 
  1345  0008                     	;# 
  1346  0009                     	;# 
  1347  000A                     	;# 
  1348  000B                     	;# 
  1349  000C                     	;# 
  1350  000E                     	;# 
  1351  0011                     	;# 
  1352  0012                     	;# 
  1353  0013                     	;# 
  1354  0015                     	;# 
  1355  0016                     	;# 
  1356  0016                     	;# 
  1357  0017                     	;# 
  1358  0018                     	;# 
  1359  0019                     	;# 
  1360  001A                     	;# 
  1361  001B                     	;# 
  1362  001C                     	;# 
  1363  008C                     	;# 
  1364  008E                     	;# 
  1365  0091                     	;# 
  1366  0092                     	;# 
  1367  0093                     	;# 
  1368  0095                     	;# 
  1369  0096                     	;# 
  1370  0097                     	;# 
  1371  0099                     	;# 
  1372  009A                     	;# 
  1373  009B                     	;# 
  1374  009B                     	;# 
  1375  009C                     	;# 
  1376  009D                     	;# 
  1377  009E                     	;# 
  1378  009F                     	;# 
  1379  010C                     	;# 
  1380  010E                     	;# 
  1381  0111                     	;# 
  1382  0112                     	;# 
  1383  0113                     	;# 
  1384  0114                     	;# 
  1385  0115                     	;# 
  1386  0116                     	;# 
  1387  0117                     	;# 
  1388  0118                     	;# 
  1389  0119                     	;# 
  1390  011D                     	;# 
  1391  018C                     	;# 
  1392  018E                     	;# 
  1393  0191                     	;# 
  1394  0191                     	;# 
  1395  0192                     	;# 
  1396  0193                     	;# 
  1397  0193                     	;# 
  1398  0194                     	;# 
  1399  0195                     	;# 
  1400  0196                     	;# 
  1401  0197                     	;# 
  1402  020C                     	;# 
  1403  0211                     	;# 
  1404  0211                     	;# 
  1405  0212                     	;# 
  1406  0212                     	;# 
  1407  0213                     	;# 
  1408  0213                     	;# 
  1409  0214                     	;# 
  1410  0214                     	;# 
  1411  0215                     	;# 
  1412  0215                     	;# 
  1413  0215                     	;# 
  1414  0216                     	;# 
  1415  0216                     	;# 
  1416  0217                     	;# 
  1417  0217                     	;# 
  1418  0391                     	;# 
  1419  0392                     	;# 
  1420  0393                     	;# 
  1421  0498                     	;# 
  1422  0498                     	;# 
  1423  0499                     	;# 
  1424  049A                     	;# 
  1425  049B                     	;# 
  1426  049B                     	;# 
  1427  049C                     	;# 
  1428  049D                     	;# 
  1429  049E                     	;# 
  1430  049F                     	;# 
  1431  0611                     	;# 
  1432  0612                     	;# 
  1433  0613                     	;# 
  1434  0613                     	;# 
  1435  0614                     	;# 
  1436  0615                     	;# 
  1437  0616                     	;# 
  1438  0616                     	;# 
  1439  0617                     	;# 
  1440  0618                     	;# 
  1441  0619                     	;# 
  1442  0619                     	;# 
  1443  061A                     	;# 
  1444  061B                     	;# 
  1445  061C                     	;# 
  1446  061C                     	;# 
  1447  0691                     	;# 
  1448  0692                     	;# 
  1449  0693                     	;# 
  1450  0694                     	;# 
  1451  0695                     	;# 
  1452  0F0F                     	;# 
  1453  0F10                     	;# 
  1454  0F11                     	;# 
  1455  0F12                     	;# 
  1456  0F13                     	;# 
  1457  0F14                     	;# 
  1458  0F15                     	;# 
  1459  0F16                     	;# 
  1460  0F17                     	;# 
  1461  0F18                     	;# 
  1462  0F19                     	;# 
  1463  0F1A                     	;# 
  1464  0F1B                     	;# 
  1465  0F1C                     	;# 
  1466  0F1D                     	;# 
  1467  0F1E                     	;# 
  1468  0F1F                     	;# 
  1469  0FE3                     	;# 
  1470  0FE4                     	;# 
  1471  0FE5                     	;# 
  1472  0FE6                     	;# 
  1473  0FE7                     	;# 
  1474  0FE8                     	;# 
  1475  0FE9                     	;# 
  1476  0FEA                     	;# 
  1477  0FEB                     	;# 
  1478  0FED                     	;# 
  1479  0FEE                     	;# 
  1480  0FEF                     	;# 
  1481                           
  1482                           	psect	idataBANK0
  1483  039F                     __pidataBANK0:	
  1484                           
  1485                           ;initializer for _long_press_limit
  1486  039F  3400               	retlw	0
  1487  03A0  342D               	retlw	45
  1488                           
  1489                           ;initializer for _switch1_state
  1490  03A1  34FF               	retlw	255
  1491  03A2  34FF               	retlw	255
  1492                           
  1493                           ;initializer for _switch1_up
  1494  03A3  3401               	retlw	1
  1495  03A4  3400               	retlw	0
  1496                           
  1497                           ;initializer for _switch2_state
  1498  03A5  34FF               	retlw	255
  1499  03A6  34FF               	retlw	255
  1500                           
  1501                           ;initializer for _switch2_up
  1502  03A7  3401               	retlw	1
  1503  03A8  3400               	retlw	0
  1504  000B                     _INTCONbits	set	11
  1505  0011                     _PIR1bits	set	17
  1506  000C                     _PORTAbits	set	12
  1507  001C                     _T2CONbits	set	28
  1508  009D                     _ADCON0bits	set	157
  1509  009E                     _ADCON1bits	set	158
  1510  009C                     _ADRESH	set	156
  1511  009B                     _ADRESL	set	155
  1512  0099                     _OSCCONbits	set	153
  1513  009A                     _OSCSTAT	set	154
  1514  008C                     _TRISAbits	set	140
  1515  008E                     _TRISCbits	set	142
  1516  010C                     _LATAbits	set	268
  1517  010E                     _LATCbits	set	270
  1518  0191                     _PMADR	set	401
  1519  018C                     _ANSELAbits	set	396
  1520  0192                     _PMADRH	set	402
  1521  0191                     _PMADRL	set	401
  1522  0195                     _PMCON1bits	set	405
  1523  0196                     _PMCON2	set	406
  1524  0194                     _PMDATH	set	404
  1525  0193                     _PMDATL	set	403
  1526                           
  1527                           ; #config settings
  1528  0000                     
  1529                           	psect	cinit
  1530  000E                     start_initialization:	
  1531  000E                     __initialization:	
  1532                           
  1533                           ; Clear objects allocated to BANK0
  1534  000E  3020               	movlw	low __pbssBANK0
  1535  000F  0084               	movwf	4
  1536  0010  3000               	movlw	high __pbssBANK0
  1537  0011  0085               	movwf	5
  1538  0012  301A               	movlw	26
  1539  0013  23C1               	fcall	clear_ram0
  1540                           
  1541                           ; Initialize objects allocated to BANK0
  1542  0014  309F               	movlw	low __pidataBANK0
  1543  0015  0084               	movwf	4
  1544  0016  3083               	movlw	(high __pidataBANK0)| (0+128)
  1545  0017  0085               	movwf	5
  1546  0018  303A               	movlw	low __pdataBANK0
  1547  0019  0086               	movwf	6
  1548  001A  3000               	movlw	high __pdataBANK0
  1549  001B  0087               	movwf	7
  1550  001C  300A               	movlw	10
  1551  001D  23C7               	fcall	init_ram
  1552  001E                     end_of_initialization:	
  1553                           ;End of C runtime variable initialization code
  1554                           
  1555  001E                     __end_of__initialization:	
  1556  001E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1557  001F  0020               	movlb	0
  1558  0020  2BB3               	ljmp	_main	;jump to C main() function
  1559                           
  1560                           	psect	bssBANK0
  1561  0020                     __pbssBANK0:	
  1562  0020                     wait_ms@timel:	
  1563  0020                     	ds	4
  1564  0024                     _isInitialized:	
  1565  0024                     	ds	2
  1566  0026                     _switch1_down:	
  1567  0026                     	ds	2
  1568  0028                     _switch1_pressed:	
  1569  0028                     	ds	2
  1570  002A                     _switch1_toggle:	
  1571  002A                     	ds	2
  1572  002C                     _switch1_turning_on:	
  1573  002C                     	ds	2
  1574  002E                     _switch2_down:	
  1575  002E                     	ds	2
  1576  0030                     _switch2_pressed:	
  1577  0030                     	ds	2
  1578  0032                     _switch2_toggle:	
  1579  0032                     	ds	2
  1580  0034                     _switch2_turning_on:	
  1581  0034                     	ds	2
  1582  0036                     _pedalState:	
  1583  0036                     	ds	4
  1584                           
  1585                           	psect	dataBANK0
  1586  003A                     __pdataBANK0:	
  1587  003A                     _long_press_limit:	
  1588  003A                     	ds	2
  1589  003C                     _switch1_state:	
  1590  003C                     	ds	2
  1591  003E                     _switch1_up:	
  1592  003E                     	ds	2
  1593  0040                     _switch2_state:	
  1594  0040                     	ds	2
  1595  0042                     _switch2_up:	
  1596  0042                     	ds	2
  1597                           
  1598                           	psect	clrtext
  1599  03C1                     clear_ram0:	
  1600                           ;	Called with FSR0 containing the base address, and
  1601                           ;	WREG with the size to clear
  1602                           
  1603  03C1  0064               	clrwdt	;clear the watchdog before getting into this loop
  1604  03C2                     clrloop0:	
  1605  03C2  0180               	clrf	0	;clear RAM location pointed to by FSR
  1606  03C3  3101               	addfsr 0,1
  1607  03C4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1608  03C5  2BC2               	goto	clrloop0	;have we reached the end yet?
  1609  03C6  3400               	retlw	0	;all done for this memory range, return
  1610                           
  1611                           	psect	inittext
  1612  03C7                     init_ram:	
  1613  03C7  00FE               	movwf	126
  1614  03C8                     initloop:	
  1615  03C8  0012               	moviw fsr0++
  1616  03C9  001E               	movwi fsr1++
  1617  03CA  0BFE               	decfsz	126,f
  1618  03CB  2BC8               	goto	initloop
  1619  03CC  3400               	retlw	0
  1620                           
  1621                           	psect	cstackCOMMON
  1622  0070                     __pcstackCOMMON:	
  1623  0070                     ?_ConfigureOscillator:	
  1624  0070                     ?_InitApp:	
  1625                           ; 1 bytes @ 0x0
  1626                           
  1627  0070                     ?_initSwitch1:	
  1628                           ; 1 bytes @ 0x0
  1629                           
  1630  0070                     ?_initSwitch2:	
  1631                           ; 1 bytes @ 0x0
  1632                           
  1633  0070                     ?_updateSwitch1:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636  0070                     ?_updateSwitch2:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639  0070                     ?_init_adc:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642  0070                     ?_saveState:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645  0070                     ?_setSwitch2OffStart:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648  0070                     ?_setSwitch2OffFinish:	
  1649                           ; 1 bytes @ 0x0
  1650                           
  1651  0070                     ?_isr:	
  1652                           ; 1 bytes @ 0x0
  1653                           
  1654  0070                     ??_isr:	
  1655                           ; 1 bytes @ 0x0
  1656                           
  1657  0070                     ?_main:	
  1658                           ; 1 bytes @ 0x0
  1659                           
  1660  0070                     ?_initStateManager:	
  1661                           ; 1 bytes @ 0x0
  1662                           
  1663  0070                     ?_setSwitch1OffStart:	
  1664                           ; 1 bytes @ 0x0
  1665                           
  1666  0070                     ?_setSwitch1OffFinish:	
  1667                           ; 1 bytes @ 0x0
  1668                           
  1669  0070                     ?_getCurrentState:	
  1670                           ; 1 bytes @ 0x0
  1671                           
  1672                           
  1673                           ; 4 bytes @ 0x0
  1674  0070                     	ds	1
  1675  0071                     ?_FLASH_EraseBlock:	
  1676  0071                     ??_ConfigureOscillator:	
  1677                           ; 1 bytes @ 0x1
  1678                           
  1679  0071                     ??_InitApp:	
  1680                           ; 1 bytes @ 0x1
  1681                           
  1682  0071                     ??_init_adc:	
  1683                           ; 1 bytes @ 0x1
  1684                           
  1685  0071                     ??_setSwitch2OffStart:	
  1686                           ; 1 bytes @ 0x1
  1687                           
  1688  0071                     ??_setSwitch1OffStart:	
  1689                           ; 1 bytes @ 0x1
  1690                           
  1691  0071                     ?_FLASH_ReadWord:	
  1692                           ; 1 bytes @ 0x1
  1693                           
  1694  0071                     ?___lmul:	
  1695                           ; 2 bytes @ 0x1
  1696                           
  1697  0071                     FLASH_ReadWord@flashAddr:	
  1698                           ; 4 bytes @ 0x1
  1699                           
  1700  0071                     FLASH_EraseBlock@startAddr:	
  1701                           ; 2 bytes @ 0x1
  1702                           
  1703  0071                     ___lmul@multiplier:	
  1704                           ; 2 bytes @ 0x1
  1705                           
  1706                           
  1707                           ; 4 bytes @ 0x1
  1708  0071                     	ds	2
  1709  0073                     ??_FLASH_EraseBlock:	
  1710  0073                     ??_FLASH_ReadWord:	
  1711                           ; 1 bytes @ 0x3
  1712                           
  1713  0073                     FLASH_ReadWord@GIEBitValue:	
  1714                           ; 1 bytes @ 0x3
  1715                           
  1716  0073                     FLASH_EraseBlock@GIEBitValue:	
  1717                           ; 1 bytes @ 0x3
  1718                           
  1719                           
  1720                           ; 1 bytes @ 0x3
  1721  0073                     	ds	1
  1722  0074                     ?_HEF_ByteArrayWrite:	
  1723  0074                     ?_HEF_ByteArrayRead:	
  1724                           ; 1 bytes @ 0x4
  1725                           
  1726  0074                     HEF_ByteArrayWrite@byteArray:	
  1727                           ; 1 bytes @ 0x4
  1728                           
  1729  0074                     HEF_ByteArrayRead@block:	
  1730                           ; 1 bytes @ 0x4
  1731                           
  1732                           
  1733                           ; 1 bytes @ 0x4
  1734  0074                     	ds	1
  1735  0075                     HEF_ByteArrayWrite@count:	
  1736  0075                     HEF_ByteArrayRead@count:	
  1737                           ; 1 bytes @ 0x5
  1738                           
  1739  0075                     ___lmul@multiplicand:	
  1740                           ; 1 bytes @ 0x5
  1741                           
  1742                           
  1743                           ; 4 bytes @ 0x5
  1744  0075                     	ds	1
  1745  0076                     ??_HEF_ByteArrayWrite:	
  1746  0076                     ??_HEF_ByteArrayRead:	
  1747                           ; 1 bytes @ 0x6
  1748                           
  1749                           
  1750                           ; 1 bytes @ 0x6
  1751  0076                     	ds	2
  1752  0078                     HEF_ByteArrayWrite@GIEBitValue:	
  1753  0078                     HEF_ByteArrayRead@wordAdd:	
  1754                           ; 1 bytes @ 0x8
  1755                           
  1756                           
  1757                           ; 2 bytes @ 0x8
  1758  0078                     	ds	1
  1759  0079                     ??___lmul:	
  1760  0079                     HEF_ByteArrayWrite@block:	
  1761                           ; 1 bytes @ 0x9
  1762                           
  1763  0079                     ___lmul@product:	
  1764                           ; 1 bytes @ 0x9
  1765                           
  1766                           
  1767                           ; 4 bytes @ 0x9
  1768  0079                     	ds	1
  1769  007A                     HEF_ByteArrayRead@bArray:	
  1770  007A                     HEF_ByteArrayWrite@blockAddr:	
  1771                           ; 1 bytes @ 0xA
  1772                           
  1773                           
  1774                           ; 2 bytes @ 0xA
  1775  007A                     	ds	1
  1776  007B                     ??_getCurrentState:	
  1777                           
  1778                           ; 1 bytes @ 0xB
  1779  007B                     	ds	1
  1780  007C                     saveState@r:	
  1781                           
  1782                           ; 1 bytes @ 0xC
  1783  007C                     	ds	1
  1784  007D                     ??_initSwitch1:	
  1785  007D                     ??_initSwitch2:	
  1786                           ; 1 bytes @ 0xD
  1787                           
  1788  007D                     ??_setSwitch1State:	
  1789                           ; 1 bytes @ 0xD
  1790                           
  1791  007D                     ??_setSwitch2OffFinish:	
  1792                           ; 1 bytes @ 0xD
  1793                           
  1794  007D                     ??_setSwitch2State:	
  1795                           ; 1 bytes @ 0xD
  1796                           
  1797  007D                     ??_main:	
  1798                           ; 1 bytes @ 0xD
  1799                           
  1800  007D                     ??_wait_ms:	
  1801                           ; 1 bytes @ 0xD
  1802                           
  1803  007D                     ??_initStateManager:	
  1804                           ; 1 bytes @ 0xD
  1805                           
  1806  007D                     ??_getSwitch1State:	
  1807                           ; 1 bytes @ 0xD
  1808                           
  1809  007D                     ??_getSwitch2State:	
  1810                           ; 1 bytes @ 0xD
  1811                           
  1812  007D                     ??_updateSwitch1State:	
  1813                           ; 1 bytes @ 0xD
  1814                           
  1815  007D                     ??_updateSwitch2State:	
  1816                           ; 1 bytes @ 0xD
  1817                           
  1818  007D                     ??_setSwitch1OffFinish:	
  1819                           ; 1 bytes @ 0xD
  1820                           
  1821                           
  1822                           	psect	cstackBANK0
  1823  0044                     __pcstackBANK0:	
  1824                           ; 1 bytes @ 0xD
  1825                           
  1826  0044                     ??_saveState:	
  1827  0044                     ?_wait_ms:	
  1828                           ; 1 bytes @ 0x0
  1829                           
  1830  0044                     getCurrentState@r:	
  1831                           ; 1 bytes @ 0x0
  1832                           
  1833  0044                     wait_ms@time:	
  1834                           ; 1 bytes @ 0x0
  1835                           
  1836                           
  1837                           ; 2 bytes @ 0x0
  1838  0044                     	ds	1
  1839  0045                     ?_getSwitch1State:	
  1840  0045                     ?_getSwitch2State:	
  1841                           ; 2 bytes @ 0x1
  1842                           
  1843                           
  1844                           ; 2 bytes @ 0x1
  1845  0045                     	ds	2
  1846  0047                     ?_updateSwitch1State:	
  1847  0047                     ?_updateSwitch2State:	
  1848                           ; 1 bytes @ 0x3
  1849                           
  1850  0047                     updateSwitch1State@state:	
  1851                           ; 1 bytes @ 0x3
  1852                           
  1853  0047                     updateSwitch2State@state:	
  1854                           ; 2 bytes @ 0x3
  1855                           
  1856                           
  1857                           ; 2 bytes @ 0x3
  1858  0047                     	ds	2
  1859  0049                     ?_setSwitch1State:	
  1860  0049                     ?_setSwitch2State:	
  1861                           ; 1 bytes @ 0x5
  1862                           
  1863  0049                     setSwitch1State@f_state:	
  1864                           ; 1 bytes @ 0x5
  1865                           
  1866  0049                     setSwitch2State@f_state:	
  1867                           ; 2 bytes @ 0x5
  1868                           
  1869                           
  1870                           ; 2 bytes @ 0x5
  1871  0049                     	ds	2
  1872  004B                     ??_updateSwitch1:	
  1873  004B                     ??_updateSwitch2:	
  1874                           ; 1 bytes @ 0x7
  1875                           
  1876  004B                     initSwitch1@initState:	
  1877                           ; 1 bytes @ 0x7
  1878                           
  1879  004B                     initSwitch2@initState:	
  1880                           ; 2 bytes @ 0x7
  1881                           
  1882                           
  1883                           ; 2 bytes @ 0x7
  1884  004B                     	ds	2
  1885                           
  1886                           	psect	maintext
  1887  03B3                     __pmaintext:	
  1888 ;;
  1889 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1890 ;;
  1891 ;; *************** function _main *****************
  1892 ;; Defined at:
  1893 ;;		line 28 in file "main.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;		None
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;		None
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : B1F/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMMON   BANK0   BANK1
  1907 ;;      Params:         0       0       0
  1908 ;;      Locals:         0       0       0
  1909 ;;      Temps:          0       0       0
  1910 ;;      Totals:         0       0       0
  1911 ;;Total ram usage:        0 bytes
  1912 ;; Hardware stack levels required when called:    7
  1913 ;; This function calls:
  1914 ;;		_ConfigureOscillator
  1915 ;;		_InitApp
  1916 ;;		_initSwitch1
  1917 ;;		_initSwitch2
  1918 ;;		_updateSwitch1
  1919 ;;		_updateSwitch2
  1920 ;; This function is called by:
  1921 ;;		Startup code after reset
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           
  1926                           ;psect for function _main
  1927  03B3                     _main:	
  1928                           
  1929                           ;main.c: 29: ConfigureOscillator();
  1930                           
  1931                           ;incstack = 0
  1932                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1933  03B3  23D2               	fcall	_ConfigureOscillator
  1934                           
  1935                           ;main.c: 30: InitApp();
  1936  03B4  2324               	fcall	_InitApp
  1937                           
  1938                           ;main.c: 33: initSwitch1();
  1939  03B5  2393               	fcall	_initSwitch1
  1940                           
  1941                           ;main.c: 34: initSwitch2();
  1942  03B6  237B               	fcall	_initSwitch2
  1943  03B7                     l1682:	
  1944                           ;main.c: 36: while (1) {
  1945                           
  1946                           
  1947                           ;main.c: 37: updateSwitch1();
  1948  03B7  20B9               	fcall	_updateSwitch1
  1949                           
  1950                           ;main.c: 38: updateSwitch2();
  1951  03B8  2021               	fcall	_updateSwitch2
  1952  03B9  2BB7               	goto	l1682
  1953  03BA                     __end_of_main:	
  1954                           
  1955                           	psect	text1
  1956  0021                     __ptext1:	
  1957 ;; *************** function _updateSwitch2 *****************
  1958 ;; Defined at:
  1959 ;;		line 29 in file "switch2.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;		None
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMMON   BANK0   BANK1
  1973 ;;      Params:         0       0       0
  1974 ;;      Locals:         0       0       0
  1975 ;;      Temps:          0       1       0
  1976 ;;      Totals:         0       1       0
  1977 ;;Total ram usage:        1 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    6
  1980 ;; This function calls:
  1981 ;;		_setSwitch1OffFinish
  1982 ;;		_setSwitch1OffStart
  1983 ;;		_setSwitch2State
  1984 ;; This function is called by:
  1985 ;;		_main
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           
  1990                           ;psect for function _updateSwitch2
  1991  0021                     _updateSwitch2:	
  1992                           
  1993                           ;switch2.c: 36: if (PORTAbits.RA5 == 0) {
  1994                           
  1995                           ;incstack = 0
  1996                           ; Regs used in _updateSwitch2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1997  0021  0020               	movlb	0	; select bank0
  1998  0022  1A8C               	btfsc	12,5	;volatile
  1999  0023  2834               	goto	l1558
  2000                           
  2001                           ;switch2.c: 37: if (switch2_pressed > 0) {
  2002  0024  0831               	movf	_switch2_pressed+1,w
  2003  0025  3A80               	xorlw	128
  2004  0026  00CB               	movwf	??_updateSwitch2
  2005  0027  3080               	movlw	128
  2006  0028  024B               	subwf	??_updateSwitch2,w
  2007  0029  1D03               	skipz
  2008  002A  282D               	goto	u965
  2009  002B  3001               	movlw	1
  2010  002C  0230               	subwf	_switch2_pressed,w
  2011  002D                     u965:	
  2012  002D  1C03               	skipc
  2013  002E  2844               	goto	l1562
  2014                           
  2015                           ;switch2.c: 38: switch2_pressed--;
  2016  002F  30FF               	movlw	255
  2017  0030  0020               	movlb	0	; select bank0
  2018  0031  07B0               	addwf	_switch2_pressed,f
  2019  0032  30FF               	movlw	255
  2020  0033  2843               	goto	L1
  2021  0034                     l1558:	
  2022                           ;switch2.c: 39: }
  2023                           ;switch2.c: 40: } else if (switch2_pressed < 25) {
  2024                           
  2025  0034  0831               	movf	_switch2_pressed+1,w
  2026  0035  3A80               	xorlw	128
  2027  0036  00CB               	movwf	??_updateSwitch2
  2028  0037  3080               	movlw	128
  2029  0038  024B               	subwf	??_updateSwitch2,w
  2030  0039  1D03               	skipz
  2031  003A  283D               	goto	u975
  2032  003B  3019               	movlw	25
  2033  003C  0230               	subwf	_switch2_pressed,w
  2034  003D                     u975:	
  2035  003D  1803               	skipnc
  2036  003E  2844               	goto	l1562
  2037                           
  2038                           ;switch2.c: 41: switch2_pressed++;
  2039  003F  3001               	movlw	1
  2040  0040  0020               	movlb	0	; select bank0
  2041  0041  07B0               	addwf	_switch2_pressed,f
  2042  0042  3000               	movlw	0
  2043  0043                     L1:	
  2044  0043  3DB1               	addwfc	_switch2_pressed+1,f
  2045  0044                     l1562:	
  2046                           
  2047                           ;switch2.c: 42: }
  2048                           ;switch2.c: 48: if (switch2_pressed == 0) {
  2049  0044  0020               	movlb	0	; select bank0
  2050  0045  0830               	movf	_switch2_pressed,w
  2051  0046  0431               	iorwf	_switch2_pressed+1,w
  2052  0047  1D03               	btfss	3,2
  2053  0048  288D               	goto	l1592
  2054                           
  2055                           ;switch2.c: 49: switch2_down++;
  2056  0049  3001               	movlw	1
  2057  004A  07AE               	addwf	_switch2_down,f
  2058  004B  3000               	movlw	0
  2059  004C  3DAF               	addwfc	_switch2_down+1,f
  2060                           
  2061                           ;switch2.c: 59: if (switch2_down >= long_press_limit) {
  2062  004D  082F               	movf	_switch2_down+1,w
  2063  004E  3A80               	xorlw	128
  2064  004F  00CB               	movwf	??_updateSwitch2
  2065  0050  083B               	movf	_long_press_limit+1,w
  2066  0051  3A80               	xorlw	128
  2067  0052  024B               	subwf	??_updateSwitch2,w
  2068  0053  1D03               	skipz
  2069  0054  2857               	goto	u995
  2070  0055  083A               	movf	_long_press_limit,w
  2071  0056  022E               	subwf	_switch2_down,w
  2072  0057                     u995:	
  2073  0057  1C03               	skipc
  2074  0058  2871               	goto	l1580
  2075                           
  2076                           ;switch2.c: 60: switch2_down = long_press_limit;
  2077  0059  0020               	movlb	0	; select bank0
  2078  005A  083B               	movf	_long_press_limit+1,w
  2079  005B  00AF               	movwf	_switch2_down+1
  2080  005C  083A               	movf	_long_press_limit,w
  2081  005D  00AE               	movwf	_switch2_down
  2082                           
  2083                           ;switch2.c: 61: setSwitch1OffStart();
  2084  005E  2363               	fcall	_setSwitch1OffStart
  2085                           
  2086                           ;switch2.c: 62: switch2_toggle = 0;
  2087  005F  0020               	movlb	0	; select bank0
  2088  0060  01B2               	clrf	_switch2_toggle
  2089  0061  01B3               	clrf	_switch2_toggle+1
  2090                           
  2091                           ;switch2.c: 64: if (switch2_state == 0) {
  2092  0062  0840               	movf	_switch2_state,w
  2093  0063  0441               	iorwf	_switch2_state+1,w
  2094  0064  1D03               	btfss	3,2
  2095  0065  286F               	goto	l1578
  2096                           
  2097                           ;switch2.c: 66: switch2_turning_on = 1;
  2098  0066  3001               	movlw	1
  2099  0067  00B4               	movwf	_switch2_turning_on
  2100  0068  3000               	movlw	0
  2101  0069  00B5               	movwf	_switch2_turning_on+1
  2102                           
  2103                           ;switch2.c: 67: setSwitch2State(1);
  2104  006A  3001               	movlw	1
  2105  006B  00C9               	movwf	setSwitch2State@f_state
  2106  006C  3000               	movlw	0
  2107  006D  00CA               	movwf	setSwitch2State@f_state+1
  2108  006E  21A4               	fcall	_setSwitch2State
  2109  006F                     l1578:	
  2110                           
  2111                           ;switch2.c: 68: }
  2112                           ;switch2.c: 69: setSwitch1OffFinish();
  2113  006F  22FA               	fcall	_setSwitch1OffFinish
  2114                           
  2115                           ;switch2.c: 70: } else {
  2116  0070  2889               	goto	l1590
  2117  0071                     l1580:	
  2118                           
  2119                           ;switch2.c: 72: if (switch2_state == 1) {
  2120  0071  0020               	movlb	0	; select bank0
  2121  0072  0340               	decf	_switch2_state,w
  2122  0073  0441               	iorwf	_switch2_state+1,w
  2123  0074  1D03               	btfss	3,2
  2124  0075  2881               	goto	l1588
  2125                           
  2126                           ;switch2.c: 73: if (switch2_up == 1) {
  2127  0076  0342               	decf	_switch2_up,w
  2128  0077  0443               	iorwf	_switch2_up+1,w
  2129  0078  1D03               	btfss	3,2
  2130  0079  2889               	goto	l1590
  2131                           
  2132                           ;switch2.c: 74: switch2_toggle = 1;
  2133  007A  3001               	movlw	1
  2134  007B  00B2               	movwf	_switch2_toggle
  2135  007C  3000               	movlw	0
  2136  007D  00B3               	movwf	_switch2_toggle+1
  2137                           
  2138                           ;switch2.c: 75: switch2_turning_on = 0;
  2139  007E  01B4               	clrf	_switch2_turning_on
  2140  007F  01B5               	clrf	_switch2_turning_on+1
  2141                           
  2142                           ;switch2.c: 76: }
  2143                           ;switch2.c: 78: } else {
  2144  0080  2889               	goto	l1590
  2145  0081                     l1588:	
  2146                           
  2147                           ;switch2.c: 80: switch2_turning_on = 1;
  2148  0081  3001               	movlw	1
  2149  0082  00B4               	movwf	_switch2_turning_on
  2150  0083  3000               	movlw	0
  2151  0084  00B5               	movwf	_switch2_turning_on+1
  2152                           
  2153                           ;switch2.c: 81: switch2_toggle = 1;
  2154  0085  3001               	movlw	1
  2155  0086  00B2               	movwf	_switch2_toggle
  2156  0087  3000               	movlw	0
  2157  0088  00B3               	movwf	_switch2_toggle+1
  2158  0089                     l1590:	
  2159                           
  2160                           ;switch2.c: 83: }
  2161                           ;switch2.c: 84: }
  2162                           ;switch2.c: 85: switch2_up = 0;
  2163  0089  0020               	movlb	0	; select bank0
  2164  008A  01C2               	clrf	_switch2_up
  2165  008B  01C3               	clrf	_switch2_up+1
  2166                           
  2167                           ;switch2.c: 86: } else if (switch2_pressed >= 25) {
  2168  008C  0008               	return
  2169  008D                     l1592:	
  2170  008D  0831               	movf	_switch2_pressed+1,w
  2171  008E  3A80               	xorlw	128
  2172  008F  00CB               	movwf	??_updateSwitch2
  2173  0090  3080               	movlw	128
  2174  0091  024B               	subwf	??_updateSwitch2,w
  2175  0092  1D03               	skipz
  2176  0093  2896               	goto	u1035
  2177  0094  3019               	movlw	25
  2178  0095  0230               	subwf	_switch2_pressed,w
  2179  0096                     u1035:	
  2180  0096  1C03               	skipc
  2181  0097  0008               	return
  2182                           
  2183                           ;switch2.c: 87: if (switch2_toggle == 1) {
  2184  0098  0020               	movlb	0	; select bank0
  2185  0099  0332               	decf	_switch2_toggle,w
  2186  009A  0433               	iorwf	_switch2_toggle+1,w
  2187  009B  1D03               	btfss	3,2
  2188  009C  28A2               	goto	l1598
  2189                           
  2190                           ;switch2.c: 88: setSwitch2State(switch2_turning_on);
  2191  009D  0835               	movf	_switch2_turning_on+1,w
  2192  009E  00CA               	movwf	setSwitch2State@f_state+1
  2193  009F  0834               	movf	_switch2_turning_on,w
  2194  00A0  00C9               	movwf	setSwitch2State@f_state
  2195  00A1  21A4               	fcall	_setSwitch2State
  2196  00A2                     l1598:	
  2197                           
  2198                           ;switch2.c: 89: }
  2199                           ;switch2.c: 90: LATCbits.LATC5 = switch2_state;
  2200  00A2  0020               	movlb	0	; select bank0
  2201  00A3  0C40               	rrf	_switch2_state,w
  2202  00A4  0022               	movlb	2	; select bank2
  2203  00A5  1C03               	skipc
  2204  00A6  128E               	bcf	14,5	;volatile
  2205  00A7  1803               	skipnc
  2206  00A8  168E               	bsf	14,5	;volatile
  2207                           
  2208                           ;switch2.c: 91: switch2_turning_on = 0;
  2209  00A9  0020               	movlb	0	; select bank0
  2210  00AA  01B4               	clrf	_switch2_turning_on
  2211  00AB  01B5               	clrf	_switch2_turning_on+1
  2212                           
  2213                           ;switch2.c: 92: switch2_toggle = 0;
  2214  00AC  01B2               	clrf	_switch2_toggle
  2215  00AD  01B3               	clrf	_switch2_toggle+1
  2216                           
  2217                           ;switch2.c: 93: switch2_up = 1;
  2218  00AE  3001               	movlw	1
  2219  00AF  00C2               	movwf	_switch2_up
  2220  00B0  3000               	movlw	0
  2221  00B1  00C3               	movwf	_switch2_up+1
  2222                           
  2223                           ;switch2.c: 94: switch2_down = 0;
  2224  00B2  01AE               	clrf	_switch2_down
  2225  00B3  01AF               	clrf	_switch2_down+1
  2226                           
  2227                           ;switch2.c: 95: switch2_pressed = 25;
  2228  00B4  3019               	movlw	25
  2229  00B5  00B0               	movwf	_switch2_pressed
  2230  00B6  3000               	movlw	0
  2231  00B7  00B1               	movwf	_switch2_pressed+1
  2232  00B8  0008               	return
  2233  00B9                     __end_of_updateSwitch2:	
  2234                           
  2235                           	psect	text2
  2236  0363                     __ptext2:	
  2237 ;; *************** function _setSwitch1OffStart *****************
  2238 ;; Defined at:
  2239 ;;		line 114 in file "switch1.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;		None
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;		None
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, status,2, status,0
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMMON   BANK0   BANK1
  2253 ;;      Params:         0       0       0
  2254 ;;      Locals:         0       0       0
  2255 ;;      Temps:          0       0       0
  2256 ;;      Totals:         0       0       0
  2257 ;;Total ram usage:        0 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    1
  2260 ;; This function calls:
  2261 ;;		Nothing
  2262 ;; This function is called by:
  2263 ;;		_updateSwitch2
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           
  2268                           ;psect for function _setSwitch1OffStart
  2269  0363                     _setSwitch1OffStart:	
  2270                           
  2271                           ;switch1.c: 115: if (switch1_state == 0) {return;}
  2272                           
  2273                           ;incstack = 0
  2274                           ; Regs used in _setSwitch1OffStart: [wreg+status,2+status,0]
  2275  0363  0020               	movlb	0	; select bank0
  2276  0364  083C               	movf	_switch1_state,w
  2277  0365  043D               	iorwf	_switch1_state+1,w
  2278  0366  1903               	btfsc	3,2
  2279  0367  0008               	return
  2280                           
  2281                           ;switch1.c: 116: switch1_state = 0;
  2282  0368  01BC               	clrf	_switch1_state
  2283  0369  01BD               	clrf	_switch1_state+1
  2284                           
  2285                           ;switch1.c: 117: LATAbits.LATA2 = 0;
  2286  036A  0022               	movlb	2	; select bank2
  2287  036B  110C               	bcf	12,2	;volatile
  2288                           
  2289                           ;switch1.c: 118: LATCbits.LATC2 = 0;
  2290  036C  110E               	bcf	14,2	;volatile
  2291                           
  2292                           ;switch1.c: 119: LATCbits.LATC1 = 1;
  2293  036D  148E               	bsf	14,1	;volatile
  2294  036E  0008               	return
  2295  036F                     __end_of_setSwitch1OffStart:	
  2296                           
  2297                           	psect	text3
  2298  02FA                     __ptext3:	
  2299 ;; *************** function _setSwitch1OffFinish *****************
  2300 ;; Defined at:
  2301 ;;		line 123 in file "switch1.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMMON   BANK0   BANK1
  2315 ;;      Params:         0       0       0
  2316 ;;      Locals:         0       0       0
  2317 ;;      Temps:          0       0       0
  2318 ;;      Totals:         0       0       0
  2319 ;;Total ram usage:        0 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    5
  2322 ;; This function calls:
  2323 ;;		_updateSwitch1State
  2324 ;;		_wait_ms
  2325 ;; This function is called by:
  2326 ;;		_updateSwitch2
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           
  2331                           ;psect for function _setSwitch1OffFinish
  2332  02FA                     _setSwitch1OffFinish:	
  2333                           
  2334                           ;switch1.c: 124: wait_ms(20);
  2335                           
  2336                           ;incstack = 0
  2337                           ; Regs used in _setSwitch1OffFinish: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2338  02FA  3014               	movlw	20
  2339  02FB  0020               	movlb	0	; select bank0
  2340  02FC  00C4               	movwf	wait_ms@time
  2341  02FD  3000               	movlw	0
  2342  02FE  00C5               	movwf	wait_ms@time+1
  2343  02FF  227B               	fcall	_wait_ms
  2344                           
  2345                           ;switch1.c: 126: LATCbits.LATC2 = 0;
  2346  0300  0022               	movlb	2	; select bank2
  2347  0301  110E               	bcf	14,2	;volatile
  2348                           
  2349                           ;switch1.c: 127: LATCbits.LATC1 = 0;
  2350  0302  108E               	bcf	14,1	;volatile
  2351                           
  2352                           ;switch1.c: 129: updateSwitch1State(0);
  2353  0303  3000               	movlw	0
  2354  0304  0020               	movlb	0	; select bank0
  2355  0305  00C7               	movwf	updateSwitch1State@state
  2356  0306  00C8               	movwf	updateSwitch1State@state+1
  2357  0307  2356               	fcall	_updateSwitch1State
  2358                           
  2359                           ;switch1.c: 130: wait_ms(20);
  2360  0308  3014               	movlw	20
  2361  0309  0020               	movlb	0	; select bank0
  2362  030A  00C4               	movwf	wait_ms@time
  2363  030B  3000               	movlw	0
  2364  030C  00C5               	movwf	wait_ms@time+1
  2365  030D  227B               	fcall	_wait_ms
  2366  030E  0008               	return
  2367  030F                     __end_of_setSwitch1OffFinish:	
  2368                           
  2369                           	psect	text4
  2370  00B9                     __ptext4:	
  2371 ;; *************** function _updateSwitch1 *****************
  2372 ;; Defined at:
  2373 ;;		line 29 in file "switch1.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;		None
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;		None
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  1    wreg      void 
  2380 ;; Registers used:
  2381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMMON   BANK0   BANK1
  2387 ;;      Params:         0       0       0
  2388 ;;      Locals:         0       0       0
  2389 ;;      Temps:          0       1       0
  2390 ;;      Totals:         0       1       0
  2391 ;;Total ram usage:        1 bytes
  2392 ;; Hardware stack levels used:    1
  2393 ;; Hardware stack levels required when called:    6
  2394 ;; This function calls:
  2395 ;;		_setSwitch1State
  2396 ;;		_setSwitch2OffFinish
  2397 ;;		_setSwitch2OffStart
  2398 ;; This function is called by:
  2399 ;;		_main
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           
  2404                           ;psect for function _updateSwitch1
  2405  00B9                     _updateSwitch1:	
  2406                           
  2407                           ;switch1.c: 36: if (PORTAbits.RA4 == 0) {
  2408                           
  2409                           ;incstack = 0
  2410                           ; Regs used in _updateSwitch1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2411  00B9  0020               	movlb	0	; select bank0
  2412  00BA  1A0C               	btfsc	12,4	;volatile
  2413  00BB  28CC               	goto	l1500
  2414                           
  2415                           ;switch1.c: 37: if (switch1_pressed > 0) {
  2416  00BC  0829               	movf	_switch1_pressed+1,w
  2417  00BD  3A80               	xorlw	128
  2418  00BE  00CB               	movwf	??_updateSwitch1
  2419  00BF  3080               	movlw	128
  2420  00C0  024B               	subwf	??_updateSwitch1,w
  2421  00C1  1D03               	skipz
  2422  00C2  28C5               	goto	u865
  2423  00C3  3001               	movlw	1
  2424  00C4  0228               	subwf	_switch1_pressed,w
  2425  00C5                     u865:	
  2426  00C5  1C03               	skipc
  2427  00C6  28DC               	goto	l1504
  2428                           
  2429                           ;switch1.c: 38: switch1_pressed--;
  2430  00C7  30FF               	movlw	255
  2431  00C8  0020               	movlb	0	; select bank0
  2432  00C9  07A8               	addwf	_switch1_pressed,f
  2433  00CA  30FF               	movlw	255
  2434  00CB  28DB               	goto	L2
  2435  00CC                     l1500:	
  2436                           ;switch1.c: 39: }
  2437                           ;switch1.c: 40: } else if (switch1_pressed < 25) {
  2438                           
  2439  00CC  0829               	movf	_switch1_pressed+1,w
  2440  00CD  3A80               	xorlw	128
  2441  00CE  00CB               	movwf	??_updateSwitch1
  2442  00CF  3080               	movlw	128
  2443  00D0  024B               	subwf	??_updateSwitch1,w
  2444  00D1  1D03               	skipz
  2445  00D2  28D5               	goto	u875
  2446  00D3  3019               	movlw	25
  2447  00D4  0228               	subwf	_switch1_pressed,w
  2448  00D5                     u875:	
  2449  00D5  1803               	skipnc
  2450  00D6  28DC               	goto	l1504
  2451                           
  2452                           ;switch1.c: 41: switch1_pressed++;
  2453  00D7  3001               	movlw	1
  2454  00D8  0020               	movlb	0	; select bank0
  2455  00D9  07A8               	addwf	_switch1_pressed,f
  2456  00DA  3000               	movlw	0
  2457  00DB                     L2:	
  2458  00DB  3DA9               	addwfc	_switch1_pressed+1,f
  2459  00DC                     l1504:	
  2460                           
  2461                           ;switch1.c: 42: }
  2462                           ;switch1.c: 48: if (switch1_pressed == 0) {
  2463  00DC  0020               	movlb	0	; select bank0
  2464  00DD  0828               	movf	_switch1_pressed,w
  2465  00DE  0429               	iorwf	_switch1_pressed+1,w
  2466  00DF  1D03               	btfss	3,2
  2467  00E0  2925               	goto	l1534
  2468                           
  2469                           ;switch1.c: 49: switch1_down++;
  2470  00E1  3001               	movlw	1
  2471  00E2  07A6               	addwf	_switch1_down,f
  2472  00E3  3000               	movlw	0
  2473  00E4  3DA7               	addwfc	_switch1_down+1,f
  2474                           
  2475                           ;switch1.c: 59: if (switch1_down >= long_press_limit) {
  2476  00E5  0827               	movf	_switch1_down+1,w
  2477  00E6  3A80               	xorlw	128
  2478  00E7  00CB               	movwf	??_updateSwitch1
  2479  00E8  083B               	movf	_long_press_limit+1,w
  2480  00E9  3A80               	xorlw	128
  2481  00EA  024B               	subwf	??_updateSwitch1,w
  2482  00EB  1D03               	skipz
  2483  00EC  28EF               	goto	u895
  2484  00ED  083A               	movf	_long_press_limit,w
  2485  00EE  0226               	subwf	_switch1_down,w
  2486  00EF                     u895:	
  2487  00EF  1C03               	skipc
  2488  00F0  2909               	goto	l1522
  2489                           
  2490                           ;switch1.c: 60: switch1_down = long_press_limit;
  2491  00F1  0020               	movlb	0	; select bank0
  2492  00F2  083B               	movf	_long_press_limit+1,w
  2493  00F3  00A7               	movwf	_switch1_down+1
  2494  00F4  083A               	movf	_long_press_limit,w
  2495  00F5  00A6               	movwf	_switch1_down
  2496                           
  2497                           ;switch1.c: 61: setSwitch2OffStart();
  2498  00F6  236F               	fcall	_setSwitch2OffStart
  2499                           
  2500                           ;switch1.c: 62: switch1_toggle = 0;
  2501  00F7  0020               	movlb	0	; select bank0
  2502  00F8  01AA               	clrf	_switch1_toggle
  2503  00F9  01AB               	clrf	_switch1_toggle+1
  2504                           
  2505                           ;switch1.c: 64: if (switch1_state == 0) {
  2506  00FA  083C               	movf	_switch1_state,w
  2507  00FB  043D               	iorwf	_switch1_state+1,w
  2508  00FC  1D03               	btfss	3,2
  2509  00FD  2907               	goto	l1520
  2510                           
  2511                           ;switch1.c: 66: switch1_turning_on = 1;
  2512  00FE  3001               	movlw	1
  2513  00FF  00AC               	movwf	_switch1_turning_on
  2514  0100  3000               	movlw	0
  2515  0101  00AD               	movwf	_switch1_turning_on+1
  2516                           
  2517                           ;switch1.c: 67: setSwitch1State(1);
  2518  0102  3001               	movlw	1
  2519  0103  00C9               	movwf	setSwitch1State@f_state
  2520  0104  3000               	movlw	0
  2521  0105  00CA               	movwf	setSwitch1State@f_state+1
  2522  0106  21DE               	fcall	_setSwitch1State
  2523  0107                     l1520:	
  2524                           
  2525                           ;switch1.c: 68: }
  2526                           ;switch1.c: 69: setSwitch2OffFinish();
  2527  0107  230F               	fcall	_setSwitch2OffFinish
  2528                           
  2529                           ;switch1.c: 70: } else {
  2530  0108  2921               	goto	l1532
  2531  0109                     l1522:	
  2532                           
  2533                           ;switch1.c: 71: if (switch1_state == 1) {
  2534  0109  0020               	movlb	0	; select bank0
  2535  010A  033C               	decf	_switch1_state,w
  2536  010B  043D               	iorwf	_switch1_state+1,w
  2537  010C  1D03               	btfss	3,2
  2538  010D  2919               	goto	l1530
  2539                           
  2540                           ;switch1.c: 72: if (switch1_up == 1) {
  2541  010E  033E               	decf	_switch1_up,w
  2542  010F  043F               	iorwf	_switch1_up+1,w
  2543  0110  1D03               	btfss	3,2
  2544  0111  2921               	goto	l1532
  2545                           
  2546                           ;switch1.c: 73: switch1_toggle = 1;
  2547  0112  3001               	movlw	1
  2548  0113  00AA               	movwf	_switch1_toggle
  2549  0114  3000               	movlw	0
  2550  0115  00AB               	movwf	_switch1_toggle+1
  2551                           
  2552                           ;switch1.c: 74: switch1_turning_on = 0;
  2553  0116  01AC               	clrf	_switch1_turning_on
  2554  0117  01AD               	clrf	_switch1_turning_on+1
  2555                           
  2556                           ;switch1.c: 75: }
  2557                           ;switch1.c: 77: } else {
  2558  0118  2921               	goto	l1532
  2559  0119                     l1530:	
  2560                           
  2561                           ;switch1.c: 79: switch1_turning_on = 1;
  2562  0119  3001               	movlw	1
  2563  011A  00AC               	movwf	_switch1_turning_on
  2564  011B  3000               	movlw	0
  2565  011C  00AD               	movwf	_switch1_turning_on+1
  2566                           
  2567                           ;switch1.c: 80: switch1_toggle = 1;
  2568  011D  3001               	movlw	1
  2569  011E  00AA               	movwf	_switch1_toggle
  2570  011F  3000               	movlw	0
  2571  0120  00AB               	movwf	_switch1_toggle+1
  2572  0121                     l1532:	
  2573                           
  2574                           ;switch1.c: 82: }
  2575                           ;switch1.c: 83: }
  2576                           ;switch1.c: 84: switch1_up = 0;
  2577  0121  0020               	movlb	0	; select bank0
  2578  0122  01BE               	clrf	_switch1_up
  2579  0123  01BF               	clrf	_switch1_up+1
  2580                           
  2581                           ;switch1.c: 85: } else if (switch1_pressed >= 25) {
  2582  0124  0008               	return
  2583  0125                     l1534:	
  2584  0125  0829               	movf	_switch1_pressed+1,w
  2585  0126  3A80               	xorlw	128
  2586  0127  00CB               	movwf	??_updateSwitch1
  2587  0128  3080               	movlw	128
  2588  0129  024B               	subwf	??_updateSwitch1,w
  2589  012A  1D03               	skipz
  2590  012B  292E               	goto	u935
  2591  012C  3019               	movlw	25
  2592  012D  0228               	subwf	_switch1_pressed,w
  2593  012E                     u935:	
  2594  012E  1C03               	skipc
  2595  012F  0008               	return
  2596                           
  2597                           ;switch1.c: 86: if (switch1_toggle == 1) {
  2598  0130  0020               	movlb	0	; select bank0
  2599  0131  032A               	decf	_switch1_toggle,w
  2600  0132  042B               	iorwf	_switch1_toggle+1,w
  2601  0133  1D03               	btfss	3,2
  2602  0134  293A               	goto	l1540
  2603                           
  2604                           ;switch1.c: 87: setSwitch1State(switch1_turning_on);
  2605  0135  082D               	movf	_switch1_turning_on+1,w
  2606  0136  00CA               	movwf	setSwitch1State@f_state+1
  2607  0137  082C               	movf	_switch1_turning_on,w
  2608  0138  00C9               	movwf	setSwitch1State@f_state
  2609  0139  21DE               	fcall	_setSwitch1State
  2610  013A                     l1540:	
  2611                           
  2612                           ;switch1.c: 88: }
  2613                           ;switch1.c: 89: LATAbits.LATA2 = switch1_state;
  2614  013A  0020               	movlb	0	; select bank0
  2615  013B  0C3C               	rrf	_switch1_state,w
  2616  013C  0022               	movlb	2	; select bank2
  2617  013D  1C03               	skipc
  2618  013E  110C               	bcf	12,2	;volatile
  2619  013F  1803               	skipnc
  2620  0140  150C               	bsf	12,2	;volatile
  2621                           
  2622                           ;switch1.c: 90: switch1_turning_on = 0;
  2623  0141  0020               	movlb	0	; select bank0
  2624  0142  01AC               	clrf	_switch1_turning_on
  2625  0143  01AD               	clrf	_switch1_turning_on+1
  2626                           
  2627                           ;switch1.c: 91: switch1_toggle = 0;
  2628  0144  01AA               	clrf	_switch1_toggle
  2629  0145  01AB               	clrf	_switch1_toggle+1
  2630                           
  2631                           ;switch1.c: 92: switch1_up = 1;
  2632  0146  3001               	movlw	1
  2633  0147  00BE               	movwf	_switch1_up
  2634  0148  3000               	movlw	0
  2635  0149  00BF               	movwf	_switch1_up+1
  2636                           
  2637                           ;switch1.c: 93: switch1_down = 0;
  2638  014A  01A6               	clrf	_switch1_down
  2639  014B  01A7               	clrf	_switch1_down+1
  2640                           
  2641                           ;switch1.c: 94: switch1_pressed = 25;
  2642  014C  3019               	movlw	25
  2643  014D  00A8               	movwf	_switch1_pressed
  2644  014E  3000               	movlw	0
  2645  014F  00A9               	movwf	_switch1_pressed+1
  2646  0150  0008               	return
  2647  0151                     __end_of_updateSwitch1:	
  2648                           
  2649                           	psect	text5
  2650  036F                     __ptext5:	
  2651 ;; *************** function _setSwitch2OffStart *****************
  2652 ;; Defined at:
  2653 ;;		line 116 in file "switch2.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;		None
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      void 
  2660 ;; Registers used:
  2661 ;;		wreg, status,2, status,0
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMMON   BANK0   BANK1
  2667 ;;      Params:         0       0       0
  2668 ;;      Locals:         0       0       0
  2669 ;;      Temps:          0       0       0
  2670 ;;      Totals:         0       0       0
  2671 ;;Total ram usage:        0 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    1
  2674 ;; This function calls:
  2675 ;;		Nothing
  2676 ;; This function is called by:
  2677 ;;		_updateSwitch1
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           
  2682                           ;psect for function _setSwitch2OffStart
  2683  036F                     _setSwitch2OffStart:	
  2684                           
  2685                           ;switch2.c: 117: if (switch2_state == 0) {return;}
  2686                           
  2687                           ;incstack = 0
  2688                           ; Regs used in _setSwitch2OffStart: [wreg+status,2+status,0]
  2689  036F  0020               	movlb	0	; select bank0
  2690  0370  0840               	movf	_switch2_state,w
  2691  0371  0441               	iorwf	_switch2_state+1,w
  2692  0372  1903               	btfsc	3,2
  2693  0373  0008               	return
  2694                           
  2695                           ;switch2.c: 118: switch2_state = 0;
  2696  0374  01C0               	clrf	_switch2_state
  2697  0375  01C1               	clrf	_switch2_state+1
  2698                           
  2699                           ;switch2.c: 119: LATCbits.LATC5 = 0;
  2700  0376  0022               	movlb	2	; select bank2
  2701  0377  128E               	bcf	14,5	;volatile
  2702                           
  2703                           ;switch2.c: 120: LATCbits.LATC0 = 0;
  2704  0378  100E               	bcf	14,0	;volatile
  2705                           
  2706                           ;switch2.c: 121: LATCbits.LATC4 = 1;
  2707  0379  160E               	bsf	14,4	;volatile
  2708  037A  0008               	return
  2709  037B                     __end_of_setSwitch2OffStart:	
  2710                           
  2711                           	psect	text6
  2712  030F                     __ptext6:	
  2713 ;; *************** function _setSwitch2OffFinish *****************
  2714 ;; Defined at:
  2715 ;;		line 125 in file "switch2.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;		None
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;		None
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMMON   BANK0   BANK1
  2729 ;;      Params:         0       0       0
  2730 ;;      Locals:         0       0       0
  2731 ;;      Temps:          0       0       0
  2732 ;;      Totals:         0       0       0
  2733 ;;Total ram usage:        0 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    5
  2736 ;; This function calls:
  2737 ;;		_updateSwitch2State
  2738 ;;		_wait_ms
  2739 ;; This function is called by:
  2740 ;;		_updateSwitch1
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           
  2745                           ;psect for function _setSwitch2OffFinish
  2746  030F                     _setSwitch2OffFinish:	
  2747                           
  2748                           ;switch2.c: 126: wait_ms(20);
  2749                           
  2750                           ;incstack = 0
  2751                           ; Regs used in _setSwitch2OffFinish: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2752  030F  3014               	movlw	20
  2753  0310  0020               	movlb	0	; select bank0
  2754  0311  00C4               	movwf	wait_ms@time
  2755  0312  3000               	movlw	0
  2756  0313  00C5               	movwf	wait_ms@time+1
  2757  0314  227B               	fcall	_wait_ms
  2758                           
  2759                           ;switch2.c: 128: LATCbits.LATC0 = 0;
  2760  0315  0022               	movlb	2	; select bank2
  2761  0316  100E               	bcf	14,0	;volatile
  2762                           
  2763                           ;switch2.c: 129: LATCbits.LATC4 = 0;
  2764  0317  120E               	bcf	14,4	;volatile
  2765                           
  2766                           ;switch2.c: 131: updateSwitch2State(0);
  2767  0318  3000               	movlw	0
  2768  0319  0020               	movlb	0	; select bank0
  2769  031A  00C7               	movwf	updateSwitch2State@state
  2770  031B  00C8               	movwf	updateSwitch2State@state+1
  2771  031C  2349               	fcall	_updateSwitch2State
  2772                           
  2773                           ;switch2.c: 132: wait_ms(20);
  2774  031D  3014               	movlw	20
  2775  031E  0020               	movlb	0	; select bank0
  2776  031F  00C4               	movwf	wait_ms@time
  2777  0320  3000               	movlw	0
  2778  0321  00C5               	movwf	wait_ms@time+1
  2779  0322  227B               	fcall	_wait_ms
  2780  0323  0008               	return
  2781  0324                     __end_of_setSwitch2OffFinish:	
  2782                           
  2783                           	psect	text7
  2784  037B                     __ptext7:	
  2785 ;; *************** function _initSwitch2 *****************
  2786 ;; Defined at:
  2787 ;;		line 24 in file "switch2.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;		None
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;  initState       2    7[BANK0 ] int 
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  1    wreg      void 
  2794 ;; Registers used:
  2795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMMON   BANK0   BANK1
  2801 ;;      Params:         0       0       0
  2802 ;;      Locals:         0       2       0
  2803 ;;      Temps:          0       0       0
  2804 ;;      Totals:         0       2       0
  2805 ;;Total ram usage:        2 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    6
  2808 ;; This function calls:
  2809 ;;		_getSwitch2State
  2810 ;;		_setSwitch2State
  2811 ;; This function is called by:
  2812 ;;		_main
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           
  2817                           ;psect for function _initSwitch2
  2818  037B                     _initSwitch2:	
  2819                           
  2820                           ;switch2.c: 25: int initState = getSwitch2State();
  2821                           
  2822                           ;incstack = 0
  2823                           ; Regs used in _initSwitch2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2824  037B  2387               	fcall	_getSwitch2State
  2825  037C  0020               	movlb	0	; select bank0
  2826  037D  0846               	movf	?_getSwitch2State+1,w
  2827  037E  00CC               	movwf	initSwitch2@initState+1
  2828  037F  0845               	movf	?_getSwitch2State,w
  2829  0380  00CB               	movwf	initSwitch2@initState
  2830                           
  2831                           ;switch2.c: 26: setSwitch2State(initState);
  2832  0381  084C               	movf	initSwitch2@initState+1,w
  2833  0382  00CA               	movwf	setSwitch2State@f_state+1
  2834  0383  084B               	movf	initSwitch2@initState,w
  2835  0384  00C9               	movwf	setSwitch2State@f_state
  2836  0385  21A4               	fcall	_setSwitch2State
  2837  0386  0008               	return
  2838  0387                     __end_of_initSwitch2:	
  2839                           
  2840                           	psect	text8
  2841  01A4                     __ptext8:	
  2842 ;; *************** function _setSwitch2State *****************
  2843 ;; Defined at:
  2844 ;;		line 99 in file "switch2.c"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;  f_state         2    5[BANK0 ] int 
  2847 ;; Auto vars:     Size  Location     Type
  2848 ;;		None
  2849 ;; Return value:  Size  Location     Type
  2850 ;;                  1    wreg      void 
  2851 ;; Registers used:
  2852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2853 ;; Tracked objects:
  2854 ;;		On entry : 0/0
  2855 ;;		On exit  : 0/0
  2856 ;;		Unchanged: 0/0
  2857 ;; Data sizes:     COMMON   BANK0   BANK1
  2858 ;;      Params:         0       2       0
  2859 ;;      Locals:         0       0       0
  2860 ;;      Temps:          0       0       0
  2861 ;;      Totals:         0       2       0
  2862 ;;Total ram usage:        2 bytes
  2863 ;; Hardware stack levels used:    1
  2864 ;; Hardware stack levels required when called:    5
  2865 ;; This function calls:
  2866 ;;		_updateSwitch2State
  2867 ;;		_wait_ms
  2868 ;; This function is called by:
  2869 ;;		_initSwitch2
  2870 ;;		_updateSwitch2
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           
  2875                           ;psect for function _setSwitch2State
  2876  01A4                     _setSwitch2State:	
  2877                           
  2878                           ;switch2.c: 100: if (switch2_state == f_state) {return;}
  2879                           
  2880                           ;incstack = 0
  2881                           ; Regs used in _setSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2882  01A4  0020               	movlb	0	; select bank0
  2883  01A5  084A               	movf	setSwitch2State@f_state+1,w
  2884  01A6  0641               	xorwf	_switch2_state+1,w
  2885  01A7  1D03               	skipz
  2886  01A8  29AB               	goto	u825
  2887  01A9  0849               	movf	setSwitch2State@f_state,w
  2888  01AA  0640               	xorwf	_switch2_state,w
  2889  01AB                     u825:	
  2890  01AB  1903               	btfsc	3,2
  2891  01AC  0008               	return
  2892                           
  2893                           ;switch2.c: 101: switch2_state = f_state;
  2894  01AD  084A               	movf	setSwitch2State@f_state+1,w
  2895  01AE  00C1               	movwf	_switch2_state+1
  2896  01AF  0849               	movf	setSwitch2State@f_state,w
  2897  01B0  00C0               	movwf	_switch2_state
  2898                           
  2899                           ;switch2.c: 102: LATCbits.LATC5 = f_state;
  2900  01B1  0C49               	rrf	setSwitch2State@f_state,w
  2901  01B2  0022               	movlb	2	; select bank2
  2902  01B3  1C03               	skipc
  2903  01B4  128E               	bcf	14,5	;volatile
  2904  01B5  1803               	skipnc
  2905  01B6  168E               	bsf	14,5	;volatile
  2906                           
  2907                           ;switch2.c: 103: LATCbits.LATC0 = f_state;
  2908  01B7  0020               	movlb	0	; select bank0
  2909  01B8  0C49               	rrf	setSwitch2State@f_state,w
  2910  01B9  0022               	movlb	2	; select bank2
  2911  01BA  1C03               	skipc
  2912  01BB  100E               	bcf	14,0	;volatile
  2913  01BC  1803               	skipnc
  2914  01BD  140E               	bsf	14,0	;volatile
  2915                           
  2916                           ;switch2.c: 104: LATCbits.LATC4 = !f_state;
  2917  01BE  0020               	movlb	0	; select bank0
  2918  01BF  0849               	movf	setSwitch2State@f_state,w
  2919  01C0  044A               	iorwf	setSwitch2State@f_state+1,w
  2920  01C1  1D03               	btfss	3,2
  2921  01C2  29C6               	goto	u830
  2922  01C3  0022               	movlb	2	; select bank2
  2923  01C4  160E               	bsf	14,4	;volatile
  2924  01C5  29C8               	goto	l1480
  2925  01C6                     u830:	
  2926  01C6  0022               	movlb	2	; select bank2
  2927  01C7  120E               	bcf	14,4	;volatile
  2928  01C8                     l1480:	
  2929                           
  2930                           ;switch2.c: 106: wait_ms(20);
  2931  01C8  3014               	movlw	20
  2932  01C9  0020               	movlb	0	; select bank0
  2933  01CA  00C4               	movwf	wait_ms@time
  2934  01CB  3000               	movlw	0
  2935  01CC  00C5               	movwf	wait_ms@time+1
  2936  01CD  227B               	fcall	_wait_ms
  2937                           
  2938                           ;switch2.c: 108: LATCbits.LATC0 = 0;
  2939  01CE  0022               	movlb	2	; select bank2
  2940  01CF  100E               	bcf	14,0	;volatile
  2941                           
  2942                           ;switch2.c: 109: LATCbits.LATC4 = 0;
  2943  01D0  120E               	bcf	14,4	;volatile
  2944                           
  2945                           ;switch2.c: 111: updateSwitch2State(switch2_state);
  2946  01D1  0020               	movlb	0	; select bank0
  2947  01D2  0841               	movf	_switch2_state+1,w
  2948  01D3  00C8               	movwf	updateSwitch2State@state+1
  2949  01D4  0840               	movf	_switch2_state,w
  2950  01D5  00C7               	movwf	updateSwitch2State@state
  2951  01D6  2349               	fcall	_updateSwitch2State
  2952                           
  2953                           ;switch2.c: 112: wait_ms(20);
  2954  01D7  3014               	movlw	20
  2955  01D8  0020               	movlb	0	; select bank0
  2956  01D9  00C4               	movwf	wait_ms@time
  2957  01DA  3000               	movlw	0
  2958  01DB  00C5               	movwf	wait_ms@time+1
  2959  01DC  227B               	fcall	_wait_ms
  2960  01DD  0008               	return
  2961  01DE                     __end_of_setSwitch2State:	
  2962                           
  2963                           	psect	text9
  2964  0349                     __ptext9:	
  2965 ;; *************** function _updateSwitch2State *****************
  2966 ;; Defined at:
  2967 ;;		line 65 in file "state_manager.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;  state           2    3[BANK0 ] int 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;		None
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMMON   BANK0   BANK1
  2981 ;;      Params:         0       2       0
  2982 ;;      Locals:         0       0       0
  2983 ;;      Temps:          0       0       0
  2984 ;;      Totals:         0       2       0
  2985 ;;Total ram usage:        2 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    4
  2988 ;; This function calls:
  2989 ;;		_saveState
  2990 ;; This function is called by:
  2991 ;;		_setSwitch2State
  2992 ;;		_setSwitch2OffFinish
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           
  2997                           ;psect for function _updateSwitch2State
  2998  0349                     _updateSwitch2State:	
  2999                           
  3000                           ;state_manager.c: 66: if (state != 1) {state = 0;}
  3001                           
  3002                           ;incstack = 0
  3003                           ; Regs used in _updateSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3004  0349  0020               	movlb	0	; select bank0
  3005  034A  0347               	decf	updateSwitch2State@state,w
  3006  034B  0448               	iorwf	updateSwitch2State@state+1,w
  3007  034C  1903               	btfsc	3,2
  3008  034D  2B50               	goto	l1384
  3009  034E  01C7               	clrf	updateSwitch2State@state
  3010  034F  01C8               	clrf	updateSwitch2State@state+1
  3011  0350                     l1384:	
  3012                           
  3013                           ;state_manager.c: 68: pedalState.switch2 = state;
  3014  0350  0848               	movf	updateSwitch2State@state+1,w
  3015  0351  00B9               	movwf	_pedalState+3
  3016  0352  0847               	movf	updateSwitch2State@state,w
  3017  0353  00B8               	movwf	_pedalState+2
  3018                           
  3019                           ;state_manager.c: 69: saveState();
  3020  0354  2339               	fcall	_saveState
  3021  0355  0008               	return
  3022  0356                     __end_of_updateSwitch2State:	
  3023                           
  3024                           	psect	text10
  3025  0387                     __ptext10:	
  3026 ;; *************** function _getSwitch2State *****************
  3027 ;; Defined at:
  3028 ;;		line 49 in file "state_manager.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  2    1[BANK0 ] int 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMMON   BANK0   BANK1
  3042 ;;      Params:         0       2       0
  3043 ;;      Locals:         0       0       0
  3044 ;;      Temps:          0       0       0
  3045 ;;      Totals:         0       2       0
  3046 ;;Total ram usage:        2 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    5
  3049 ;; This function calls:
  3050 ;;		_initStateManager
  3051 ;; This function is called by:
  3052 ;;		_initSwitch2
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           
  3057                           ;psect for function _getSwitch2State
  3058  0387                     _getSwitch2State:	
  3059                           
  3060                           ;state_manager.c: 50: if (!isInitialized) {
  3061                           
  3062                           ;incstack = 0
  3063                           ; Regs used in _getSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3064  0387  0020               	movlb	0	; select bank0
  3065  0388  0824               	movf	_isInitialized,w
  3066  0389  0425               	iorwf	_isInitialized+1,w
  3067  038A  1D03               	btfss	3,2
  3068  038B  2B8D               	goto	l1398
  3069                           
  3070                           ;state_manager.c: 51: initStateManager();
  3071  038C  23CD               	fcall	_initStateManager
  3072  038D                     l1398:	
  3073                           
  3074                           ;state_manager.c: 52: }
  3075                           ;state_manager.c: 53: return pedalState.switch2;
  3076  038D  0020               	movlb	0	; select bank0
  3077  038E  0839               	movf	_pedalState+3,w
  3078  038F  00C6               	movwf	?_getSwitch2State+1
  3079  0390  0838               	movf	_pedalState+2,w
  3080  0391  00C5               	movwf	?_getSwitch2State
  3081  0392  0008               	return
  3082  0393                     __end_of_getSwitch2State:	
  3083                           
  3084                           	psect	text11
  3085  03CD                     __ptext11:	
  3086 ;; *************** function _initStateManager *****************
  3087 ;; Defined at:
  3088 ;;		line 18 in file "state_manager.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;		None
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;		None
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  1    wreg      void 
  3095 ;; Registers used:
  3096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMMON   BANK0   BANK1
  3102 ;;      Params:         0       0       0
  3103 ;;      Locals:         0       0       0
  3104 ;;      Temps:          0       0       0
  3105 ;;      Totals:         0       0       0
  3106 ;;Total ram usage:        0 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    4
  3109 ;; This function calls:
  3110 ;;		_getCurrentState
  3111 ;; This function is called by:
  3112 ;;		_getSwitch2State
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           
  3117                           ;psect for function _initStateManager
  3118  03CD                     _initStateManager:	
  3119                           
  3120                           ;state_manager.c: 19: isInitialized = 0;
  3121                           
  3122                           ;incstack = 0
  3123                           ; Regs used in _initStateManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3124  03CD  0020               	movlb	0	; select bank0
  3125  03CE  01A4               	clrf	_isInitialized
  3126  03CF  01A5               	clrf	_isInitialized+1
  3127                           
  3128                           ;state_manager.c: 20: getCurrentState();
  3129  03D0  22A3               	fcall	_getCurrentState
  3130  03D1  0008               	return
  3131  03D2                     __end_of_initStateManager:	
  3132                           
  3133                           	psect	text12
  3134  0393                     __ptext12:	
  3135 ;; *************** function _initSwitch1 *****************
  3136 ;; Defined at:
  3137 ;;		line 24 in file "switch1.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  initState       2    7[BANK0 ] int 
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMMON   BANK0   BANK1
  3151 ;;      Params:         0       0       0
  3152 ;;      Locals:         0       2       0
  3153 ;;      Temps:          0       0       0
  3154 ;;      Totals:         0       2       0
  3155 ;;Total ram usage:        2 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    6
  3158 ;; This function calls:
  3159 ;;		_getSwitch1State
  3160 ;;		_setSwitch1State
  3161 ;; This function is called by:
  3162 ;;		_main
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _initSwitch1
  3168  0393                     _initSwitch1:	
  3169                           
  3170                           ;switch1.c: 25: int initState = getSwitch1State();
  3171                           
  3172                           ;incstack = 0
  3173                           ; Regs used in _initSwitch1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3174  0393  23BA               	fcall	_getSwitch1State
  3175  0394  0020               	movlb	0	; select bank0
  3176  0395  0846               	movf	?_getSwitch1State+1,w
  3177  0396  00CC               	movwf	initSwitch1@initState+1
  3178  0397  0845               	movf	?_getSwitch1State,w
  3179  0398  00CB               	movwf	initSwitch1@initState
  3180                           
  3181                           ;switch1.c: 26: setSwitch1State(initState);
  3182  0399  084C               	movf	initSwitch1@initState+1,w
  3183  039A  00CA               	movwf	setSwitch1State@f_state+1
  3184  039B  084B               	movf	initSwitch1@initState,w
  3185  039C  00C9               	movwf	setSwitch1State@f_state
  3186  039D  21DE               	fcall	_setSwitch1State
  3187  039E  0008               	return
  3188  039F                     __end_of_initSwitch1:	
  3189                           
  3190                           	psect	text13
  3191  01DE                     __ptext13:	
  3192 ;; *************** function _setSwitch1State *****************
  3193 ;; Defined at:
  3194 ;;		line 98 in file "switch1.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;  f_state         2    5[BANK0 ] int 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;		None
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMMON   BANK0   BANK1
  3208 ;;      Params:         0       2       0
  3209 ;;      Locals:         0       0       0
  3210 ;;      Temps:          0       0       0
  3211 ;;      Totals:         0       2       0
  3212 ;;Total ram usage:        2 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    5
  3215 ;; This function calls:
  3216 ;;		_updateSwitch1State
  3217 ;;		_wait_ms
  3218 ;; This function is called by:
  3219 ;;		_initSwitch1
  3220 ;;		_updateSwitch1
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _setSwitch1State
  3226  01DE                     _setSwitch1State:	
  3227                           
  3228                           ;switch1.c: 99: if (switch1_state == f_state) {return;}
  3229                           
  3230                           ;incstack = 0
  3231                           ; Regs used in _setSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3232  01DE  0020               	movlb	0	; select bank0
  3233  01DF  084A               	movf	setSwitch1State@f_state+1,w
  3234  01E0  063D               	xorwf	_switch1_state+1,w
  3235  01E1  1D03               	skipz
  3236  01E2  29E5               	goto	u775
  3237  01E3  0849               	movf	setSwitch1State@f_state,w
  3238  01E4  063C               	xorwf	_switch1_state,w
  3239  01E5                     u775:	
  3240  01E5  1903               	btfsc	3,2
  3241  01E6  0008               	return
  3242                           
  3243                           ;switch1.c: 100: switch1_state = f_state;
  3244  01E7  084A               	movf	setSwitch1State@f_state+1,w
  3245  01E8  00BD               	movwf	_switch1_state+1
  3246  01E9  0849               	movf	setSwitch1State@f_state,w
  3247  01EA  00BC               	movwf	_switch1_state
  3248                           
  3249                           ;switch1.c: 101: LATAbits.LATA2 = f_state;
  3250  01EB  0C49               	rrf	setSwitch1State@f_state,w
  3251  01EC  0022               	movlb	2	; select bank2
  3252  01ED  1C03               	skipc
  3253  01EE  110C               	bcf	12,2	;volatile
  3254  01EF  1803               	skipnc
  3255  01F0  150C               	bsf	12,2	;volatile
  3256                           
  3257                           ;switch1.c: 102: LATCbits.LATC2 = f_state;
  3258  01F1  0020               	movlb	0	; select bank0
  3259  01F2  0C49               	rrf	setSwitch1State@f_state,w
  3260  01F3  0022               	movlb	2	; select bank2
  3261  01F4  1C03               	skipc
  3262  01F5  110E               	bcf	14,2	;volatile
  3263  01F6  1803               	skipnc
  3264  01F7  150E               	bsf	14,2	;volatile
  3265                           
  3266                           ;switch1.c: 103: LATCbits.LATC1 = !f_state;
  3267  01F8  0020               	movlb	0	; select bank0
  3268  01F9  0849               	movf	setSwitch1State@f_state,w
  3269  01FA  044A               	iorwf	setSwitch1State@f_state+1,w
  3270  01FB  1D03               	btfss	3,2
  3271  01FC  2A00               	goto	u780
  3272  01FD  0022               	movlb	2	; select bank2
  3273  01FE  148E               	bsf	14,1	;volatile
  3274  01FF  2A02               	goto	l1414
  3275  0200                     u780:	
  3276  0200  0022               	movlb	2	; select bank2
  3277  0201  108E               	bcf	14,1	;volatile
  3278  0202                     l1414:	
  3279                           
  3280                           ;switch1.c: 105: wait_ms(20);
  3281  0202  3014               	movlw	20
  3282  0203  0020               	movlb	0	; select bank0
  3283  0204  00C4               	movwf	wait_ms@time
  3284  0205  3000               	movlw	0
  3285  0206  00C5               	movwf	wait_ms@time+1
  3286  0207  227B               	fcall	_wait_ms
  3287                           
  3288                           ;switch1.c: 107: LATCbits.LATC2 = 0;
  3289  0208  0022               	movlb	2	; select bank2
  3290  0209  110E               	bcf	14,2	;volatile
  3291                           
  3292                           ;switch1.c: 108: LATCbits.LATC1 = 0;
  3293  020A  108E               	bcf	14,1	;volatile
  3294                           
  3295                           ;switch1.c: 110: updateSwitch1State(switch1_state);
  3296  020B  0020               	movlb	0	; select bank0
  3297  020C  083D               	movf	_switch1_state+1,w
  3298  020D  00C8               	movwf	updateSwitch1State@state+1
  3299  020E  083C               	movf	_switch1_state,w
  3300  020F  00C7               	movwf	updateSwitch1State@state
  3301  0210  2356               	fcall	_updateSwitch1State
  3302                           
  3303                           ;switch1.c: 111: wait_ms(20);
  3304  0211  3014               	movlw	20
  3305  0212  0020               	movlb	0	; select bank0
  3306  0213  00C4               	movwf	wait_ms@time
  3307  0214  3000               	movlw	0
  3308  0215  00C5               	movwf	wait_ms@time+1
  3309  0216  227B               	fcall	_wait_ms
  3310  0217  0008               	return
  3311  0218                     __end_of_setSwitch1State:	
  3312                           
  3313                           	psect	text14
  3314  027B                     __ptext14:	
  3315 ;; *************** function _wait_ms *****************
  3316 ;; Defined at:
  3317 ;;		line 23 in file "system.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  time            2    0[BANK0 ] unsigned int 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0, pclath, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1
  3331 ;;      Params:         0       2       0
  3332 ;;      Locals:         0       0       0
  3333 ;;      Temps:          0       0       0
  3334 ;;      Totals:         0       2       0
  3335 ;;Total ram usage:        2 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    2
  3338 ;; This function calls:
  3339 ;;		___lmul
  3340 ;; This function is called by:
  3341 ;;		_setSwitch1State
  3342 ;;		_setSwitch1OffFinish
  3343 ;;		_setSwitch2State
  3344 ;;		_setSwitch2OffFinish
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           
  3349                           ;psect for function _wait_ms
  3350  027B                     _wait_ms:	
  3351                           
  3352                           ;system.c: 25: static long timel = 0;
  3353                           ;system.c: 26: timel = time * 1000l;
  3354                           
  3355                           ;incstack = 0
  3356                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  3357  027B  0020               	movlb	0	; select bank0
  3358  027C  0844               	movf	wait_ms@time,w
  3359  027D  00F1               	movwf	___lmul@multiplier
  3360  027E  0845               	movf	wait_ms@time+1,w
  3361  027F  00F2               	movwf	___lmul@multiplier+1
  3362  0280  01F3               	clrf	___lmul@multiplier+2
  3363  0281  01F4               	clrf	___lmul@multiplier+3
  3364  0282  3000               	movlw	0
  3365  0283  00F8               	movwf	___lmul@multiplicand+3
  3366  0284  3000               	movlw	0
  3367  0285  00F7               	movwf	___lmul@multiplicand+2
  3368  0286  3003               	movlw	3
  3369  0287  00F6               	movwf	___lmul@multiplicand+1
  3370  0288  30E8               	movlw	232
  3371  0289  00F5               	movwf	___lmul@multiplicand
  3372  028A  224C               	fcall	___lmul
  3373  028B  0874               	movf	?___lmul+3,w
  3374  028C  0020               	movlb	0	; select bank0
  3375  028D  00A3               	movwf	wait_ms@timel+3
  3376  028E  0873               	movf	?___lmul+2,w
  3377  028F  00A2               	movwf	wait_ms@timel+2
  3378  0290  0872               	movf	?___lmul+1,w
  3379  0291  00A1               	movwf	wait_ms@timel+1
  3380  0292  0871               	movf	?___lmul,w
  3381  0293  00A0               	movwf	wait_ms@timel
  3382  0294                     l71:	
  3383                           ;system.c: 27: for( ; timel; timel--);
  3384                           
  3385  0294  0823               	movf	wait_ms@timel+3,w
  3386  0295  0422               	iorwf	wait_ms@timel+2,w
  3387  0296  0421               	iorwf	wait_ms@timel+1,w
  3388  0297  0420               	iorwf	wait_ms@timel,w
  3389  0298  1903               	btfsc	3,2
  3390  0299  0008               	return
  3391  029A  30FF               	movlw	255
  3392  029B  07A0               	addwf	wait_ms@timel,f
  3393  029C  30FF               	movlw	255
  3394  029D  3DA1               	addwfc	wait_ms@timel+1,f
  3395  029E  30FF               	movlw	255
  3396  029F  3DA2               	addwfc	wait_ms@timel+2,f
  3397  02A0  30FF               	movlw	255
  3398  02A1  3DA3               	addwfc	wait_ms@timel+3,f
  3399  02A2  2A94               	goto	l71
  3400  02A3                     __end_of_wait_ms:	
  3401                           
  3402                           	psect	text15
  3403  024C                     __ptext15:	
  3404 ;; *************** function ___lmul *****************
  3405 ;; Defined at:
  3406 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  multiplier      4    1[COMMON] unsigned long 
  3409 ;;  multiplicand    4    5[COMMON] unsigned long 
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;  product         4    9[COMMON] unsigned long 
  3412 ;; Return value:  Size  Location     Type
  3413 ;;                  4    1[COMMON] unsigned long 
  3414 ;; Registers used:
  3415 ;;		wreg, status,2, status,0
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMMON   BANK0   BANK1
  3421 ;;      Params:         8       0       0
  3422 ;;      Locals:         4       0       0
  3423 ;;      Temps:          0       0       0
  3424 ;;      Totals:        12       0       0
  3425 ;;Total ram usage:       12 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    1
  3428 ;; This function calls:
  3429 ;;		Nothing
  3430 ;; This function is called by:
  3431 ;;		_wait_ms
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           
  3436                           ;psect for function ___lmul
  3437  024C                     ___lmul:	
  3438                           
  3439                           ;incstack = 0
  3440                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3441  024C  3000               	movlw	0
  3442  024D  00FC               	movwf	___lmul@product+3
  3443  024E  3000               	movlw	0
  3444  024F  00FB               	movwf	___lmul@product+2
  3445  0250  3000               	movlw	0
  3446  0251  00FA               	movwf	___lmul@product+1
  3447  0252  3000               	movlw	0
  3448  0253  00F9               	movwf	___lmul@product
  3449  0254                     l1352:	
  3450  0254  1C71               	btfss	___lmul@multiplier,0
  3451  0255  2A5E               	goto	l1356
  3452  0256  0875               	movf	___lmul@multiplicand,w
  3453  0257  07F9               	addwf	___lmul@product,f
  3454  0258  0876               	movf	___lmul@multiplicand+1,w
  3455  0259  3DFA               	addwfc	___lmul@product+1,f
  3456  025A  0877               	movf	___lmul@multiplicand+2,w
  3457  025B  3DFB               	addwfc	___lmul@product+2,f
  3458  025C  0878               	movf	___lmul@multiplicand+3,w
  3459  025D  3DFC               	addwfc	___lmul@product+3,f
  3460  025E                     l1356:	
  3461  025E  3001               	movlw	1
  3462  025F                     u705:	
  3463  025F  35F5               	lslf	___lmul@multiplicand,f
  3464  0260  0DF6               	rlf	___lmul@multiplicand+1,f
  3465  0261  0DF7               	rlf	___lmul@multiplicand+2,f
  3466  0262  0DF8               	rlf	___lmul@multiplicand+3,f
  3467  0263  0B89               	decfsz	9,f
  3468  0264  2A5F               	goto	u705
  3469  0265  3001               	movlw	1
  3470  0266                     u715:	
  3471  0266  36F4               	lsrf	___lmul@multiplier+3,f
  3472  0267  0CF3               	rrf	___lmul@multiplier+2,f
  3473  0268  0CF2               	rrf	___lmul@multiplier+1,f
  3474  0269  0CF1               	rrf	___lmul@multiplier,f
  3475  026A  0B89               	decfsz	9,f
  3476  026B  2A66               	goto	u715
  3477  026C  0874               	movf	___lmul@multiplier+3,w
  3478  026D  0473               	iorwf	___lmul@multiplier+2,w
  3479  026E  0472               	iorwf	___lmul@multiplier+1,w
  3480  026F  0471               	iorwf	___lmul@multiplier,w
  3481  0270  1D03               	skipz
  3482  0271  2A54               	goto	l1352
  3483  0272  087C               	movf	___lmul@product+3,w
  3484  0273  00F4               	movwf	?___lmul+3
  3485  0274  087B               	movf	___lmul@product+2,w
  3486  0275  00F3               	movwf	?___lmul+2
  3487  0276  087A               	movf	___lmul@product+1,w
  3488  0277  00F2               	movwf	?___lmul+1
  3489  0278  0879               	movf	___lmul@product,w
  3490  0279  00F1               	movwf	?___lmul
  3491  027A  0008               	return
  3492  027B                     __end_of___lmul:	
  3493                           
  3494                           	psect	text16
  3495  0356                     __ptext16:	
  3496 ;; *************** function _updateSwitch1State *****************
  3497 ;; Defined at:
  3498 ;;		line 57 in file "state_manager.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;  state           2    3[BANK0 ] int 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMMON   BANK0   BANK1
  3512 ;;      Params:         0       2       0
  3513 ;;      Locals:         0       0       0
  3514 ;;      Temps:          0       0       0
  3515 ;;      Totals:         0       2       0
  3516 ;;Total ram usage:        2 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    4
  3519 ;; This function calls:
  3520 ;;		_saveState
  3521 ;; This function is called by:
  3522 ;;		_setSwitch1State
  3523 ;;		_setSwitch1OffFinish
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           
  3528                           ;psect for function _updateSwitch1State
  3529  0356                     _updateSwitch1State:	
  3530                           
  3531                           ;state_manager.c: 58: if (state != 1) {state = 0;}
  3532                           
  3533                           ;incstack = 0
  3534                           ; Regs used in _updateSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3535  0356  0020               	movlb	0	; select bank0
  3536  0357  0347               	decf	updateSwitch1State@state,w
  3537  0358  0448               	iorwf	updateSwitch1State@state+1,w
  3538  0359  1903               	btfsc	3,2
  3539  035A  2B5D               	goto	l1376
  3540  035B  01C7               	clrf	updateSwitch1State@state
  3541  035C  01C8               	clrf	updateSwitch1State@state+1
  3542  035D                     l1376:	
  3543                           
  3544                           ;state_manager.c: 60: pedalState.switch1 = state;
  3545  035D  0848               	movf	updateSwitch1State@state+1,w
  3546  035E  00B7               	movwf	_pedalState+1
  3547  035F  0847               	movf	updateSwitch1State@state,w
  3548  0360  00B6               	movwf	_pedalState
  3549                           
  3550                           ;state_manager.c: 61: saveState();
  3551  0361  2339               	fcall	_saveState
  3552  0362  0008               	return
  3553  0363                     __end_of_updateSwitch1State:	
  3554                           
  3555                           	psect	text17
  3556  0339                     __ptext17:	
  3557 ;; *************** function _saveState *****************
  3558 ;; Defined at:
  3559 ;;		line 72 in file "state_manager.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;		None
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  r               1   12[COMMON] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      void 
  3566 ;; Registers used:
  3567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMMON   BANK0   BANK1
  3573 ;;      Params:         0       0       0
  3574 ;;      Locals:         1       0       0
  3575 ;;      Temps:          0       3       0
  3576 ;;      Totals:         1       3       0
  3577 ;;Total ram usage:        4 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    3
  3580 ;; This function calls:
  3581 ;;		_HEF_ByteArrayWrite
  3582 ;; This function is called by:
  3583 ;;		_updateSwitch1State
  3584 ;;		_updateSwitch2State
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           
  3589                           ;psect for function _saveState
  3590  0339                     _saveState:	
  3591                           
  3592                           ;state_manager.c: 73: uint8_t r;
  3593                           ;state_manager.c: 74: r = HEF_ByteArrayWrite(1, (void *) &pedalState, sizeof (pedalState
      +                          ));
  3594                           
  3595                           ;incstack = 0
  3596                           ; Regs used in _saveState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3597  0339  3036               	movlw	(low (_pedalState| 0))& (0+255)
  3598  033A  0020               	movlb	0	; select bank0
  3599  033B  00C4               	movwf	??_saveState
  3600  033C  0844               	movf	??_saveState,w
  3601  033D  00F4               	movwf	HEF_ByteArrayWrite@byteArray
  3602  033E  3004               	movlw	4
  3603  033F  00C5               	movwf	??_saveState+1
  3604  0340  0845               	movf	??_saveState+1,w
  3605  0341  00F5               	movwf	HEF_ByteArrayWrite@count
  3606  0342  3001               	movlw	1
  3607  0343  2151               	fcall	_HEF_ByteArrayWrite
  3608  0344  0020               	movlb	0	; select bank0
  3609  0345  00C6               	movwf	??_saveState+2
  3610  0346  0846               	movf	??_saveState+2,w
  3611  0347  00FC               	movwf	saveState@r
  3612  0348  0008               	return
  3613  0349                     __end_of_saveState:	
  3614                           
  3615                           	psect	text18
  3616  0151                     __ptext18:	
  3617 ;; *************** function _HEF_ByteArrayWrite *****************
  3618 ;; Defined at:
  3619 ;;		line 12 in file "HEF.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;  block           1    wreg     unsigned char 
  3622 ;;  byteArray       1    4[COMMON] PTR unsigned char 
  3623 ;;		 -> pedalState(4), 
  3624 ;;  count           1    5[COMMON] unsigned char 
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;  block           1    9[COMMON] unsigned char 
  3627 ;;  blockAddr       2   10[COMMON] unsigned int 
  3628 ;;  GIEBitValue     1    8[COMMON] unsigned char 
  3629 ;;  i               1    0        unsigned char 
  3630 ;; Return value:  Size  Location     Type
  3631 ;;                  1    wreg      char 
  3632 ;; Registers used:
  3633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3634 ;; Tracked objects:
  3635 ;;		On entry : 0/0
  3636 ;;		On exit  : 0/0
  3637 ;;		Unchanged: 0/0
  3638 ;; Data sizes:     COMMON   BANK0   BANK1
  3639 ;;      Params:         2       0       0
  3640 ;;      Locals:         4       0       0
  3641 ;;      Temps:          2       0       0
  3642 ;;      Totals:         8       0       0
  3643 ;;Total ram usage:        8 bytes
  3644 ;; Hardware stack levels used:    1
  3645 ;; Hardware stack levels required when called:    2
  3646 ;; This function calls:
  3647 ;;		_FLASH_EraseBlock
  3648 ;; This function is called by:
  3649 ;;		_saveState
  3650 ;; This function uses a non-reentrant model
  3651 ;;
  3652                           
  3653                           
  3654                           ;psect for function _HEF_ByteArrayWrite
  3655  0151                     _HEF_ByteArrayWrite:	
  3656                           
  3657                           ;incstack = 0
  3658                           ; Regs used in _HEF_ByteArrayWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3659                           ;HEF_ByteArrayWrite@block stored from wreg
  3660  0151  00F9               	movwf	HEF_ByteArrayWrite@block
  3661                           
  3662                           ;HEF.c: 13: uint16_t blockAddr;
  3663                           ;HEF.c: 14: uint8_t GIEBitValue = INTCONbits.GIE;
  3664  0152  3000               	movlw	0
  3665  0153  1B8B               	btfsc	11,7	;volatile
  3666  0154  3001               	movlw	1
  3667  0155  00F8               	movwf	HEF_ByteArrayWrite@GIEBitValue
  3668                           
  3669                           ;HEF.c: 15: uint8_t i;
  3670                           ;HEF.c: 17: if ( ( block >= 128 / 32) || ( count > 32))
  3671  0156  3004               	movlw	4
  3672  0157  0279               	subwf	HEF_ByteArrayWrite@block,w
  3673  0158  1803               	skipnc
  3674  0159  295E               	goto	l1262
  3675  015A  3021               	movlw	33
  3676  015B  0275               	subwf	HEF_ByteArrayWrite@count,w
  3677  015C  1C03               	skipc
  3678  015D  2960               	goto	l1266
  3679  015E                     l1262:	
  3680                           
  3681                           ;HEF.c: 18: return -1;
  3682  015E  30FF               	movlw	255
  3683  015F  0008               	return
  3684  0160                     l1266:	
  3685                           
  3686                           ;HEF.c: 20: blockAddr = 16384 - 128 + block * 32;
  3687  0160  0879               	movf	HEF_ByteArrayWrite@block,w
  3688  0161  00F6               	movwf	??_HEF_ByteArrayWrite
  3689  0162  01F7               	clrf	??_HEF_ByteArrayWrite+1
  3690  0163  3005               	movlw	5
  3691  0164                     u595:	
  3692  0164  35F6               	lslf	??_HEF_ByteArrayWrite,f
  3693  0165  0DF7               	rlf	??_HEF_ByteArrayWrite+1,f
  3694  0166  0B89               	decfsz	9,f
  3695  0167  2964               	goto	u595
  3696  0168  0876               	movf	??_HEF_ByteArrayWrite,w
  3697  0169  3E80               	addlw	128
  3698  016A  00FA               	movwf	HEF_ByteArrayWrite@blockAddr
  3699  016B  303F               	movlw	63
  3700  016C  3D77               	addwfc	??_HEF_ByteArrayWrite+1,w
  3701  016D  00FB               	movwf	HEF_ByteArrayWrite@blockAddr+1
  3702                           
  3703                           ;HEF.c: 21: INTCONbits.GIE = 0;
  3704  016E  138B               	bcf	11,7	;volatile
  3705                           
  3706                           ;HEF.c: 23: FLASH_EraseBlock( blockAddr);
  3707  016F  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3708  0170  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  3709  0171  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3710  0172  00F1               	movwf	FLASH_EraseBlock@startAddr
  3711  0173  22C5               	fcall	_FLASH_EraseBlock
  3712                           
  3713                           ;HEF.c: 26: PMCON1bits.CFGS = 0;
  3714  0174  0023               	movlb	3	; select bank3
  3715  0175  1315               	bcf	21,6	;volatile
  3716                           
  3717                           ;HEF.c: 27: PMCON1bits.WREN = 1;
  3718  0176  1515               	bsf	21,2	;volatile
  3719                           
  3720                           ;HEF.c: 28: PMCON1bits.LWLO = 1;
  3721  0177  1695               	bsf	21,5	;volatile
  3722  0178                     l1300:	
  3723                           ;HEF.c: 30: while ( count > 0) {
  3724                           
  3725  0178  0875               	movf	HEF_ByteArrayWrite@count,w
  3726  0179  1903               	btfsc	3,2
  3727  017A  299B               	goto	l141
  3728                           
  3729                           ;HEF.c: 31: PMADR = blockAddr++;
  3730  017B  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3731  017C  0023               	movlb	3	; select bank3
  3732  017D  0092               	movwf	18	;volatile
  3733  017E  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3734  017F  0091               	movwf	17	;volatile
  3735  0180  3001               	movlw	1
  3736  0181  07FA               	addwf	HEF_ByteArrayWrite@blockAddr,f
  3737  0182  3000               	movlw	0
  3738  0183  3DFB               	addwfc	HEF_ByteArrayWrite@blockAddr+1,f
  3739                           
  3740                           ;HEF.c: 33: PMDATL = *byteArray++;
  3741  0184  0874               	movf	HEF_ByteArrayWrite@byteArray,w
  3742  0185  0086               	movwf	6
  3743  0186  0187               	clrf	7
  3744  0187  0801               	movf	1,w
  3745  0188  0093               	movwf	19	;volatile
  3746  0189  3001               	movlw	1
  3747  018A  00F6               	movwf	??_HEF_ByteArrayWrite
  3748  018B  0876               	movf	??_HEF_ByteArrayWrite,w
  3749  018C  07F4               	addwf	HEF_ByteArrayWrite@byteArray,f
  3750                           
  3751                           ;HEF.c: 34: PMDATH = 0;
  3752  018D  0194               	clrf	20	;volatile
  3753                           
  3754                           ;HEF.c: 35: if ( count == 1) {
  3755  018E  0375               	decf	HEF_ByteArrayWrite@count,w
  3756  018F  1903               	btfsc	3,2
  3757                           
  3758                           ;HEF.c: 36: PMCON1bits.LWLO = 0;
  3759  0190  1295               	bcf	21,5	;volatile
  3760                           
  3761                           ;HEF.c: 37: }
  3762                           ;HEF.c: 39: PMCON2 = 0x55;
  3763  0191  3055               	movlw	85
  3764  0192  0096               	movwf	22	;volsfr
  3765                           
  3766                           ;HEF.c: 40: PMCON2 = 0xAA;
  3767  0193  30AA               	movlw	170
  3768  0194  0096               	movwf	22	;volsfr
  3769                           
  3770                           ;HEF.c: 41: PMCON1bits.WR = 1;
  3771  0195  1495               	bsf	21,1	;volatile
  3772                           
  3773                           ;HEF.c: 42: __nop();
  3774  0196  0000               	nop
  3775                           
  3776                           ;HEF.c: 43: __nop();
  3777  0197  0000               	nop
  3778                           
  3779                           ;HEF.c: 44: count--;
  3780  0198  3001               	movlw	1
  3781  0199  02F5               	subwf	HEF_ByteArrayWrite@count,f
  3782  019A  2978               	goto	l1300
  3783  019B                     l141:	
  3784                           
  3785                           ;HEF.c: 45: }
  3786                           ;HEF.c: 47: PMCON1bits.WREN = 0;
  3787  019B  0023               	movlb	3	; select bank3
  3788  019C  1115               	bcf	21,2	;volatile
  3789                           
  3790                           ;HEF.c: 48: INTCONbits.GIE = GIEBitValue;
  3791  019D  0C78               	rrf	HEF_ByteArrayWrite@GIEBitValue,w
  3792  019E  1C03               	skipc
  3793  019F  138B               	bcf	11,7	;volatile
  3794  01A0  1803               	skipnc
  3795  01A1  178B               	bsf	11,7	;volatile
  3796                           
  3797                           ;HEF.c: 50: return 0;
  3798  01A2  3000               	movlw	0
  3799  01A3  0008               	return
  3800  01A4                     __end_of_HEF_ByteArrayWrite:	
  3801                           
  3802                           	psect	text19
  3803  02C5                     __ptext19:	
  3804 ;; *************** function _FLASH_EraseBlock *****************
  3805 ;; Defined at:
  3806 ;;		line 141 in file "mcc_generated_files/memory.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;  startAddr       2    1[COMMON] unsigned int 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		wreg, status,2, status,0
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1
  3820 ;;      Params:         2       0       0
  3821 ;;      Locals:         1       0       0
  3822 ;;      Temps:          0       0       0
  3823 ;;      Totals:         3       0       0
  3824 ;;Total ram usage:        3 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    1
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_HEF_ByteArrayWrite
  3831 ;;		_FLASH_WriteBlock
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           
  3836                           ;psect for function _FLASH_EraseBlock
  3837  02C5                     _FLASH_EraseBlock:	
  3838                           
  3839                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
  3840                           
  3841                           ;incstack = 0
  3842                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  3843  02C5  3000               	movlw	0
  3844  02C6  1B8B               	btfsc	11,7	;volatile
  3845  02C7  3001               	movlw	1
  3846  02C8  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  3847                           
  3848                           ;memory.c: 145: INTCONbits.GIE = 0;
  3849  02C9  138B               	bcf	11,7	;volatile
  3850                           
  3851                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
  3852  02CA  0871               	movf	FLASH_EraseBlock@startAddr,w
  3853  02CB  0023               	movlb	3	; select bank3
  3854  02CC  0091               	movwf	17	;volatile
  3855                           
  3856                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
  3857  02CD  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  3858  02CE  0092               	movwf	18	;volatile
  3859                           
  3860                           ;memory.c: 152: PMCON1bits.CFGS = 0;
  3861  02CF  1315               	bcf	21,6	;volatile
  3862                           
  3863                           ;memory.c: 153: PMCON1bits.FREE = 1;
  3864  02D0  1615               	bsf	21,4	;volatile
  3865                           
  3866                           ;memory.c: 154: PMCON1bits.WREN = 1;
  3867  02D1  1515               	bsf	21,2	;volatile
  3868                           
  3869                           ;memory.c: 157: PMCON2 = 0x55;
  3870  02D2  3055               	movlw	85
  3871  02D3  0096               	movwf	22	;volsfr
  3872                           
  3873                           ;memory.c: 158: PMCON2 = 0xAA;
  3874  02D4  30AA               	movlw	170
  3875  02D5  0096               	movwf	22	;volsfr
  3876                           
  3877                           ;memory.c: 159: PMCON1bits.WR = 1;
  3878  02D6  1495               	bsf	21,1	;volatile
  3879                           
  3880                           ;memory.c: 160: __nop();
  3881  02D7  0000               	nop
  3882                           
  3883                           ;memory.c: 161: __nop();
  3884  02D8  0000               	nop
  3885                           
  3886                           ;memory.c: 163: PMCON1bits.WREN = 0;
  3887  02D9  0023               	movlb	3	; select bank3
  3888  02DA  1115               	bcf	21,2	;volatile
  3889                           
  3890                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
  3891  02DB  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  3892  02DC  1C03               	skipc
  3893  02DD  138B               	bcf	11,7	;volatile
  3894  02DE  1803               	skipnc
  3895  02DF  178B               	bsf	11,7	;volatile
  3896  02E0  0008               	return
  3897  02E1                     __end_of_FLASH_EraseBlock:	
  3898                           
  3899                           	psect	text20
  3900  03BA                     __ptext20:	
  3901 ;; *************** function _getSwitch1State *****************
  3902 ;; Defined at:
  3903 ;;		line 42 in file "state_manager.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;		None
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;		None
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  2    1[BANK0 ] int 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMMON   BANK0   BANK1
  3917 ;;      Params:         0       2       0
  3918 ;;      Locals:         0       0       0
  3919 ;;      Temps:          0       0       0
  3920 ;;      Totals:         0       2       0
  3921 ;;Total ram usage:        2 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    4
  3924 ;; This function calls:
  3925 ;;		_getCurrentState
  3926 ;; This function is called by:
  3927 ;;		_initSwitch1
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           
  3932                           ;psect for function _getSwitch1State
  3933  03BA                     _getSwitch1State:	
  3934                           
  3935                           ;state_manager.c: 43: getCurrentState();
  3936                           
  3937                           ;incstack = 0
  3938                           ; Regs used in _getSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3939  03BA  22A3               	fcall	_getCurrentState
  3940                           
  3941                           ;state_manager.c: 44: return pedalState.switch1;
  3942  03BB  0020               	movlb	0	; select bank0
  3943  03BC  0837               	movf	_pedalState+1,w
  3944  03BD  00C6               	movwf	?_getSwitch1State+1
  3945  03BE  0836               	movf	_pedalState,w
  3946  03BF  00C5               	movwf	?_getSwitch1State
  3947  03C0  0008               	return
  3948  03C1                     __end_of_getSwitch1State:	
  3949                           
  3950                           	psect	text21
  3951  02A3                     __ptext21:	
  3952 ;; *************** function _getCurrentState *****************
  3953 ;; Defined at:
  3954 ;;		line 23 in file "state_manager.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;		None
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  r               1    0[BANK0 ] unsigned char 
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  4  155[None  ] struct .
  3961 ;; Registers used:
  3962 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMMON   BANK0   BANK1
  3968 ;;      Params:         0       0       0
  3969 ;;      Locals:         0       1       0
  3970 ;;      Temps:          2       0       0
  3971 ;;      Totals:         2       1       0
  3972 ;;Total ram usage:        3 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    3
  3975 ;; This function calls:
  3976 ;;		_HEF_ByteArrayRead
  3977 ;; This function is called by:
  3978 ;;		_initStateManager
  3979 ;;		_getSwitch1State
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           
  3984                           ;psect for function _getCurrentState
  3985  02A3                     _getCurrentState:	
  3986                           
  3987                           ;state_manager.c: 24: if (!isInitialized) {
  3988                           
  3989                           ;incstack = 0
  3990                           ; Regs used in _getCurrentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3991  02A3  0020               	movlb	0	; select bank0
  3992  02A4  0824               	movf	_isInitialized,w
  3993  02A5  0425               	iorwf	_isInitialized+1,w
  3994  02A6  1D03               	btfss	3,2
  3995  02A7  0008               	return
  3996                           
  3997                           ;state_manager.c: 25: uint8_t r;
  3998                           ;state_manager.c: 28: r = HEF_ByteArrayRead((void *) &pedalState, 1, sizeof (pedalState)
      +                          );
  3999  02A8  01F4               	clrf	HEF_ByteArrayRead@block
  4000  02A9  0AF4               	incf	HEF_ByteArrayRead@block,f
  4001  02AA  3004               	movlw	4
  4002  02AB  00FB               	movwf	??_getCurrentState
  4003  02AC  087B               	movf	??_getCurrentState,w
  4004  02AD  00F5               	movwf	HEF_ByteArrayRead@count
  4005  02AE  3036               	movlw	(low (_pedalState| 0))& (0+255)
  4006  02AF  2218               	fcall	_HEF_ByteArrayRead
  4007  02B0  00FC               	movwf	??_getCurrentState+1
  4008  02B1  087C               	movf	??_getCurrentState+1,w
  4009  02B2  0020               	movlb	0	; select bank0
  4010  02B3  00C4               	movwf	getCurrentState@r
  4011                           
  4012                           ;state_manager.c: 30: if (pedalState.switch1 != 1) {
  4013  02B4  0336               	decf	_pedalState,w
  4014  02B5  0437               	iorwf	_pedalState+1,w
  4015  02B6  1903               	btfsc	3,2
  4016  02B7  2ABA               	goto	l1340
  4017                           
  4018                           ;state_manager.c: 31: pedalState.switch1 = 0;
  4019  02B8  01B6               	clrf	_pedalState
  4020  02B9  01B7               	clrf	_pedalState+1
  4021  02BA                     l1340:	
  4022                           
  4023                           ;state_manager.c: 32: }
  4024                           ;state_manager.c: 34: if (pedalState.switch2 != 1) {
  4025  02BA  0338               	decf	_pedalState+2,w
  4026  02BB  0439               	iorwf	_pedalState+3,w
  4027  02BC  1903               	btfsc	3,2
  4028  02BD  2AC0               	goto	l1344
  4029                           
  4030                           ;state_manager.c: 35: pedalState.switch2 = 0;
  4031  02BE  01B8               	clrf	_pedalState+2
  4032  02BF  01B9               	clrf	_pedalState+3
  4033  02C0                     l1344:	
  4034                           
  4035                           ;state_manager.c: 36: }
  4036                           ;state_manager.c: 37: isInitialized = 1;
  4037  02C0  3001               	movlw	1
  4038  02C1  00A4               	movwf	_isInitialized
  4039  02C2  3000               	movlw	0
  4040  02C3  00A5               	movwf	_isInitialized+1
  4041  02C4  0008               	return
  4042  02C5                     __end_of_getCurrentState:	
  4043                           ;state_manager.c: 38: }
  4044                           ;state_manager.c: 39: return pedalState;
  4045                           ;	Return value of _getCurrentState is never used
  4046                           
  4047                           
  4048                           	psect	text22
  4049  0218                     __ptext22:	
  4050 ;; *************** function _HEF_ByteArrayRead *****************
  4051 ;; Defined at:
  4052 ;;		line 53 in file "HEF.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  bArray          1    wreg     PTR unsigned char 
  4055 ;;		 -> pedalState(4), 
  4056 ;;  block           1    4[COMMON] unsigned char 
  4057 ;;  count           1    5[COMMON] unsigned char 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  bArray          1   10[COMMON] PTR unsigned char 
  4060 ;;		 -> pedalState(4), 
  4061 ;;  wordAdd         2    8[COMMON] unsigned int 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  1    wreg      char 
  4064 ;; Registers used:
  4065 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMMON   BANK0   BANK1
  4071 ;;      Params:         2       0       0
  4072 ;;      Locals:         3       0       0
  4073 ;;      Temps:          2       0       0
  4074 ;;      Totals:         7       0       0
  4075 ;;Total ram usage:        7 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    2
  4078 ;; This function calls:
  4079 ;;		_FLASH_ReadWord
  4080 ;; This function is called by:
  4081 ;;		_getCurrentState
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           
  4086                           ;psect for function _HEF_ByteArrayRead
  4087  0218                     _HEF_ByteArrayRead:	
  4088                           
  4089                           ;incstack = 0
  4090                           ; Regs used in _HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4091                           ;HEF_ByteArrayRead@bArray stored from wreg
  4092  0218  00FA               	movwf	HEF_ByteArrayRead@bArray
  4093                           
  4094                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
  4095  0219  0874               	movf	HEF_ByteArrayRead@block,w
  4096  021A  00F6               	movwf	??_HEF_ByteArrayRead
  4097  021B  01F7               	clrf	??_HEF_ByteArrayRead+1
  4098  021C  3005               	movlw	5
  4099  021D                     u625:	
  4100  021D  35F6               	lslf	??_HEF_ByteArrayRead,f
  4101  021E  0DF7               	rlf	??_HEF_ByteArrayRead+1,f
  4102  021F  0B89               	decfsz	9,f
  4103  0220  2A1D               	goto	u625
  4104  0221  0876               	movf	??_HEF_ByteArrayRead,w
  4105  0222  3E80               	addlw	128
  4106  0223  00F8               	movwf	HEF_ByteArrayRead@wordAdd
  4107  0224  303F               	movlw	63
  4108  0225  3D77               	addwfc	??_HEF_ByteArrayRead+1,w
  4109  0226  00F9               	movwf	HEF_ByteArrayRead@wordAdd+1
  4110                           
  4111                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
  4112  0227  3021               	movlw	33
  4113  0228  0275               	subwf	HEF_ByteArrayRead@count,w
  4114  0229  1803               	skipnc
  4115  022A  2A2F               	goto	l1314
  4116  022B  3004               	movlw	4
  4117  022C  0274               	subwf	HEF_ByteArrayRead@block,w
  4118  022D  1C03               	skipc
  4119  022E  2A47               	goto	l1326
  4120  022F                     l1314:	
  4121                           
  4122                           ;HEF.c: 60: return -1;
  4123  022F  30FF               	movlw	255
  4124  0230  0008               	return
  4125  0231                     l1318:	
  4126                           ;HEF.c: 63: while ( count > 0)
  4127                           
  4128                           
  4129                           ;HEF.c: 64: {
  4130                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
  4131  0231  0879               	movf	HEF_ByteArrayRead@wordAdd+1,w
  4132  0232  00F2               	movwf	FLASH_ReadWord@flashAddr+1
  4133  0233  0878               	movf	HEF_ByteArrayRead@wordAdd,w
  4134  0234  00F1               	movwf	FLASH_ReadWord@flashAddr
  4135  0235  22E1               	fcall	_FLASH_ReadWord
  4136  0236  0871               	movf	?_FLASH_ReadWord,w
  4137  0237  00F6               	movwf	??_HEF_ByteArrayRead
  4138  0238  087A               	movf	HEF_ByteArrayRead@bArray,w
  4139  0239  0086               	movwf	6
  4140  023A  0187               	clrf	7
  4141  023B  0876               	movf	??_HEF_ByteArrayRead,w
  4142  023C  0081               	movwf	1
  4143  023D  3001               	movlw	1
  4144  023E  07F8               	addwf	HEF_ByteArrayRead@wordAdd,f
  4145  023F  3000               	movlw	0
  4146  0240  3DF9               	addwfc	HEF_ByteArrayRead@wordAdd+1,f
  4147  0241  3001               	movlw	1
  4148  0242  00F6               	movwf	??_HEF_ByteArrayRead
  4149  0243  0876               	movf	??_HEF_ByteArrayRead,w
  4150  0244  07FA               	addwf	HEF_ByteArrayRead@bArray,f
  4151                           
  4152                           ;HEF.c: 66: count--;
  4153  0245  3001               	movlw	1
  4154  0246  02F5               	subwf	HEF_ByteArrayRead@count,f
  4155  0247                     l1326:	
  4156  0247  0875               	movf	HEF_ByteArrayRead@count,w
  4157  0248  1D03               	btfss	3,2
  4158  0249  2A31               	goto	l1318
  4159                           
  4160                           ;HEF.c: 67: }
  4161                           ;HEF.c: 70: return 0;
  4162  024A  3000               	movlw	0
  4163  024B  0008               	return
  4164  024C                     __end_of_HEF_ByteArrayRead:	
  4165                           
  4166                           	psect	text23
  4167  02E1                     __ptext23:	
  4168 ;; *************** function _FLASH_ReadWord *****************
  4169 ;; Defined at:
  4170 ;;		line 58 in file "mcc_generated_files/memory.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;  flashAddr       2    1[COMMON] unsigned int 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  2    1[COMMON] unsigned int 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1
  4184 ;;      Params:         2       0       0
  4185 ;;      Locals:         1       0       0
  4186 ;;      Temps:          0       0       0
  4187 ;;      Totals:         3       0       0
  4188 ;;Total ram usage:        3 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    1
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_HEF_ByteArrayRead
  4195 ;;		_FLASH_WriteWord
  4196 ;;		_HEF_ByteRead
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function _FLASH_ReadWord
  4202  02E1                     _FLASH_ReadWord:	
  4203                           
  4204                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  4205                           
  4206                           ;incstack = 0
  4207                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  4208  02E1  3000               	movlw	0
  4209  02E2  1B8B               	btfsc	11,7	;volatile
  4210  02E3  3001               	movlw	1
  4211  02E4  00F3               	movwf	FLASH_ReadWord@GIEBitValue
  4212                           
  4213                           ;memory.c: 61: INTCONbits.GIE = 0;
  4214  02E5  138B               	bcf	11,7	;volatile
  4215                           
  4216                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  4217  02E6  0871               	movf	FLASH_ReadWord@flashAddr,w
  4218  02E7  0023               	movlb	3	; select bank3
  4219  02E8  0091               	movwf	17	;volatile
  4220                           
  4221                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  4222  02E9  0872               	movf	FLASH_ReadWord@flashAddr+1,w
  4223  02EA  0092               	movwf	18	;volatile
  4224                           
  4225                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  4226  02EB  1315               	bcf	21,6	;volatile
  4227                           
  4228                           ;memory.c: 66: PMCON1bits.RD = 1;
  4229  02EC  1415               	bsf	21,0	;volatile
  4230                           
  4231                           ;memory.c: 67: __nop();
  4232  02ED  0000               	nop
  4233                           
  4234                           ;memory.c: 68: __nop();
  4235  02EE  0000               	nop
  4236                           
  4237                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  4238  02EF  0C73               	rrf	FLASH_ReadWord@GIEBitValue,w
  4239  02F0  1C03               	skipc
  4240  02F1  138B               	bcf	11,7	;volatile
  4241  02F2  1803               	skipnc
  4242  02F3  178B               	bsf	11,7	;volatile
  4243                           
  4244                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
  4245  02F4  0023               	movlb	3	; select bank3
  4246  02F5  0814               	movf	20,w	;volatile
  4247  02F6  00F2               	movwf	?_FLASH_ReadWord+1
  4248  02F7  0813               	movf	19,w	;volatile
  4249  02F8  00F1               	movwf	?_FLASH_ReadWord
  4250  02F9  0008               	return
  4251  02FA                     __end_of_FLASH_ReadWord:	
  4252                           
  4253                           	psect	text24
  4254  0324                     __ptext24:	
  4255 ;; *************** function _InitApp *****************
  4256 ;; Defined at:
  4257 ;;		line 27 in file "user.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;		None
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;		None
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  1    wreg      void 
  4264 ;; Registers used:
  4265 ;;		wreg, status,2, status,0, pclath, cstack
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMMON   BANK0   BANK1
  4271 ;;      Params:         0       0       0
  4272 ;;      Locals:         0       0       0
  4273 ;;      Temps:          0       0       0
  4274 ;;      Totals:         0       0       0
  4275 ;;Total ram usage:        0 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    2
  4278 ;; This function calls:
  4279 ;;		_init_adc
  4280 ;; This function is called by:
  4281 ;;		_main
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           
  4286                           ;psect for function _InitApp
  4287  0324                     _InitApp:	
  4288                           
  4289                           ;user.c: 28: TRISAbits.TRISA0 = 0;
  4290                           
  4291                           ;incstack = 0
  4292                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  4293  0324  0021               	movlb	1	; select bank1
  4294  0325  100C               	bcf	12,0	;volatile
  4295                           
  4296                           ;user.c: 29: TRISAbits.TRISA1 = 0;
  4297  0326  108C               	bcf	12,1	;volatile
  4298                           
  4299                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  4300  0327  110C               	bcf	12,2	;volatile
  4301                           
  4302                           ;user.c: 32: TRISAbits.TRISA4 = 1;
  4303  0328  160C               	bsf	12,4	;volatile
  4304                           
  4305                           ;user.c: 33: TRISAbits.TRISA5 = 1;
  4306  0329  168C               	bsf	12,5	;volatile
  4307                           
  4308                           ;user.c: 34: ANSELAbits.ANSA4 = 0;
  4309  032A  0023               	movlb	3	; select bank3
  4310  032B  120C               	bcf	12,4	;volatile
  4311                           
  4312                           ;user.c: 36: TRISCbits.TRISC0 = 0;
  4313  032C  0021               	movlb	1	; select bank1
  4314  032D  100E               	bcf	14,0	;volatile
  4315                           
  4316                           ;user.c: 37: TRISCbits.TRISC1 = 0;
  4317  032E  108E               	bcf	14,1	;volatile
  4318                           
  4319                           ;user.c: 38: TRISCbits.TRISC2 = 0;
  4320  032F  110E               	bcf	14,2	;volatile
  4321                           
  4322                           ;user.c: 39: TRISCbits.TRISC3 = 0;
  4323  0330  118E               	bcf	14,3	;volatile
  4324                           
  4325                           ;user.c: 40: TRISCbits.TRISC4 = 0;
  4326  0331  120E               	bcf	14,4	;volatile
  4327                           
  4328                           ;user.c: 41: TRISCbits.TRISC5 = 0;
  4329  0332  128E               	bcf	14,5	;volatile
  4330                           
  4331                           ;user.c: 43: LATCbits.LATC5 = 0;
  4332  0333  0022               	movlb	2	; select bank2
  4333  0334  128E               	bcf	14,5	;volatile
  4334                           
  4335                           ;user.c: 45: LATAbits.LATA2 = 0;
  4336  0335  110C               	bcf	12,2	;volatile
  4337                           
  4338                           ;user.c: 46: LATCbits.LATC3 = 0;
  4339  0336  118E               	bcf	14,3	;volatile
  4340                           
  4341                           ;user.c: 48: init_adc();
  4342  0337  23A9               	fcall	_init_adc
  4343  0338  0008               	return
  4344  0339                     __end_of_InitApp:	
  4345                           
  4346                           	psect	text25
  4347  03A9                     __ptext25:	
  4348 ;; *************** function _init_adc *****************
  4349 ;; Defined at:
  4350 ;;		line 60 in file "user.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;		None
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;		None
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      void 
  4357 ;; Registers used:
  4358 ;;		wreg, status,2, status,0
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMMON   BANK0   BANK1
  4364 ;;      Params:         0       0       0
  4365 ;;      Locals:         0       0       0
  4366 ;;      Temps:          0       0       0
  4367 ;;      Totals:         0       0       0
  4368 ;;Total ram usage:        0 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    1
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_InitApp
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           
  4379                           ;psect for function _init_adc
  4380  03A9                     _init_adc:	
  4381                           
  4382                           ;user.c: 61: ADCON1bits.ADFM = 0b1;
  4383                           
  4384                           ;incstack = 0
  4385                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  4386  03A9  0021               	movlb	1	; select bank1
  4387  03AA  179E               	bsf	30,7	;volatile
  4388                           
  4389                           ;user.c: 62: ADCON1bits.ADCS = 0b110;
  4390  03AB  081E               	movf	30,w	;volatile
  4391  03AC  398F               	andlw	-113
  4392  03AD  3860               	iorlw	96
  4393  03AE  009E               	movwf	30	;volatile
  4394                           
  4395                           ;user.c: 63: ADCON1bits.ADPREF = 0b00;
  4396  03AF  30FC               	movlw	-4
  4397  03B0  059E               	andwf	30,f	;volatile
  4398                           
  4399                           ;user.c: 64: ADCON0bits.ADON = 0b1;
  4400  03B1  141D               	bsf	29,0	;volatile
  4401  03B2  0008               	return
  4402  03B3                     __end_of_init_adc:	
  4403                           
  4404                           	psect	text26
  4405  03D2                     __ptext26:	
  4406 ;; *************** function _ConfigureOscillator *****************
  4407 ;; Defined at:
  4408 ;;		line 17 in file "system.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;		None
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;		None
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      void 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2, status,0
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMMON   BANK0   BANK1
  4422 ;;      Params:         0       0       0
  4423 ;;      Locals:         0       0       0
  4424 ;;      Temps:          0       0       0
  4425 ;;      Totals:         0       0       0
  4426 ;;Total ram usage:        0 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    1
  4429 ;; This function calls:
  4430 ;;		Nothing
  4431 ;; This function is called by:
  4432 ;;		_main
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           
  4437                           ;psect for function _ConfigureOscillator
  4438  03D2                     _ConfigureOscillator:	
  4439                           
  4440                           ;system.c: 19: OSCCONbits.IRCF = 0b1111;
  4441                           
  4442                           ;incstack = 0
  4443                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  4444  03D2  3078               	movlw	120
  4445  03D3  0021               	movlb	1	; select bank1
  4446  03D4  0499               	iorwf	25,f	;volatile
  4447                           
  4448                           ;system.c: 20: OSCSTAT = 0x00;
  4449  03D5  019A               	clrf	26	;volatile
  4450  03D6  0008               	return
  4451  03D7                     __end_of_ConfigureOscillator:	
  4452                           
  4453                           	psect	intentry
  4454  0004                     __pintentry:	
  4455 ;; *************** function _isr *****************
  4456 ;; Defined at:
  4457 ;;		line 23 in file "interrupts.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;		None
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;		None
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      void 
  4464 ;; Registers used:
  4465 ;;		None
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1
  4471 ;;      Params:         0       0       0
  4472 ;;      Locals:         0       0       0
  4473 ;;      Temps:          1       0       0
  4474 ;;      Totals:         1       0       0
  4475 ;;Total ram usage:        1 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; This function calls:
  4478 ;;		Nothing
  4479 ;; This function is called by:
  4480 ;;		Interrupt level 1
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484  0004                     _isr:	
  4485                           
  4486                           ;incstack = 0
  4487                           ; Regs used in _isr: []
  4488  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4489  0005  3180               	pagesel	$
  4490  0006  0020               	movlb	0	; select bank0
  4491  0007  087F               	movf	127,w
  4492  0008  00F0               	movwf	??_isr
  4493  0009  0870               	movf	??_isr,w
  4494  000A  00FF               	movwf	127
  4495  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4496  000C  0009               	retfie
  4497  000D                     __end_of_isr:	
  4498  007E                     btemp	set	126	;btemp
  4499  007E                     int$flags	set	126
  4500  007E                     wtemp	set	126
  4501  007E                     wtemp0	set	126
  4502  0080                     wtemp1	set	128
  4503  0082                     wtemp2	set	130
  4504  0084                     wtemp3	set	132
  4505  0086                     wtemp4	set	134
  4506  0088                     wtemp5	set	136
  4507  007F                     wtemp6	set	127
  4508  007E                     ttemp	set	126
  4509  007E                     ttemp0	set	126
  4510  0081                     ttemp1	set	129
  4511  0084                     ttemp2	set	132
  4512  0087                     ttemp3	set	135
  4513  007F                     ttemp4	set	127
  4514  007E                     ltemp	set	126
  4515  007E                     ltemp0	set	126
  4516  0082                     ltemp1	set	130
  4517  0086                     ltemp2	set	134
  4518  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      9      45
    BANK1            32      0       0

Pointer List with Targets:

    HEF_ByteArrayRead@bArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 

    HEF_ByteArrayWrite@byteArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 


Critical Paths under _main in COMMON

    _updateSwitch2State->_saveState
    _initStateManager->_getCurrentState
    _wait_ms->___lmul
    _updateSwitch1State->_saveState
    _saveState->_HEF_ByteArrayWrite
    _HEF_ByteArrayWrite->_FLASH_EraseBlock
    _getSwitch1State->_getCurrentState
    _getCurrentState->_HEF_ByteArrayRead
    _HEF_ByteArrayRead->_FLASH_ReadWord

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_initSwitch1
    _main->_initSwitch2
    _updateSwitch2->_setSwitch2State
    _setSwitch1OffFinish->_updateSwitch1State
    _updateSwitch1->_setSwitch1State
    _setSwitch2OffFinish->_updateSwitch2State
    _initSwitch2->_setSwitch2State
    _setSwitch2State->_updateSwitch2State
    _updateSwitch2State->_saveState
    _initStateManager->_getCurrentState
    _initSwitch1->_setSwitch1State
    _setSwitch1State->_updateSwitch1State
    _updateSwitch1State->_saveState
    _getSwitch1State->_getCurrentState

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11086
                _ConfigureOscillator
                            _InitApp
                        _initSwitch1
                        _initSwitch2
                      _updateSwitch1
                      _updateSwitch2
 ---------------------------------------------------------------------------------
 (1) _updateSwitch2                                        1     1      0    3210
                                              7 BANK0      1     1      0
                _setSwitch1OffFinish
                 _setSwitch1OffStart
                    _setSwitch2State
 ---------------------------------------------------------------------------------
 (2) _setSwitch1OffStart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setSwitch1OffFinish                                  0     0      0    1454
                 _updateSwitch1State
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _updateSwitch1                                        1     1      0    3210
                                              7 BANK0      1     1      0
                    _setSwitch1State
                _setSwitch2OffFinish
                 _setSwitch2OffStart
 ---------------------------------------------------------------------------------
 (2) _setSwitch2OffStart                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setSwitch2OffFinish                                  0     0      0    1454
                 _updateSwitch2State
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _initSwitch2                                          2     2      0    2333
                                              7 BANK0      2     2      0
                    _getSwitch2State
                    _setSwitch2State
 ---------------------------------------------------------------------------------
 (2) _setSwitch2State                                      2     0      2    1756
                                              5 BANK0      2     0      2
                 _updateSwitch2State
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _updateSwitch2State                                   2     0      2     700
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (2) _getSwitch2State                                      2     0      2     554
                                              1 BANK0      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (3) _initStateManager                                     0     0      0     554
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (1) _initSwitch1                                          2     2      0    2333
                                              7 BANK0      2     2      0
                    _getSwitch1State
                    _setSwitch1State
 ---------------------------------------------------------------------------------
 (2) _setSwitch1State                                      2     0      2    1756
                                              5 BANK0      2     0      2
                 _updateSwitch1State
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2     754
                                              0 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitch1State                                   2     0      2     700
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (4) _saveState                                            4     4      0     527
                                             12 COMMON     1     1      0
                                              0 BANK0      3     3      0
                 _HEF_ByteArrayWrite
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayWrite                                   9     7      2     526
                                              4 COMMON     8     6      2
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     195
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getSwitch1State                                      2     0      2     554
                                              1 BANK0      2     0      2
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (4) _getCurrentState                                      3     3      0     554
                                             11 COMMON     2     2      0
                                              0 BANK0      1     1      0
                  _HEF_ByteArrayRead
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayRead                                    7     5      2     553
                                              4 COMMON     7     5      2
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (6) _FLASH_ReadWord                                       3     1      2     259
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
   _initSwitch1
     _getSwitch1State
       _getCurrentState
         _HEF_ByteArrayRead
           _FLASH_ReadWord
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _initSwitch2
     _getSwitch2State
       _initStateManager
         _getCurrentState
           _HEF_ByteArrayRead
             _FLASH_ReadWord
     _setSwitch2State
       _updateSwitch2State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateSwitch1
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
     _setSwitch2OffFinish
       _updateSwitch2State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
     _setSwitch2OffStart
   _updateSwitch2
     _setSwitch1OffFinish
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
     _setSwitch1OffStart
     _setSwitch2State
       _updateSwitch2State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      2D       6       56.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      3A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Dec 27 08:46:34 2016

                _updateSwitch1 00B9                  _updateSwitch2 0021                    __CFG_CP$OFF 0000  
                           l71 0294                    __CFG_LVP$ON 0000                            l141 019B  
                          u625 021D                            u705 025F                            u715 0266  
                          u830 01C6                            u825 01AB                            u595 0164  
                          u780 0200                            u775 01E5                            u935 012E  
                          u865 00C5                            u875 00D5                            u965 002D  
                          u895 00EF                            u975 003D                            u995 0057  
              _getCurrentState 02A3                            _isr 0004                   __CFG_BORV$LO 0000  
                          wreg 0009                           l1300 0178                           l1314 022F  
                         l1340 02BA                           l1500 00CC                           l1318 0231  
                         l1326 0247                           l1262 015E                           l1414 0202  
                         l1344 02C0                           l1352 0254                           l1520 0107  
                         l1504 00DC                           l1266 0160                           l1530 0119  
                         l1522 0109                           l1356 025E                           l1540 013A  
                         l1532 0121                           l1534 0125                           l1376 035D  
                         l1384 0350                           l1480 01C8                           l1562 0044  
                         l1580 0071                           l1398 038D                           l1590 0089  
                         l1558 0034                           l1592 008D                           l1578 006F  
                         l1682 03B7                           l1588 0081                           l1598 00A2  
                         ?_isr 0070                           u1035 0096                   __CFG_WRT$OFF 0000  
   __end_of_HEF_ByteArrayWrite 01A4                           _main 03B3                           fsr0h 0005  
                         fsr1h 0007                           fsr0l 0004                           indf0 0000  
                         indf1 0001                           fsr1l 0006                           btemp 007E  
                         ltemp 007E                           start 000D                           ttemp 007E  
                         wtemp 007E                  __CFG_MCLRE$ON 0000                 ?_updateSwitch1 0070  
               ?_updateSwitch2 0070                __end_of_InitApp 0339                          ??_isr 0070  
                        ?_main 0070                   ?_initSwitch1 0070                   ?_initSwitch2 0070  
                __CFG_WDTE$OFF 0000                          _PMADR 0191       __size_of_getSwitch1State 0007  
     __size_of_getSwitch2State 000C            _ConfigureOscillator 03D2            ___lmul@multiplicand 0075  
           _updateSwitch1State 0356             _updateSwitch2State 0349                 __CFG_BOREN$OFF 0000  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080                __end_of_wait_ms 02A3                   _switch1_down 0026  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                   _switch2_down 002E  
                        status 0003         HEF_ByteArrayRead@block 0074                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
       HEF_ByteArrayRead@count 0075            ?_updateSwitch1State 0047            ?_updateSwitch2State 0047  
         ?_ConfigureOscillator 0070                __initialization 000E                   __end_of_main 03BA  
      __end_of_getCurrentState 02C5                 __CFG_LPBOR$OFF 0000               _initStateManager 03CD  
                       ??_main 007D           ??_updateSwitch1State 007D        __size_of_FLASH_ReadWord 0019  
         ??_updateSwitch2State 007D              _HEF_ByteArrayRead 0218    __end_of_setSwitch1OffFinish 030F  
                       _ADRESH 009C                         _ADRESL 009B             ?_HEF_ByteArrayRead 0074  
  __end_of_setSwitch2OffFinish 0324                         _PMADRH 0192                         _PMADRL 0191  
                       _PMDATH 0194                         _PMDATL 0193                         _PMCON2 0196  
    __size_of_FLASH_EraseBlock 001C                      ??_InitApp 0071          ??_ConfigureOscillator 0071  
              ??_updateSwitch1 004B                ??_updateSwitch2 004B            ??_HEF_ByteArrayRead 0076  
               __CFG_PWRTE$OFF 0000                         ___lmul 024C                 __CFG_STVREN$ON 0000  
             __end_of_init_adc 03B3        FLASH_ReadWord@flashAddr 0071      __end_of_HEF_ByteArrayRead 024C  
      HEF_ByteArrayRead@bArray 007A                      ??_wait_ms 007D                  _switch1_state 003C  
                _switch2_state 0040              ??_getSwitch1State 007D              ??_getSwitch2State 007D  
      __end_of__initialization 001E    __size_of_setSwitch1OffStart 000C               getCurrentState@r 0044  
               __pcstackCOMMON 0070    __size_of_setSwitch2OffStart 000C                   __pidataBANK0 039F  
             ?_getCurrentState 0070           __size_of_initSwitch1 000C           __size_of_initSwitch2 000C  
                   __pbssBANK0 0020         setSwitch1State@f_state 0049               _long_press_limit 003A  
                   __pmaintext 03B3                        ?___lmul 0071                     __pintentry 0004  
           _HEF_ByteArrayWrite 0151             __size_of_saveState 0010       __size_of_setSwitch1State 003A  
     __size_of_setSwitch2State 003A                 ___lmul@product 0079                 _FLASH_ReadWord 02E1  
          ?_HEF_ByteArrayWrite 0074     __size_of_HEF_ByteArrayRead 0034                        _OSCSTAT 009A  
             _FLASH_EraseBlock 02C5       __end_of_initStateManager 03D2                      ?_init_adc 0070  
                      _InitApp 0324           ??_HEF_ByteArrayWrite 0076                     _pedalState 0036  
              __size_of___lmul 002F         __end_of_FLASH_ReadWord 02FA                        __ptext1 0021  
                      __ptext2 0363                        __ptext3 02FA                        __ptext4 00B9  
                      __ptext5 036F                        __ptext6 030F                        __ptext7 037B  
                      __ptext8 01A4                        __ptext9 0349                      _T2CONbits 001C  
                 __size_of_isr 0009                        _wait_ms 027B                        clrloop0 03C2  
         end_of_initialization 001E              __end_of_saveState 0349                        init_ram 03C7  
                   ??_init_adc 0071                        initloop 03C8         setSwitch2State@f_state 0049  
                  wait_ms@time 0044      FLASH_ReadWord@GIEBitValue 0073                 _switch1_toggle 002A  
               _switch2_toggle 0032                ?_FLASH_ReadWord 0071                      _PORTAbits 000C  
              _getSwitch1State 03BA                _getSwitch2State 0387    __size_of_updateSwitch1State 000D  
  __size_of_updateSwitch2State 000D              ??_setSwitch1State 007D               __CFG_FOSC$INTOSC 0000  
            ??_setSwitch2State 007D                      _TRISAbits 008C                      _TRISCbits 008E  
     HEF_ByteArrayRead@wordAdd 0078    __end_of_ConfigureOscillator 03D7        HEF_ByteArrayWrite@block 0079  
      HEF_ByteArrayWrite@count 0075   __size_of_setSwitch1OffFinish 0015                     _switch1_up 003E  
                   _switch2_up 0042   __size_of_setSwitch2OffFinish 0015          __end_of_updateSwitch1 0151  
        __end_of_updateSwitch2 00B9                 __end_of___lmul 027B            start_initialization 000E  
                  __end_of_isr 000D     __end_of_setSwitch1OffStart 036F     __end_of_setSwitch2OffStart 037B  
                     ??___lmul 0079        __end_of_getSwitch1State 03C1        __end_of_getSwitch2State 0393  
                  __pdataBANK0 003A    FLASH_EraseBlock@GIEBitValue 0073       __end_of_FLASH_EraseBlock 02E1  
                ??_initSwitch1 007D                  ??_initSwitch2 007D                      ___latbits 0000  
      updateSwitch1State@state 0047                  __pcstackBANK0 0044       __size_of_getCurrentState 0022  
            ?_initStateManager 0070                       ?_InitApp 0070              __size_of_init_adc 000A  
           ??_initStateManager 007D        updateSwitch2State@state 0047    HEF_ByteArrayWrite@blockAddr 007A  
                   saveState@r 007C                       ?_wait_ms 0044            __end_of_initSwitch1 039F  
          __end_of_initSwitch2 0387    HEF_ByteArrayWrite@byteArray 0074                       _LATAbits 010C  
                     _LATCbits 010E                      clear_ram0 03C1                      _saveState 0339  
  __size_of_HEF_ByteArrayWrite 0053             _switch1_turning_on 002C                       _PIR1bits 0011  
    FLASH_EraseBlock@startAddr 0071               ??_FLASH_ReadWord 0073                _setSwitch1State 01DE  
              _setSwitch2State 01A4               ?_getSwitch1State 0045               ?_getSwitch2State 0045  
                   _ADCON0bits 009D                     _ADCON1bits 009E            _setSwitch1OffFinish 02FA  
           _switch2_turning_on 0034            _setSwitch2OffFinish 030F              ___lmul@multiplier 0071  
            ??_getCurrentState 007B           ?_setSwitch1OffFinish 0070           initSwitch1@initState 004B  
                   ?_saveState 0070               __size_of_InitApp 0015           ?_setSwitch2OffFinish 0070  
         initSwitch2@initState 004B     __end_of_updateSwitch1State 0363     __end_of_updateSwitch2State 0356  
                  _initSwitch1 0393                    _initSwitch2 037B                     _ANSELAbits 018C  
                     __ptext10 0387                       __ptext11 03CD                       __ptext20 03BA  
                     __ptext12 0393                       __ptext21 02A3                       __ptext13 01DE  
                     __ptext22 0218                       __ptext14 027B                       __ptext23 02E1  
                     __ptext15 024C                       __ptext24 0324                       __ptext16 0356  
                     __ptext25 03A9                       __ptext17 0339                       __ptext26 03D2  
                     __ptext18 0151                       __ptext19 02C5               __size_of_wait_ms 0028  
                     _init_adc 03A9          ??_setSwitch1OffFinish 007D                  __size_of_main 0007  
      __end_of_setSwitch1State 0218        __end_of_setSwitch2State 01DE          ??_setSwitch2OffFinish 007D  
 __size_of_ConfigureOscillator 0005                       int$flags 007E             _setSwitch1OffStart 0363  
            ?_FLASH_EraseBlock 0071             _setSwitch2OffStart 036F             ??_FLASH_EraseBlock 0073  
                   _INTCONbits 000B            ?_setSwitch1OffStart 0070            ?_setSwitch2OffStart 0070  
       __size_of_updateSwitch1 0098         __size_of_updateSwitch2 0098                       intlevel1 0000  
                   _PMCON1bits 0195  HEF_ByteArrayWrite@GIEBitValue 0078              __CFG_CLKOUTEN$OFF 0000  
                  ??_saveState 0044                     _OSCCONbits 0099           ??_setSwitch1OffStart 0071  
         ??_setSwitch2OffStart 0071                  _isInitialized 0024                   wait_ms@timel 0020  
    __size_of_initStateManager 0005                _switch1_pressed 0028                _switch2_pressed 0030  
             ?_setSwitch1State 0049               ?_setSwitch2State 0049  
