

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Dec 21 20:55:58 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     	;# 
    38  0001                     	;# 
    39  0002                     	;# 
    40  0003                     	;# 
    41  0004                     	;# 
    42  0005                     	;# 
    43  0006                     	;# 
    44  0007                     	;# 
    45  0008                     	;# 
    46  0009                     	;# 
    47  000A                     	;# 
    48  000B                     	;# 
    49  000C                     	;# 
    50  000E                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0015                     	;# 
    55  0016                     	;# 
    56  0016                     	;# 
    57  0017                     	;# 
    58  0018                     	;# 
    59  0019                     	;# 
    60  001A                     	;# 
    61  001B                     	;# 
    62  001C                     	;# 
    63  008C                     	;# 
    64  008E                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0099                     	;# 
    72  009A                     	;# 
    73  009B                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009E                     	;# 
    78  009F                     	;# 
    79  010C                     	;# 
    80  010E                     	;# 
    81  0111                     	;# 
    82  0112                     	;# 
    83  0113                     	;# 
    84  0114                     	;# 
    85  0115                     	;# 
    86  0116                     	;# 
    87  0117                     	;# 
    88  0118                     	;# 
    89  0119                     	;# 
    90  011D                     	;# 
    91  018C                     	;# 
    92  018E                     	;# 
    93  0191                     	;# 
    94  0191                     	;# 
    95  0192                     	;# 
    96  0193                     	;# 
    97  0193                     	;# 
    98  0194                     	;# 
    99  0195                     	;# 
   100  0196                     	;# 
   101  0197                     	;# 
   102  020C                     	;# 
   103  0211                     	;# 
   104  0211                     	;# 
   105  0212                     	;# 
   106  0212                     	;# 
   107  0213                     	;# 
   108  0213                     	;# 
   109  0214                     	;# 
   110  0214                     	;# 
   111  0215                     	;# 
   112  0215                     	;# 
   113  0215                     	;# 
   114  0216                     	;# 
   115  0216                     	;# 
   116  0217                     	;# 
   117  0217                     	;# 
   118  0391                     	;# 
   119  0392                     	;# 
   120  0393                     	;# 
   121  0498                     	;# 
   122  0498                     	;# 
   123  0499                     	;# 
   124  049A                     	;# 
   125  049B                     	;# 
   126  049B                     	;# 
   127  049C                     	;# 
   128  049D                     	;# 
   129  049E                     	;# 
   130  049F                     	;# 
   131  0611                     	;# 
   132  0612                     	;# 
   133  0613                     	;# 
   134  0613                     	;# 
   135  0614                     	;# 
   136  0615                     	;# 
   137  0616                     	;# 
   138  0616                     	;# 
   139  0617                     	;# 
   140  0618                     	;# 
   141  0619                     	;# 
   142  0619                     	;# 
   143  061A                     	;# 
   144  061B                     	;# 
   145  061C                     	;# 
   146  061C                     	;# 
   147  0691                     	;# 
   148  0692                     	;# 
   149  0693                     	;# 
   150  0694                     	;# 
   151  0695                     	;# 
   152  0F0F                     	;# 
   153  0F10                     	;# 
   154  0F11                     	;# 
   155  0F12                     	;# 
   156  0F13                     	;# 
   157  0F14                     	;# 
   158  0F15                     	;# 
   159  0F16                     	;# 
   160  0F17                     	;# 
   161  0F18                     	;# 
   162  0F19                     	;# 
   163  0F1A                     	;# 
   164  0F1B                     	;# 
   165  0F1C                     	;# 
   166  0F1D                     	;# 
   167  0F1E                     	;# 
   168  0F1F                     	;# 
   169  0FE3                     	;# 
   170  0FE4                     	;# 
   171  0FE5                     	;# 
   172  0FE6                     	;# 
   173  0FE7                     	;# 
   174  0FE8                     	;# 
   175  0FE9                     	;# 
   176  0FEA                     	;# 
   177  0FEB                     	;# 
   178  0FED                     	;# 
   179  0FEE                     	;# 
   180  0FEF                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000E                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  008C                     	;# 
   208  008E                     	;# 
   209  0091                     	;# 
   210  0092                     	;# 
   211  0093                     	;# 
   212  0095                     	;# 
   213  0096                     	;# 
   214  0097                     	;# 
   215  0099                     	;# 
   216  009A                     	;# 
   217  009B                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  010C                     	;# 
   224  010E                     	;# 
   225  0111                     	;# 
   226  0112                     	;# 
   227  0113                     	;# 
   228  0114                     	;# 
   229  0115                     	;# 
   230  0116                     	;# 
   231  0117                     	;# 
   232  0118                     	;# 
   233  0119                     	;# 
   234  011D                     	;# 
   235  018C                     	;# 
   236  018E                     	;# 
   237  0191                     	;# 
   238  0191                     	;# 
   239  0192                     	;# 
   240  0193                     	;# 
   241  0193                     	;# 
   242  0194                     	;# 
   243  0195                     	;# 
   244  0196                     	;# 
   245  0197                     	;# 
   246  020C                     	;# 
   247  0211                     	;# 
   248  0211                     	;# 
   249  0212                     	;# 
   250  0212                     	;# 
   251  0213                     	;# 
   252  0213                     	;# 
   253  0214                     	;# 
   254  0214                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  0391                     	;# 
   263  0392                     	;# 
   264  0393                     	;# 
   265  0498                     	;# 
   266  0498                     	;# 
   267  0499                     	;# 
   268  049A                     	;# 
   269  049B                     	;# 
   270  049B                     	;# 
   271  049C                     	;# 
   272  049D                     	;# 
   273  049E                     	;# 
   274  049F                     	;# 
   275  0611                     	;# 
   276  0612                     	;# 
   277  0613                     	;# 
   278  0613                     	;# 
   279  0614                     	;# 
   280  0615                     	;# 
   281  0616                     	;# 
   282  0616                     	;# 
   283  0617                     	;# 
   284  0618                     	;# 
   285  0619                     	;# 
   286  0619                     	;# 
   287  061A                     	;# 
   288  061B                     	;# 
   289  061C                     	;# 
   290  061C                     	;# 
   291  0691                     	;# 
   292  0692                     	;# 
   293  0693                     	;# 
   294  0694                     	;# 
   295  0695                     	;# 
   296  0F0F                     	;# 
   297  0F10                     	;# 
   298  0F11                     	;# 
   299  0F12                     	;# 
   300  0F13                     	;# 
   301  0F14                     	;# 
   302  0F15                     	;# 
   303  0F16                     	;# 
   304  0F17                     	;# 
   305  0F18                     	;# 
   306  0F19                     	;# 
   307  0F1A                     	;# 
   308  0F1B                     	;# 
   309  0F1C                     	;# 
   310  0F1D                     	;# 
   311  0F1E                     	;# 
   312  0F1F                     	;# 
   313  0FE3                     	;# 
   314  0FE4                     	;# 
   315  0FE5                     	;# 
   316  0FE6                     	;# 
   317  0FE7                     	;# 
   318  0FE8                     	;# 
   319  0FE9                     	;# 
   320  0FEA                     	;# 
   321  0FEB                     	;# 
   322  0FED                     	;# 
   323  0FEE                     	;# 
   324  0FEF                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  0007                     	;# 
   333  0008                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000E                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0013                     	;# 
   342  0015                     	;# 
   343  0016                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001C                     	;# 
   351  008C                     	;# 
   352  008E                     	;# 
   353  0091                     	;# 
   354  0092                     	;# 
   355  0093                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  010C                     	;# 
   368  010E                     	;# 
   369  0111                     	;# 
   370  0112                     	;# 
   371  0113                     	;# 
   372  0114                     	;# 
   373  0115                     	;# 
   374  0116                     	;# 
   375  0117                     	;# 
   376  0118                     	;# 
   377  0119                     	;# 
   378  011D                     	;# 
   379  018C                     	;# 
   380  018E                     	;# 
   381  0191                     	;# 
   382  0191                     	;# 
   383  0192                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0197                     	;# 
   390  020C                     	;# 
   391  0211                     	;# 
   392  0211                     	;# 
   393  0212                     	;# 
   394  0212                     	;# 
   395  0213                     	;# 
   396  0213                     	;# 
   397  0214                     	;# 
   398  0214                     	;# 
   399  0215                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0216                     	;# 
   403  0216                     	;# 
   404  0217                     	;# 
   405  0217                     	;# 
   406  0391                     	;# 
   407  0392                     	;# 
   408  0393                     	;# 
   409  0498                     	;# 
   410  0498                     	;# 
   411  0499                     	;# 
   412  049A                     	;# 
   413  049B                     	;# 
   414  049B                     	;# 
   415  049C                     	;# 
   416  049D                     	;# 
   417  049E                     	;# 
   418  049F                     	;# 
   419  0611                     	;# 
   420  0612                     	;# 
   421  0613                     	;# 
   422  0613                     	;# 
   423  0614                     	;# 
   424  0615                     	;# 
   425  0616                     	;# 
   426  0616                     	;# 
   427  0617                     	;# 
   428  0618                     	;# 
   429  0619                     	;# 
   430  0619                     	;# 
   431  061A                     	;# 
   432  061B                     	;# 
   433  061C                     	;# 
   434  061C                     	;# 
   435  0691                     	;# 
   436  0692                     	;# 
   437  0693                     	;# 
   438  0694                     	;# 
   439  0695                     	;# 
   440  0F0F                     	;# 
   441  0F10                     	;# 
   442  0F11                     	;# 
   443  0F12                     	;# 
   444  0F13                     	;# 
   445  0F14                     	;# 
   446  0F15                     	;# 
   447  0F16                     	;# 
   448  0F17                     	;# 
   449  0F18                     	;# 
   450  0F19                     	;# 
   451  0F1A                     	;# 
   452  0F1B                     	;# 
   453  0F1C                     	;# 
   454  0F1D                     	;# 
   455  0F1E                     	;# 
   456  0F1F                     	;# 
   457  0FE3                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000E                     	;# 
   483  0011                     	;# 
   484  0012                     	;# 
   485  0013                     	;# 
   486  0015                     	;# 
   487  0016                     	;# 
   488  0016                     	;# 
   489  0017                     	;# 
   490  0018                     	;# 
   491  0019                     	;# 
   492  001A                     	;# 
   493  001B                     	;# 
   494  001C                     	;# 
   495  008C                     	;# 
   496  008E                     	;# 
   497  0091                     	;# 
   498  0092                     	;# 
   499  0093                     	;# 
   500  0095                     	;# 
   501  0096                     	;# 
   502  0097                     	;# 
   503  0099                     	;# 
   504  009A                     	;# 
   505  009B                     	;# 
   506  009B                     	;# 
   507  009C                     	;# 
   508  009D                     	;# 
   509  009E                     	;# 
   510  009F                     	;# 
   511  010C                     	;# 
   512  010E                     	;# 
   513  0111                     	;# 
   514  0112                     	;# 
   515  0113                     	;# 
   516  0114                     	;# 
   517  0115                     	;# 
   518  0116                     	;# 
   519  0117                     	;# 
   520  0118                     	;# 
   521  0119                     	;# 
   522  011D                     	;# 
   523  018C                     	;# 
   524  018E                     	;# 
   525  0191                     	;# 
   526  0191                     	;# 
   527  0192                     	;# 
   528  0193                     	;# 
   529  0193                     	;# 
   530  0194                     	;# 
   531  0195                     	;# 
   532  0196                     	;# 
   533  0197                     	;# 
   534  020C                     	;# 
   535  0211                     	;# 
   536  0211                     	;# 
   537  0212                     	;# 
   538  0212                     	;# 
   539  0213                     	;# 
   540  0213                     	;# 
   541  0214                     	;# 
   542  0214                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0216                     	;# 
   547  0216                     	;# 
   548  0217                     	;# 
   549  0217                     	;# 
   550  0391                     	;# 
   551  0392                     	;# 
   552  0393                     	;# 
   553  0498                     	;# 
   554  0498                     	;# 
   555  0499                     	;# 
   556  049A                     	;# 
   557  049B                     	;# 
   558  049B                     	;# 
   559  049C                     	;# 
   560  049D                     	;# 
   561  049E                     	;# 
   562  049F                     	;# 
   563  0611                     	;# 
   564  0612                     	;# 
   565  0613                     	;# 
   566  0613                     	;# 
   567  0614                     	;# 
   568  0615                     	;# 
   569  0616                     	;# 
   570  0616                     	;# 
   571  0617                     	;# 
   572  0618                     	;# 
   573  0619                     	;# 
   574  0619                     	;# 
   575  061A                     	;# 
   576  061B                     	;# 
   577  061C                     	;# 
   578  061C                     	;# 
   579  0691                     	;# 
   580  0692                     	;# 
   581  0693                     	;# 
   582  0694                     	;# 
   583  0695                     	;# 
   584  0F0F                     	;# 
   585  0F10                     	;# 
   586  0F11                     	;# 
   587  0F12                     	;# 
   588  0F13                     	;# 
   589  0F14                     	;# 
   590  0F15                     	;# 
   591  0F16                     	;# 
   592  0F17                     	;# 
   593  0F18                     	;# 
   594  0F19                     	;# 
   595  0F1A                     	;# 
   596  0F1B                     	;# 
   597  0F1C                     	;# 
   598  0F1D                     	;# 
   599  0F1E                     	;# 
   600  0F1F                     	;# 
   601  0FE3                     	;# 
   602  0FE4                     	;# 
   603  0FE5                     	;# 
   604  0FE6                     	;# 
   605  0FE7                     	;# 
   606  0FE8                     	;# 
   607  0FE9                     	;# 
   608  0FEA                     	;# 
   609  0FEB                     	;# 
   610  0FED                     	;# 
   611  0FEE                     	;# 
   612  0FEF                     	;# 
   613  0000                     	;# 
   614  0001                     	;# 
   615  0002                     	;# 
   616  0003                     	;# 
   617  0004                     	;# 
   618  0005                     	;# 
   619  0006                     	;# 
   620  0007                     	;# 
   621  0008                     	;# 
   622  0009                     	;# 
   623  000A                     	;# 
   624  000B                     	;# 
   625  000C                     	;# 
   626  000E                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0013                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008E                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0093                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  009F                     	;# 
   655  010C                     	;# 
   656  010E                     	;# 
   657  0111                     	;# 
   658  0112                     	;# 
   659  0113                     	;# 
   660  0114                     	;# 
   661  0115                     	;# 
   662  0116                     	;# 
   663  0117                     	;# 
   664  0118                     	;# 
   665  0119                     	;# 
   666  011D                     	;# 
   667  018C                     	;# 
   668  018E                     	;# 
   669  0191                     	;# 
   670  0191                     	;# 
   671  0192                     	;# 
   672  0193                     	;# 
   673  0193                     	;# 
   674  0194                     	;# 
   675  0195                     	;# 
   676  0196                     	;# 
   677  0197                     	;# 
   678  020C                     	;# 
   679  0211                     	;# 
   680  0211                     	;# 
   681  0212                     	;# 
   682  0212                     	;# 
   683  0213                     	;# 
   684  0213                     	;# 
   685  0214                     	;# 
   686  0214                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0216                     	;# 
   691  0216                     	;# 
   692  0217                     	;# 
   693  0217                     	;# 
   694  0391                     	;# 
   695  0392                     	;# 
   696  0393                     	;# 
   697  0498                     	;# 
   698  0498                     	;# 
   699  0499                     	;# 
   700  049A                     	;# 
   701  049B                     	;# 
   702  049B                     	;# 
   703  049C                     	;# 
   704  049D                     	;# 
   705  049E                     	;# 
   706  049F                     	;# 
   707  0611                     	;# 
   708  0612                     	;# 
   709  0613                     	;# 
   710  0613                     	;# 
   711  0614                     	;# 
   712  0615                     	;# 
   713  0616                     	;# 
   714  0616                     	;# 
   715  0617                     	;# 
   716  0618                     	;# 
   717  0619                     	;# 
   718  0619                     	;# 
   719  061A                     	;# 
   720  061B                     	;# 
   721  061C                     	;# 
   722  061C                     	;# 
   723  0691                     	;# 
   724  0692                     	;# 
   725  0693                     	;# 
   726  0694                     	;# 
   727  0695                     	;# 
   728  0F0F                     	;# 
   729  0F10                     	;# 
   730  0F11                     	;# 
   731  0F12                     	;# 
   732  0F13                     	;# 
   733  0F14                     	;# 
   734  0F15                     	;# 
   735  0F16                     	;# 
   736  0F17                     	;# 
   737  0F18                     	;# 
   738  0F19                     	;# 
   739  0F1A                     	;# 
   740  0F1B                     	;# 
   741  0F1C                     	;# 
   742  0F1D                     	;# 
   743  0F1E                     	;# 
   744  0F1F                     	;# 
   745  0FE3                     	;# 
   746  0FE4                     	;# 
   747  0FE5                     	;# 
   748  0FE6                     	;# 
   749  0FE7                     	;# 
   750  0FE8                     	;# 
   751  0FE9                     	;# 
   752  0FEA                     	;# 
   753  0FEB                     	;# 
   754  0FED                     	;# 
   755  0FEE                     	;# 
   756  0FEF                     	;# 
   757  0000                     	;# 
   758  0001                     	;# 
   759  0002                     	;# 
   760  0003                     	;# 
   761  0004                     	;# 
   762  0005                     	;# 
   763  0006                     	;# 
   764  0007                     	;# 
   765  0008                     	;# 
   766  0009                     	;# 
   767  000A                     	;# 
   768  000B                     	;# 
   769  000C                     	;# 
   770  000E                     	;# 
   771  0011                     	;# 
   772  0012                     	;# 
   773  0013                     	;# 
   774  0015                     	;# 
   775  0016                     	;# 
   776  0016                     	;# 
   777  0017                     	;# 
   778  0018                     	;# 
   779  0019                     	;# 
   780  001A                     	;# 
   781  001B                     	;# 
   782  001C                     	;# 
   783  008C                     	;# 
   784  008E                     	;# 
   785  0091                     	;# 
   786  0092                     	;# 
   787  0093                     	;# 
   788  0095                     	;# 
   789  0096                     	;# 
   790  0097                     	;# 
   791  0099                     	;# 
   792  009A                     	;# 
   793  009B                     	;# 
   794  009B                     	;# 
   795  009C                     	;# 
   796  009D                     	;# 
   797  009E                     	;# 
   798  009F                     	;# 
   799  010C                     	;# 
   800  010E                     	;# 
   801  0111                     	;# 
   802  0112                     	;# 
   803  0113                     	;# 
   804  0114                     	;# 
   805  0115                     	;# 
   806  0116                     	;# 
   807  0117                     	;# 
   808  0118                     	;# 
   809  0119                     	;# 
   810  011D                     	;# 
   811  018C                     	;# 
   812  018E                     	;# 
   813  0191                     	;# 
   814  0191                     	;# 
   815  0192                     	;# 
   816  0193                     	;# 
   817  0193                     	;# 
   818  0194                     	;# 
   819  0195                     	;# 
   820  0196                     	;# 
   821  0197                     	;# 
   822  020C                     	;# 
   823  0211                     	;# 
   824  0211                     	;# 
   825  0212                     	;# 
   826  0212                     	;# 
   827  0213                     	;# 
   828  0213                     	;# 
   829  0214                     	;# 
   830  0214                     	;# 
   831  0215                     	;# 
   832  0215                     	;# 
   833  0215                     	;# 
   834  0216                     	;# 
   835  0216                     	;# 
   836  0217                     	;# 
   837  0217                     	;# 
   838  0391                     	;# 
   839  0392                     	;# 
   840  0393                     	;# 
   841  0498                     	;# 
   842  0498                     	;# 
   843  0499                     	;# 
   844  049A                     	;# 
   845  049B                     	;# 
   846  049B                     	;# 
   847  049C                     	;# 
   848  049D                     	;# 
   849  049E                     	;# 
   850  049F                     	;# 
   851  0611                     	;# 
   852  0612                     	;# 
   853  0613                     	;# 
   854  0613                     	;# 
   855  0614                     	;# 
   856  0615                     	;# 
   857  0616                     	;# 
   858  0616                     	;# 
   859  0617                     	;# 
   860  0618                     	;# 
   861  0619                     	;# 
   862  0619                     	;# 
   863  061A                     	;# 
   864  061B                     	;# 
   865  061C                     	;# 
   866  061C                     	;# 
   867  0691                     	;# 
   868  0692                     	;# 
   869  0693                     	;# 
   870  0694                     	;# 
   871  0695                     	;# 
   872  0F0F                     	;# 
   873  0F10                     	;# 
   874  0F11                     	;# 
   875  0F12                     	;# 
   876  0F13                     	;# 
   877  0F14                     	;# 
   878  0F15                     	;# 
   879  0F16                     	;# 
   880  0F17                     	;# 
   881  0F18                     	;# 
   882  0F19                     	;# 
   883  0F1A                     	;# 
   884  0F1B                     	;# 
   885  0F1C                     	;# 
   886  0F1D                     	;# 
   887  0F1E                     	;# 
   888  0F1F                     	;# 
   889  0FE3                     	;# 
   890  0FE4                     	;# 
   891  0FE5                     	;# 
   892  0FE6                     	;# 
   893  0FE7                     	;# 
   894  0FE8                     	;# 
   895  0FE9                     	;# 
   896  0FEA                     	;# 
   897  0FEB                     	;# 
   898  0FED                     	;# 
   899  0FEE                     	;# 
   900  0FEF                     	;# 
   901  0000                     	;# 
   902  0001                     	;# 
   903  0002                     	;# 
   904  0003                     	;# 
   905  0004                     	;# 
   906  0005                     	;# 
   907  0006                     	;# 
   908  0007                     	;# 
   909  0008                     	;# 
   910  0009                     	;# 
   911  000A                     	;# 
   912  000B                     	;# 
   913  000C                     	;# 
   914  000E                     	;# 
   915  0011                     	;# 
   916  0012                     	;# 
   917  0013                     	;# 
   918  0015                     	;# 
   919  0016                     	;# 
   920  0016                     	;# 
   921  0017                     	;# 
   922  0018                     	;# 
   923  0019                     	;# 
   924  001A                     	;# 
   925  001B                     	;# 
   926  001C                     	;# 
   927  008C                     	;# 
   928  008E                     	;# 
   929  0091                     	;# 
   930  0092                     	;# 
   931  0093                     	;# 
   932  0095                     	;# 
   933  0096                     	;# 
   934  0097                     	;# 
   935  0099                     	;# 
   936  009A                     	;# 
   937  009B                     	;# 
   938  009B                     	;# 
   939  009C                     	;# 
   940  009D                     	;# 
   941  009E                     	;# 
   942  009F                     	;# 
   943  010C                     	;# 
   944  010E                     	;# 
   945  0111                     	;# 
   946  0112                     	;# 
   947  0113                     	;# 
   948  0114                     	;# 
   949  0115                     	;# 
   950  0116                     	;# 
   951  0117                     	;# 
   952  0118                     	;# 
   953  0119                     	;# 
   954  011D                     	;# 
   955  018C                     	;# 
   956  018E                     	;# 
   957  0191                     	;# 
   958  0191                     	;# 
   959  0192                     	;# 
   960  0193                     	;# 
   961  0193                     	;# 
   962  0194                     	;# 
   963  0195                     	;# 
   964  0196                     	;# 
   965  0197                     	;# 
   966  020C                     	;# 
   967  0211                     	;# 
   968  0211                     	;# 
   969  0212                     	;# 
   970  0212                     	;# 
   971  0213                     	;# 
   972  0213                     	;# 
   973  0214                     	;# 
   974  0214                     	;# 
   975  0215                     	;# 
   976  0215                     	;# 
   977  0215                     	;# 
   978  0216                     	;# 
   979  0216                     	;# 
   980  0217                     	;# 
   981  0217                     	;# 
   982  0391                     	;# 
   983  0392                     	;# 
   984  0393                     	;# 
   985  0498                     	;# 
   986  0498                     	;# 
   987  0499                     	;# 
   988  049A                     	;# 
   989  049B                     	;# 
   990  049B                     	;# 
   991  049C                     	;# 
   992  049D                     	;# 
   993  049E                     	;# 
   994  049F                     	;# 
   995  0611                     	;# 
   996  0612                     	;# 
   997  0613                     	;# 
   998  0613                     	;# 
   999  0614                     	;# 
  1000  0615                     	;# 
  1001  0616                     	;# 
  1002  0616                     	;# 
  1003  0617                     	;# 
  1004  0618                     	;# 
  1005  0619                     	;# 
  1006  0619                     	;# 
  1007  061A                     	;# 
  1008  061B                     	;# 
  1009  061C                     	;# 
  1010  061C                     	;# 
  1011  0691                     	;# 
  1012  0692                     	;# 
  1013  0693                     	;# 
  1014  0694                     	;# 
  1015  0695                     	;# 
  1016  0F0F                     	;# 
  1017  0F10                     	;# 
  1018  0F11                     	;# 
  1019  0F12                     	;# 
  1020  0F13                     	;# 
  1021  0F14                     	;# 
  1022  0F15                     	;# 
  1023  0F16                     	;# 
  1024  0F17                     	;# 
  1025  0F18                     	;# 
  1026  0F19                     	;# 
  1027  0F1A                     	;# 
  1028  0F1B                     	;# 
  1029  0F1C                     	;# 
  1030  0F1D                     	;# 
  1031  0F1E                     	;# 
  1032  0F1F                     	;# 
  1033  0FE3                     	;# 
  1034  0FE4                     	;# 
  1035  0FE5                     	;# 
  1036  0FE6                     	;# 
  1037  0FE7                     	;# 
  1038  0FE8                     	;# 
  1039  0FE9                     	;# 
  1040  0FEA                     	;# 
  1041  0FEB                     	;# 
  1042  0FED                     	;# 
  1043  0FEE                     	;# 
  1044  0FEF                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0008                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000E                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0013                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008E                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0093                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  009F                     	;# 
  1087  010C                     	;# 
  1088  010E                     	;# 
  1089  0111                     	;# 
  1090  0112                     	;# 
  1091  0113                     	;# 
  1092  0114                     	;# 
  1093  0115                     	;# 
  1094  0116                     	;# 
  1095  0117                     	;# 
  1096  0118                     	;# 
  1097  0119                     	;# 
  1098  011D                     	;# 
  1099  018C                     	;# 
  1100  018E                     	;# 
  1101  0191                     	;# 
  1102  0191                     	;# 
  1103  0192                     	;# 
  1104  0193                     	;# 
  1105  0193                     	;# 
  1106  0194                     	;# 
  1107  0195                     	;# 
  1108  0196                     	;# 
  1109  0197                     	;# 
  1110  020C                     	;# 
  1111  0211                     	;# 
  1112  0211                     	;# 
  1113  0212                     	;# 
  1114  0212                     	;# 
  1115  0213                     	;# 
  1116  0213                     	;# 
  1117  0214                     	;# 
  1118  0214                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0216                     	;# 
  1123  0216                     	;# 
  1124  0217                     	;# 
  1125  0217                     	;# 
  1126  0391                     	;# 
  1127  0392                     	;# 
  1128  0393                     	;# 
  1129  0498                     	;# 
  1130  0498                     	;# 
  1131  0499                     	;# 
  1132  049A                     	;# 
  1133  049B                     	;# 
  1134  049B                     	;# 
  1135  049C                     	;# 
  1136  049D                     	;# 
  1137  049E                     	;# 
  1138  049F                     	;# 
  1139  0611                     	;# 
  1140  0612                     	;# 
  1141  0613                     	;# 
  1142  0613                     	;# 
  1143  0614                     	;# 
  1144  0615                     	;# 
  1145  0616                     	;# 
  1146  0616                     	;# 
  1147  0617                     	;# 
  1148  0618                     	;# 
  1149  0619                     	;# 
  1150  0619                     	;# 
  1151  061A                     	;# 
  1152  061B                     	;# 
  1153  061C                     	;# 
  1154  061C                     	;# 
  1155  0691                     	;# 
  1156  0692                     	;# 
  1157  0693                     	;# 
  1158  0694                     	;# 
  1159  0695                     	;# 
  1160  0F0F                     	;# 
  1161  0F10                     	;# 
  1162  0F11                     	;# 
  1163  0F12                     	;# 
  1164  0F13                     	;# 
  1165  0F14                     	;# 
  1166  0F15                     	;# 
  1167  0F16                     	;# 
  1168  0F17                     	;# 
  1169  0F18                     	;# 
  1170  0F19                     	;# 
  1171  0F1A                     	;# 
  1172  0F1B                     	;# 
  1173  0F1C                     	;# 
  1174  0F1D                     	;# 
  1175  0F1E                     	;# 
  1176  0F1F                     	;# 
  1177  0FE3                     	;# 
  1178  0FE4                     	;# 
  1179  0FE5                     	;# 
  1180  0FE6                     	;# 
  1181  0FE7                     	;# 
  1182  0FE8                     	;# 
  1183  0FE9                     	;# 
  1184  0FEA                     	;# 
  1185  0FEB                     	;# 
  1186  0FED                     	;# 
  1187  0FEE                     	;# 
  1188  0FEF                     	;# 
  1189  0000                     	;# 
  1190  0001                     	;# 
  1191  0002                     	;# 
  1192  0003                     	;# 
  1193  0004                     	;# 
  1194  0005                     	;# 
  1195  0006                     	;# 
  1196  0007                     	;# 
  1197  0008                     	;# 
  1198  0009                     	;# 
  1199  000A                     	;# 
  1200  000B                     	;# 
  1201  000C                     	;# 
  1202  000E                     	;# 
  1203  0011                     	;# 
  1204  0012                     	;# 
  1205  0013                     	;# 
  1206  0015                     	;# 
  1207  0016                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001C                     	;# 
  1215  008C                     	;# 
  1216  008E                     	;# 
  1217  0091                     	;# 
  1218  0092                     	;# 
  1219  0093                     	;# 
  1220  0095                     	;# 
  1221  0096                     	;# 
  1222  0097                     	;# 
  1223  0099                     	;# 
  1224  009A                     	;# 
  1225  009B                     	;# 
  1226  009B                     	;# 
  1227  009C                     	;# 
  1228  009D                     	;# 
  1229  009E                     	;# 
  1230  009F                     	;# 
  1231  010C                     	;# 
  1232  010E                     	;# 
  1233  0111                     	;# 
  1234  0112                     	;# 
  1235  0113                     	;# 
  1236  0114                     	;# 
  1237  0115                     	;# 
  1238  0116                     	;# 
  1239  0117                     	;# 
  1240  0118                     	;# 
  1241  0119                     	;# 
  1242  011D                     	;# 
  1243  018C                     	;# 
  1244  018E                     	;# 
  1245  0191                     	;# 
  1246  0191                     	;# 
  1247  0192                     	;# 
  1248  0193                     	;# 
  1249  0193                     	;# 
  1250  0194                     	;# 
  1251  0195                     	;# 
  1252  0196                     	;# 
  1253  0197                     	;# 
  1254  020C                     	;# 
  1255  0211                     	;# 
  1256  0211                     	;# 
  1257  0212                     	;# 
  1258  0212                     	;# 
  1259  0213                     	;# 
  1260  0213                     	;# 
  1261  0214                     	;# 
  1262  0214                     	;# 
  1263  0215                     	;# 
  1264  0215                     	;# 
  1265  0215                     	;# 
  1266  0216                     	;# 
  1267  0216                     	;# 
  1268  0217                     	;# 
  1269  0217                     	;# 
  1270  0391                     	;# 
  1271  0392                     	;# 
  1272  0393                     	;# 
  1273  0498                     	;# 
  1274  0498                     	;# 
  1275  0499                     	;# 
  1276  049A                     	;# 
  1277  049B                     	;# 
  1278  049B                     	;# 
  1279  049C                     	;# 
  1280  049D                     	;# 
  1281  049E                     	;# 
  1282  049F                     	;# 
  1283  0611                     	;# 
  1284  0612                     	;# 
  1285  0613                     	;# 
  1286  0613                     	;# 
  1287  0614                     	;# 
  1288  0615                     	;# 
  1289  0616                     	;# 
  1290  0616                     	;# 
  1291  0617                     	;# 
  1292  0618                     	;# 
  1293  0619                     	;# 
  1294  0619                     	;# 
  1295  061A                     	;# 
  1296  061B                     	;# 
  1297  061C                     	;# 
  1298  061C                     	;# 
  1299  0691                     	;# 
  1300  0692                     	;# 
  1301  0693                     	;# 
  1302  0694                     	;# 
  1303  0695                     	;# 
  1304  0F0F                     	;# 
  1305  0F10                     	;# 
  1306  0F11                     	;# 
  1307  0F12                     	;# 
  1308  0F13                     	;# 
  1309  0F14                     	;# 
  1310  0F15                     	;# 
  1311  0F16                     	;# 
  1312  0F17                     	;# 
  1313  0F18                     	;# 
  1314  0F19                     	;# 
  1315  0F1A                     	;# 
  1316  0F1B                     	;# 
  1317  0F1C                     	;# 
  1318  0F1D                     	;# 
  1319  0F1E                     	;# 
  1320  0F1F                     	;# 
  1321  0FE3                     	;# 
  1322  0FE4                     	;# 
  1323  0FE5                     	;# 
  1324  0FE6                     	;# 
  1325  0FE7                     	;# 
  1326  0FE8                     	;# 
  1327  0FE9                     	;# 
  1328  0FEA                     	;# 
  1329  0FEB                     	;# 
  1330  0FED                     	;# 
  1331  0FEE                     	;# 
  1332  0FEF                     	;# 
  1333  0000                     	;# 
  1334  0001                     	;# 
  1335  0002                     	;# 
  1336  0003                     	;# 
  1337  0004                     	;# 
  1338  0005                     	;# 
  1339  0006                     	;# 
  1340  0007                     	;# 
  1341  0008                     	;# 
  1342  0009                     	;# 
  1343  000A                     	;# 
  1344  000B                     	;# 
  1345  000C                     	;# 
  1346  000E                     	;# 
  1347  0011                     	;# 
  1348  0012                     	;# 
  1349  0013                     	;# 
  1350  0015                     	;# 
  1351  0016                     	;# 
  1352  0016                     	;# 
  1353  0017                     	;# 
  1354  0018                     	;# 
  1355  0019                     	;# 
  1356  001A                     	;# 
  1357  001B                     	;# 
  1358  001C                     	;# 
  1359  008C                     	;# 
  1360  008E                     	;# 
  1361  0091                     	;# 
  1362  0092                     	;# 
  1363  0093                     	;# 
  1364  0095                     	;# 
  1365  0096                     	;# 
  1366  0097                     	;# 
  1367  0099                     	;# 
  1368  009A                     	;# 
  1369  009B                     	;# 
  1370  009B                     	;# 
  1371  009C                     	;# 
  1372  009D                     	;# 
  1373  009E                     	;# 
  1374  009F                     	;# 
  1375  010C                     	;# 
  1376  010E                     	;# 
  1377  0111                     	;# 
  1378  0112                     	;# 
  1379  0113                     	;# 
  1380  0114                     	;# 
  1381  0115                     	;# 
  1382  0116                     	;# 
  1383  0117                     	;# 
  1384  0118                     	;# 
  1385  0119                     	;# 
  1386  011D                     	;# 
  1387  018C                     	;# 
  1388  018E                     	;# 
  1389  0191                     	;# 
  1390  0191                     	;# 
  1391  0192                     	;# 
  1392  0193                     	;# 
  1393  0193                     	;# 
  1394  0194                     	;# 
  1395  0195                     	;# 
  1396  0196                     	;# 
  1397  0197                     	;# 
  1398  020C                     	;# 
  1399  0211                     	;# 
  1400  0211                     	;# 
  1401  0212                     	;# 
  1402  0212                     	;# 
  1403  0213                     	;# 
  1404  0213                     	;# 
  1405  0214                     	;# 
  1406  0214                     	;# 
  1407  0215                     	;# 
  1408  0215                     	;# 
  1409  0215                     	;# 
  1410  0216                     	;# 
  1411  0216                     	;# 
  1412  0217                     	;# 
  1413  0217                     	;# 
  1414  0391                     	;# 
  1415  0392                     	;# 
  1416  0393                     	;# 
  1417  0498                     	;# 
  1418  0498                     	;# 
  1419  0499                     	;# 
  1420  049A                     	;# 
  1421  049B                     	;# 
  1422  049B                     	;# 
  1423  049C                     	;# 
  1424  049D                     	;# 
  1425  049E                     	;# 
  1426  049F                     	;# 
  1427  0611                     	;# 
  1428  0612                     	;# 
  1429  0613                     	;# 
  1430  0613                     	;# 
  1431  0614                     	;# 
  1432  0615                     	;# 
  1433  0616                     	;# 
  1434  0616                     	;# 
  1435  0617                     	;# 
  1436  0618                     	;# 
  1437  0619                     	;# 
  1438  0619                     	;# 
  1439  061A                     	;# 
  1440  061B                     	;# 
  1441  061C                     	;# 
  1442  061C                     	;# 
  1443  0691                     	;# 
  1444  0692                     	;# 
  1445  0693                     	;# 
  1446  0694                     	;# 
  1447  0695                     	;# 
  1448  0F0F                     	;# 
  1449  0F10                     	;# 
  1450  0F11                     	;# 
  1451  0F12                     	;# 
  1452  0F13                     	;# 
  1453  0F14                     	;# 
  1454  0F15                     	;# 
  1455  0F16                     	;# 
  1456  0F17                     	;# 
  1457  0F18                     	;# 
  1458  0F19                     	;# 
  1459  0F1A                     	;# 
  1460  0F1B                     	;# 
  1461  0F1C                     	;# 
  1462  0F1D                     	;# 
  1463  0F1E                     	;# 
  1464  0F1F                     	;# 
  1465  0FE3                     	;# 
  1466  0FE4                     	;# 
  1467  0FE5                     	;# 
  1468  0FE6                     	;# 
  1469  0FE7                     	;# 
  1470  0FE8                     	;# 
  1471  0FE9                     	;# 
  1472  0FEA                     	;# 
  1473  0FEB                     	;# 
  1474  0FED                     	;# 
  1475  0FEE                     	;# 
  1476  0FEF                     	;# 
  1477                           
  1478                           	psect	idataBANK0
  1479  0343                     __pidataBANK0:	
  1480                           
  1481                           ;initializer for _long_press_limit
  1482  0343  3400               	retlw	0
  1483  0344  342D               	retlw	45
  1484                           
  1485                           ;initializer for _switch1_state
  1486  0345  34FF               	retlw	255
  1487  0346  34FF               	retlw	255
  1488                           
  1489                           ;initializer for _switch1_up
  1490  0347  3401               	retlw	1
  1491  0348  3400               	retlw	0
  1492                           
  1493                           ;initializer for _switch2_state
  1494  0349  34FF               	retlw	255
  1495  034A  34FF               	retlw	255
  1496                           
  1497                           ;initializer for _switch2_up
  1498  034B  3401               	retlw	1
  1499  034C  3400               	retlw	0
  1500  000B                     _INTCONbits	set	11
  1501  0011                     _PIR1bits	set	17
  1502  000C                     _PORTAbits	set	12
  1503  001C                     _T2CONbits	set	28
  1504  009D                     _ADCON0bits	set	157
  1505  009E                     _ADCON1bits	set	158
  1506  009C                     _ADRESH	set	156
  1507  009B                     _ADRESL	set	155
  1508  0099                     _OSCCONbits	set	153
  1509  009A                     _OSCSTAT	set	154
  1510  008C                     _TRISAbits	set	140
  1511  008E                     _TRISCbits	set	142
  1512  010C                     _LATAbits	set	268
  1513  010E                     _LATCbits	set	270
  1514  0191                     _PMADR	set	401
  1515  018C                     _ANSELAbits	set	396
  1516  0192                     _PMADRH	set	402
  1517  0191                     _PMADRL	set	401
  1518  0195                     _PMCON1bits	set	405
  1519  0196                     _PMCON2	set	406
  1520  0194                     _PMDATH	set	404
  1521  0193                     _PMDATL	set	403
  1522                           
  1523                           ; #config settings
  1524  0000                     
  1525                           	psect	cinit
  1526  000E                     start_initialization:	
  1527  000E                     __initialization:	
  1528                           
  1529                           ; Clear objects allocated to BANK0
  1530  000E  3020               	movlw	low __pbssBANK0
  1531  000F  0084               	movwf	4
  1532  0010  3000               	movlw	high __pbssBANK0
  1533  0011  0085               	movwf	5
  1534  0012  301A               	movlw	26
  1535  0013  2365               	fcall	clear_ram0
  1536                           
  1537                           ; Initialize objects allocated to BANK0
  1538  0014  3043               	movlw	low __pidataBANK0
  1539  0015  0084               	movwf	4
  1540  0016  3083               	movlw	(high __pidataBANK0)| (0+128)
  1541  0017  0085               	movwf	5
  1542  0018  303A               	movlw	low __pdataBANK0
  1543  0019  0086               	movwf	6
  1544  001A  3000               	movlw	high __pdataBANK0
  1545  001B  0087               	movwf	7
  1546  001C  300A               	movlw	10
  1547  001D  236B               	fcall	init_ram
  1548  001E                     end_of_initialization:	
  1549                           ;End of C runtime variable initialization code
  1550                           
  1551  001E                     __end_of__initialization:	
  1552  001E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1553  001F  0020               	movlb	0
  1554  0020  2B57               	ljmp	_main	;jump to C main() function
  1555                           
  1556                           	psect	bssBANK0
  1557  0020                     __pbssBANK0:	
  1558  0020                     wait_ms@timel:	
  1559  0020                     	ds	4
  1560  0024                     _isInitialized:	
  1561  0024                     	ds	2
  1562  0026                     _switch1_down:	
  1563  0026                     	ds	2
  1564  0028                     _switch1_pressed:	
  1565  0028                     	ds	2
  1566  002A                     _switch1_toggle:	
  1567  002A                     	ds	2
  1568  002C                     _switch1_turning_on:	
  1569  002C                     	ds	2
  1570  002E                     _switch2_down:	
  1571  002E                     	ds	2
  1572  0030                     _switch2_pressed:	
  1573  0030                     	ds	2
  1574  0032                     _switch2_toggle:	
  1575  0032                     	ds	2
  1576  0034                     _switch2_turning_on:	
  1577  0034                     	ds	2
  1578  0036                     _pedalState:	
  1579  0036                     	ds	4
  1580                           
  1581                           	psect	dataBANK0
  1582  003A                     __pdataBANK0:	
  1583  003A                     _long_press_limit:	
  1584  003A                     	ds	2
  1585  003C                     _switch1_state:	
  1586  003C                     	ds	2
  1587  003E                     _switch1_up:	
  1588  003E                     	ds	2
  1589  0040                     _switch2_state:	
  1590  0040                     	ds	2
  1591  0042                     _switch2_up:	
  1592  0042                     	ds	2
  1593                           
  1594                           	psect	clrtext
  1595  0365                     clear_ram0:	
  1596                           ;	Called with FSR0 containing the base address, and
  1597                           ;	WREG with the size to clear
  1598                           
  1599  0365  0064               	clrwdt	;clear the watchdog before getting into this loop
  1600  0366                     clrloop0:	
  1601  0366  0180               	clrf	0	;clear RAM location pointed to by FSR
  1602  0367  3101               	addfsr 0,1
  1603  0368  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1604  0369  2B66               	goto	clrloop0	;have we reached the end yet?
  1605  036A  3400               	retlw	0	;all done for this memory range, return
  1606                           
  1607                           	psect	inittext
  1608  036B                     init_ram:	
  1609  036B  00FE               	movwf	126
  1610  036C                     initloop:	
  1611  036C  0012               	moviw fsr0++
  1612  036D  001E               	movwi fsr1++
  1613  036E  0BFE               	decfsz	126,f
  1614  036F  2B6C               	goto	initloop
  1615  0370  3400               	retlw	0
  1616                           
  1617                           	psect	cstackCOMMON
  1618  0070                     __pcstackCOMMON:	
  1619  0070                     ?_ConfigureOscillator:	
  1620  0070                     ?_InitApp:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623  0070                     ?_initSwitch1:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0070                     ?_initSwitch2:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629  0070                     ?_updateSwitch1:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0070                     ?_updateSwitch2:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635  0070                     ?_init_adc:	
  1636                           ; 1 bytes @ 0x0
  1637                           
  1638  0070                     ?_saveState:	
  1639                           ; 1 bytes @ 0x0
  1640                           
  1641  0070                     ?_isr:	
  1642                           ; 1 bytes @ 0x0
  1643                           
  1644  0070                     ??_isr:	
  1645                           ; 1 bytes @ 0x0
  1646                           
  1647  0070                     ?_main:	
  1648                           ; 1 bytes @ 0x0
  1649                           
  1650  0070                     ?_initStateManager:	
  1651                           ; 1 bytes @ 0x0
  1652                           
  1653  0070                     ?_getCurrentState:	
  1654                           ; 1 bytes @ 0x0
  1655                           
  1656                           
  1657                           ; 4 bytes @ 0x0
  1658  0070                     	ds	1
  1659  0071                     ?_FLASH_EraseBlock:	
  1660  0071                     ??_ConfigureOscillator:	
  1661                           ; 1 bytes @ 0x1
  1662                           
  1663  0071                     ??_InitApp:	
  1664                           ; 1 bytes @ 0x1
  1665                           
  1666  0071                     ??_init_adc:	
  1667                           ; 1 bytes @ 0x1
  1668                           
  1669  0071                     ?_FLASH_ReadWord:	
  1670                           ; 1 bytes @ 0x1
  1671                           
  1672  0071                     ?___lmul:	
  1673                           ; 2 bytes @ 0x1
  1674                           
  1675  0071                     FLASH_ReadWord@flashAddr:	
  1676                           ; 4 bytes @ 0x1
  1677                           
  1678  0071                     FLASH_EraseBlock@startAddr:	
  1679                           ; 2 bytes @ 0x1
  1680                           
  1681  0071                     ___lmul@multiplier:	
  1682                           ; 2 bytes @ 0x1
  1683                           
  1684                           
  1685                           ; 4 bytes @ 0x1
  1686  0071                     	ds	2
  1687  0073                     ??_FLASH_EraseBlock:	
  1688  0073                     ??_FLASH_ReadWord:	
  1689                           ; 1 bytes @ 0x3
  1690                           
  1691  0073                     FLASH_ReadWord@GIEBitValue:	
  1692                           ; 1 bytes @ 0x3
  1693                           
  1694  0073                     FLASH_EraseBlock@GIEBitValue:	
  1695                           ; 1 bytes @ 0x3
  1696                           
  1697                           
  1698                           ; 1 bytes @ 0x3
  1699  0073                     	ds	1
  1700  0074                     ?_HEF_ByteArrayWrite:	
  1701  0074                     ?_HEF_ByteArrayRead:	
  1702                           ; 1 bytes @ 0x4
  1703                           
  1704  0074                     HEF_ByteArrayWrite@byteArray:	
  1705                           ; 1 bytes @ 0x4
  1706                           
  1707  0074                     HEF_ByteArrayRead@block:	
  1708                           ; 1 bytes @ 0x4
  1709                           
  1710                           
  1711                           ; 1 bytes @ 0x4
  1712  0074                     	ds	1
  1713  0075                     HEF_ByteArrayWrite@count:	
  1714  0075                     HEF_ByteArrayRead@count:	
  1715                           ; 1 bytes @ 0x5
  1716                           
  1717  0075                     ___lmul@multiplicand:	
  1718                           ; 1 bytes @ 0x5
  1719                           
  1720                           
  1721                           ; 4 bytes @ 0x5
  1722  0075                     	ds	1
  1723  0076                     ??_HEF_ByteArrayWrite:	
  1724  0076                     ??_HEF_ByteArrayRead:	
  1725                           ; 1 bytes @ 0x6
  1726                           
  1727                           
  1728                           ; 1 bytes @ 0x6
  1729  0076                     	ds	2
  1730  0078                     HEF_ByteArrayWrite@GIEBitValue:	
  1731  0078                     HEF_ByteArrayRead@wordAdd:	
  1732                           ; 1 bytes @ 0x8
  1733                           
  1734                           
  1735                           ; 2 bytes @ 0x8
  1736  0078                     	ds	1
  1737  0079                     ??___lmul:	
  1738  0079                     HEF_ByteArrayWrite@block:	
  1739                           ; 1 bytes @ 0x9
  1740                           
  1741  0079                     ___lmul@product:	
  1742                           ; 1 bytes @ 0x9
  1743                           
  1744                           
  1745                           ; 4 bytes @ 0x9
  1746  0079                     	ds	1
  1747  007A                     HEF_ByteArrayRead@bArray:	
  1748  007A                     HEF_ByteArrayWrite@blockAddr:	
  1749                           ; 1 bytes @ 0xA
  1750                           
  1751                           
  1752                           ; 2 bytes @ 0xA
  1753  007A                     	ds	1
  1754  007B                     ??_getCurrentState:	
  1755                           
  1756                           ; 1 bytes @ 0xB
  1757  007B                     	ds	1
  1758  007C                     saveState@r:	
  1759                           
  1760                           ; 1 bytes @ 0xC
  1761  007C                     	ds	1
  1762  007D                     ??_initSwitch1:	
  1763  007D                     ??_initSwitch2:	
  1764                           ; 1 bytes @ 0xD
  1765                           
  1766  007D                     ??_setSwitch1State:	
  1767                           ; 1 bytes @ 0xD
  1768                           
  1769  007D                     ??_setSwitch2State:	
  1770                           ; 1 bytes @ 0xD
  1771                           
  1772  007D                     ??_main:	
  1773                           ; 1 bytes @ 0xD
  1774                           
  1775  007D                     ??_wait_ms:	
  1776                           ; 1 bytes @ 0xD
  1777                           
  1778  007D                     ??_initStateManager:	
  1779                           ; 1 bytes @ 0xD
  1780                           
  1781  007D                     ??_getSwitch1State:	
  1782                           ; 1 bytes @ 0xD
  1783                           
  1784  007D                     ??_getSwitch2State:	
  1785                           ; 1 bytes @ 0xD
  1786                           
  1787  007D                     ??_updateSwitch1State:	
  1788                           ; 1 bytes @ 0xD
  1789                           
  1790  007D                     ??_updateSwitch2State:	
  1791                           ; 1 bytes @ 0xD
  1792                           
  1793                           
  1794                           	psect	cstackBANK0
  1795  0044                     __pcstackBANK0:	
  1796                           ; 1 bytes @ 0xD
  1797                           
  1798  0044                     ??_saveState:	
  1799  0044                     ?_wait_ms:	
  1800                           ; 1 bytes @ 0x0
  1801                           
  1802  0044                     getCurrentState@r:	
  1803                           ; 1 bytes @ 0x0
  1804                           
  1805  0044                     wait_ms@time:	
  1806                           ; 1 bytes @ 0x0
  1807                           
  1808                           
  1809                           ; 2 bytes @ 0x0
  1810  0044                     	ds	1
  1811  0045                     ?_getSwitch1State:	
  1812  0045                     ?_getSwitch2State:	
  1813                           ; 2 bytes @ 0x1
  1814                           
  1815                           
  1816                           ; 2 bytes @ 0x1
  1817  0045                     	ds	2
  1818  0047                     ?_updateSwitch1State:	
  1819  0047                     ?_updateSwitch2State:	
  1820                           ; 1 bytes @ 0x3
  1821                           
  1822  0047                     updateSwitch1State@state:	
  1823                           ; 1 bytes @ 0x3
  1824                           
  1825  0047                     updateSwitch2State@state:	
  1826                           ; 2 bytes @ 0x3
  1827                           
  1828                           
  1829                           ; 2 bytes @ 0x3
  1830  0047                     	ds	2
  1831  0049                     ?_setSwitch1State:	
  1832  0049                     ?_setSwitch2State:	
  1833                           ; 1 bytes @ 0x5
  1834                           
  1835  0049                     setSwitch1State@f_state:	
  1836                           ; 1 bytes @ 0x5
  1837                           
  1838  0049                     setSwitch2State@f_state:	
  1839                           ; 2 bytes @ 0x5
  1840                           
  1841                           
  1842                           ; 2 bytes @ 0x5
  1843  0049                     	ds	2
  1844  004B                     ??_updateSwitch1:	
  1845  004B                     ??_updateSwitch2:	
  1846                           ; 1 bytes @ 0x7
  1847                           
  1848  004B                     initSwitch1@initState:	
  1849                           ; 1 bytes @ 0x7
  1850                           
  1851  004B                     initSwitch2@initState:	
  1852                           ; 2 bytes @ 0x7
  1853                           
  1854                           
  1855                           ; 2 bytes @ 0x7
  1856  004B                     	ds	2
  1857                           
  1858                           	psect	maintext
  1859  0357                     __pmaintext:	
  1860 ;;
  1861 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1862 ;;
  1863 ;; *************** function _main *****************
  1864 ;; Defined at:
  1865 ;;		line 28 in file "main.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : B1F/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1
  1879 ;;      Params:         0       0       0
  1880 ;;      Locals:         0       0       0
  1881 ;;      Temps:          0       0       0
  1882 ;;      Totals:         0       0       0
  1883 ;;Total ram usage:        0 bytes
  1884 ;; Hardware stack levels required when called:    7
  1885 ;; This function calls:
  1886 ;;		_ConfigureOscillator
  1887 ;;		_InitApp
  1888 ;;		_initSwitch1
  1889 ;;		_initSwitch2
  1890 ;;		_updateSwitch1
  1891 ;;		_updateSwitch2
  1892 ;; This function is called by:
  1893 ;;		Startup code after reset
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           
  1898                           ;psect for function _main
  1899  0357                     _main:	
  1900                           
  1901                           ;main.c: 29: ConfigureOscillator();
  1902                           
  1903                           ;incstack = 0
  1904                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1905  0357  2376               	fcall	_ConfigureOscillator
  1906                           
  1907                           ;main.c: 30: InitApp();
  1908  0358  22E0               	fcall	_InitApp
  1909                           
  1910                           ;main.c: 33: initSwitch1();
  1911  0359  2337               	fcall	_initSwitch1
  1912                           
  1913                           ;main.c: 34: initSwitch2();
  1914  035A  231F               	fcall	_initSwitch2
  1915  035B                     l1548:	
  1916                           ;main.c: 36: while (1) {
  1917                           
  1918                           
  1919                           ;main.c: 37: updateSwitch1();
  1920  035B  20AC               	fcall	_updateSwitch1
  1921                           
  1922                           ;main.c: 38: updateSwitch2();
  1923  035C  2021               	fcall	_updateSwitch2
  1924  035D  2B5B               	goto	l1548
  1925  035E                     __end_of_main:	
  1926                           
  1927                           	psect	text1
  1928  0021                     __ptext1:	
  1929 ;; *************** function _updateSwitch2 *****************
  1930 ;; Defined at:
  1931 ;;		line 29 in file "switch2.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      void 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMMON   BANK0   BANK1
  1945 ;;      Params:         0       0       0
  1946 ;;      Locals:         0       0       0
  1947 ;;      Temps:          0       1       0
  1948 ;;      Totals:         0       1       0
  1949 ;;Total ram usage:        1 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    6
  1952 ;; This function calls:
  1953 ;;		_setSwitch1State
  1954 ;;		_setSwitch2State
  1955 ;; This function is called by:
  1956 ;;		_main
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           
  1961                           ;psect for function _updateSwitch2
  1962  0021                     _updateSwitch2:	
  1963                           
  1964                           ;switch2.c: 36: if (PORTAbits.RA5 == 0) {
  1965                           
  1966                           ;incstack = 0
  1967                           ; Regs used in _updateSwitch2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1968  0021  0020               	movlb	0	; select bank0
  1969  0022  1A8C               	btfsc	12,5	;volatile
  1970  0023  2834               	goto	l1430
  1971                           
  1972                           ;switch2.c: 37: if (switch2_pressed > 0) {
  1973  0024  0831               	movf	_switch2_pressed+1,w
  1974  0025  3A80               	xorlw	128
  1975  0026  00CB               	movwf	??_updateSwitch2
  1976  0027  3080               	movlw	128
  1977  0028  024B               	subwf	??_updateSwitch2,w
  1978  0029  1D03               	skipz
  1979  002A  282D               	goto	u895
  1980  002B  3001               	movlw	1
  1981  002C  0230               	subwf	_switch2_pressed,w
  1982  002D                     u895:	
  1983  002D  1C03               	skipc
  1984  002E  2844               	goto	l1434
  1985                           
  1986                           ;switch2.c: 38: switch2_pressed--;
  1987  002F  30FF               	movlw	255
  1988  0030  0020               	movlb	0	; select bank0
  1989  0031  07B0               	addwf	_switch2_pressed,f
  1990  0032  30FF               	movlw	255
  1991  0033  2843               	goto	L1
  1992  0034                     l1430:	
  1993                           ;switch2.c: 39: }
  1994                           ;switch2.c: 40: } else if (switch2_pressed < 25) {
  1995                           
  1996  0034  0831               	movf	_switch2_pressed+1,w
  1997  0035  3A80               	xorlw	128
  1998  0036  00CB               	movwf	??_updateSwitch2
  1999  0037  3080               	movlw	128
  2000  0038  024B               	subwf	??_updateSwitch2,w
  2001  0039  1D03               	skipz
  2002  003A  283D               	goto	u905
  2003  003B  3019               	movlw	25
  2004  003C  0230               	subwf	_switch2_pressed,w
  2005  003D                     u905:	
  2006  003D  1803               	skipnc
  2007  003E  2844               	goto	l1434
  2008                           
  2009                           ;switch2.c: 41: switch2_pressed++;
  2010  003F  3001               	movlw	1
  2011  0040  0020               	movlb	0	; select bank0
  2012  0041  07B0               	addwf	_switch2_pressed,f
  2013  0042  3000               	movlw	0
  2014  0043                     L1:	
  2015  0043  3DB1               	addwfc	_switch2_pressed+1,f
  2016  0044                     l1434:	
  2017                           
  2018                           ;switch2.c: 42: }
  2019                           ;switch2.c: 48: if (switch2_pressed == 0) {
  2020  0044  0020               	movlb	0	; select bank0
  2021  0045  0830               	movf	_switch2_pressed,w
  2022  0046  0431               	iorwf	_switch2_pressed+1,w
  2023  0047  1D03               	btfss	3,2
  2024  0048  2881               	goto	l1458
  2025                           
  2026                           ;switch2.c: 56: switch2_down++;
  2027  0049  3001               	movlw	1
  2028  004A  07AE               	addwf	_switch2_down,f
  2029  004B  3000               	movlw	0
  2030  004C  3DAF               	addwfc	_switch2_down+1,f
  2031                           
  2032                           ;switch2.c: 57: if (switch2_state == 1) {
  2033  004D  0340               	decf	_switch2_state,w
  2034  004E  0441               	iorwf	_switch2_state+1,w
  2035  004F  1D03               	btfss	3,2
  2036  0050  2872               	goto	l1450
  2037                           
  2038                           ;switch2.c: 58: if (switch2_up == 1) {
  2039  0051  0342               	decf	_switch2_up,w
  2040  0052  0443               	iorwf	_switch2_up+1,w
  2041  0053  1D03               	btfss	3,2
  2042  0054  2859               	goto	l284
  2043                           
  2044                           ;switch2.c: 59: switch2_toggle = 1;
  2045  0055  3001               	movlw	1
  2046  0056  00B2               	movwf	_switch2_toggle
  2047  0057  3000               	movlw	0
  2048  0058  00B3               	movwf	_switch2_toggle+1
  2049  0059                     l284:	
  2050                           
  2051                           ;switch2.c: 60: }
  2052                           ;switch2.c: 62: if (switch2_down >= long_press_limit) {
  2053  0059  082F               	movf	_switch2_down+1,w
  2054  005A  3A80               	xorlw	128
  2055  005B  00CB               	movwf	??_updateSwitch2
  2056  005C  083B               	movf	_long_press_limit+1,w
  2057  005D  3A80               	xorlw	128
  2058  005E  024B               	subwf	??_updateSwitch2,w
  2059  005F  1D03               	skipz
  2060  0060  2863               	goto	u945
  2061  0061  083A               	movf	_long_press_limit,w
  2062  0062  022E               	subwf	_switch2_down,w
  2063  0063                     u945:	
  2064  0063  1C03               	skipc
  2065  0064  287D               	goto	l1456
  2066                           
  2067                           ;switch2.c: 63: switch2_down = long_press_limit;
  2068  0065  0020               	movlb	0	; select bank0
  2069  0066  083B               	movf	_long_press_limit+1,w
  2070  0067  00AF               	movwf	_switch2_down+1
  2071  0068  083A               	movf	_long_press_limit,w
  2072  0069  00AE               	movwf	_switch2_down
  2073                           
  2074                           ;switch2.c: 64: setSwitch1State(0);
  2075  006A  3000               	movlw	0
  2076  006B  00C9               	movwf	setSwitch1State@f_state
  2077  006C  00CA               	movwf	setSwitch1State@f_state+1
  2078  006D  21C4               	fcall	_setSwitch1State
  2079                           
  2080                           ;switch2.c: 65: switch2_toggle = 0;
  2081  006E  0020               	movlb	0	; select bank0
  2082  006F  01B2               	clrf	_switch2_toggle
  2083  0070  01B3               	clrf	_switch2_toggle+1
  2084                           
  2085                           ;switch2.c: 66: }
  2086                           ;switch2.c: 67: } else {
  2087  0071  287D               	goto	l1456
  2088  0072                     l1450:	
  2089                           
  2090                           ;switch2.c: 69: switch2_turning_on = 1;
  2091  0072  3001               	movlw	1
  2092  0073  00B4               	movwf	_switch2_turning_on
  2093  0074  3000               	movlw	0
  2094  0075  00B5               	movwf	_switch2_turning_on+1
  2095                           
  2096                           ;switch2.c: 70: switch2_toggle = 0;
  2097  0076  01B2               	clrf	_switch2_toggle
  2098  0077  01B3               	clrf	_switch2_toggle+1
  2099                           
  2100                           ;switch2.c: 71: setSwitch2State(1);
  2101  0078  3001               	movlw	1
  2102  0079  00C9               	movwf	setSwitch2State@f_state
  2103  007A  3000               	movlw	0
  2104  007B  00CA               	movwf	setSwitch2State@f_state+1
  2105  007C  218A               	fcall	_setSwitch2State
  2106  007D                     l1456:	
  2107                           
  2108                           ;switch2.c: 72: }
  2109                           ;switch2.c: 74: switch2_up = 0;
  2110  007D  0020               	movlb	0	; select bank0
  2111  007E  01C2               	clrf	_switch2_up
  2112  007F  01C3               	clrf	_switch2_up+1
  2113                           
  2114                           ;switch2.c: 75: } else if (switch2_pressed >= 25) {
  2115  0080  0008               	return
  2116  0081                     l1458:	
  2117  0081  0831               	movf	_switch2_pressed+1,w
  2118  0082  3A80               	xorlw	128
  2119  0083  00CB               	movwf	??_updateSwitch2
  2120  0084  3080               	movlw	128
  2121  0085  024B               	subwf	??_updateSwitch2,w
  2122  0086  1D03               	skipz
  2123  0087  288A               	goto	u955
  2124  0088  3019               	movlw	25
  2125  0089  0230               	subwf	_switch2_pressed,w
  2126  008A                     u955:	
  2127  008A  1C03               	skipc
  2128  008B  0008               	return
  2129                           
  2130                           ;switch2.c: 76: if (switch2_toggle == 1) {
  2131  008C  0020               	movlb	0	; select bank0
  2132  008D  0332               	decf	_switch2_toggle,w
  2133  008E  0433               	iorwf	_switch2_toggle+1,w
  2134  008F  1D03               	btfss	3,2
  2135  0090  2895               	goto	l1464
  2136                           
  2137                           ;switch2.c: 77: setSwitch2State(0);
  2138  0091  3000               	movlw	0
  2139  0092  00C9               	movwf	setSwitch2State@f_state
  2140  0093  00CA               	movwf	setSwitch2State@f_state+1
  2141  0094  218A               	fcall	_setSwitch2State
  2142  0095                     l1464:	
  2143                           
  2144                           ;switch2.c: 78: }
  2145                           ;switch2.c: 79: LATCbits.LATC5 = switch2_state;
  2146  0095  0020               	movlb	0	; select bank0
  2147  0096  0C40               	rrf	_switch2_state,w
  2148  0097  0022               	movlb	2	; select bank2
  2149  0098  1C03               	skipc
  2150  0099  128E               	bcf	14,5	;volatile
  2151  009A  1803               	skipnc
  2152  009B  168E               	bsf	14,5	;volatile
  2153                           
  2154                           ;switch2.c: 80: switch2_turning_on = 0;
  2155  009C  0020               	movlb	0	; select bank0
  2156  009D  01B4               	clrf	_switch2_turning_on
  2157  009E  01B5               	clrf	_switch2_turning_on+1
  2158                           
  2159                           ;switch2.c: 81: switch2_toggle = 0;
  2160  009F  01B2               	clrf	_switch2_toggle
  2161  00A0  01B3               	clrf	_switch2_toggle+1
  2162                           
  2163                           ;switch2.c: 82: switch2_up = 1;
  2164  00A1  3001               	movlw	1
  2165  00A2  00C2               	movwf	_switch2_up
  2166  00A3  3000               	movlw	0
  2167  00A4  00C3               	movwf	_switch2_up+1
  2168                           
  2169                           ;switch2.c: 83: switch2_down = 0;
  2170  00A5  01AE               	clrf	_switch2_down
  2171  00A6  01AF               	clrf	_switch2_down+1
  2172                           
  2173                           ;switch2.c: 84: switch2_pressed = 25;
  2174  00A7  3019               	movlw	25
  2175  00A8  00B0               	movwf	_switch2_pressed
  2176  00A9  3000               	movlw	0
  2177  00AA  00B1               	movwf	_switch2_pressed+1
  2178  00AB  0008               	return
  2179  00AC                     __end_of_updateSwitch2:	
  2180                           
  2181                           	psect	text2
  2182  00AC                     __ptext2:	
  2183 ;; *************** function _updateSwitch1 *****************
  2184 ;; Defined at:
  2185 ;;		line 29 in file "switch1.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      void 
  2192 ;; Registers used:
  2193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1
  2199 ;;      Params:         0       0       0
  2200 ;;      Locals:         0       0       0
  2201 ;;      Temps:          0       1       0
  2202 ;;      Totals:         0       1       0
  2203 ;;Total ram usage:        1 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    6
  2206 ;; This function calls:
  2207 ;;		_setSwitch1State
  2208 ;;		_setSwitch2State
  2209 ;; This function is called by:
  2210 ;;		_main
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           
  2215                           ;psect for function _updateSwitch1
  2216  00AC                     _updateSwitch1:	
  2217                           
  2218                           ;switch1.c: 36: if (PORTAbits.RA4 == 0) {
  2219                           
  2220                           ;incstack = 0
  2221                           ; Regs used in _updateSwitch1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2222  00AC  0020               	movlb	0	; select bank0
  2223  00AD  1A0C               	btfsc	12,4	;volatile
  2224  00AE  28BF               	goto	l1378
  2225                           
  2226                           ;switch1.c: 37: if (switch1_pressed > 0) {
  2227  00AF  0829               	movf	_switch1_pressed+1,w
  2228  00B0  3A80               	xorlw	128
  2229  00B1  00CB               	movwf	??_updateSwitch1
  2230  00B2  3080               	movlw	128
  2231  00B3  024B               	subwf	??_updateSwitch1,w
  2232  00B4  1D03               	skipz
  2233  00B5  28B8               	goto	u805
  2234  00B6  3001               	movlw	1
  2235  00B7  0228               	subwf	_switch1_pressed,w
  2236  00B8                     u805:	
  2237  00B8  1C03               	skipc
  2238  00B9  28CF               	goto	l1382
  2239                           
  2240                           ;switch1.c: 38: switch1_pressed--;
  2241  00BA  30FF               	movlw	255
  2242  00BB  0020               	movlb	0	; select bank0
  2243  00BC  07A8               	addwf	_switch1_pressed,f
  2244  00BD  30FF               	movlw	255
  2245  00BE  28CE               	goto	L2
  2246  00BF                     l1378:	
  2247                           ;switch1.c: 39: }
  2248                           ;switch1.c: 40: } else if (switch1_pressed < 25) {
  2249                           
  2250  00BF  0829               	movf	_switch1_pressed+1,w
  2251  00C0  3A80               	xorlw	128
  2252  00C1  00CB               	movwf	??_updateSwitch1
  2253  00C2  3080               	movlw	128
  2254  00C3  024B               	subwf	??_updateSwitch1,w
  2255  00C4  1D03               	skipz
  2256  00C5  28C8               	goto	u815
  2257  00C6  3019               	movlw	25
  2258  00C7  0228               	subwf	_switch1_pressed,w
  2259  00C8                     u815:	
  2260  00C8  1803               	skipnc
  2261  00C9  28CF               	goto	l1382
  2262                           
  2263                           ;switch1.c: 41: switch1_pressed++;
  2264  00CA  3001               	movlw	1
  2265  00CB  0020               	movlb	0	; select bank0
  2266  00CC  07A8               	addwf	_switch1_pressed,f
  2267  00CD  3000               	movlw	0
  2268  00CE                     L2:	
  2269  00CE  3DA9               	addwfc	_switch1_pressed+1,f
  2270  00CF                     l1382:	
  2271                           
  2272                           ;switch1.c: 42: }
  2273                           ;switch1.c: 48: if (switch1_pressed == 0) {
  2274  00CF  0020               	movlb	0	; select bank0
  2275  00D0  0828               	movf	_switch1_pressed,w
  2276  00D1  0429               	iorwf	_switch1_pressed+1,w
  2277  00D2  1D03               	btfss	3,2
  2278  00D3  290C               	goto	l1406
  2279                           
  2280                           ;switch1.c: 49: switch1_down++;
  2281  00D4  3001               	movlw	1
  2282  00D5  07A6               	addwf	_switch1_down,f
  2283  00D6  3000               	movlw	0
  2284  00D7  3DA7               	addwfc	_switch1_down+1,f
  2285                           
  2286                           ;switch1.c: 50: if (switch1_state == 1) {
  2287  00D8  033C               	decf	_switch1_state,w
  2288  00D9  043D               	iorwf	_switch1_state+1,w
  2289  00DA  1D03               	btfss	3,2
  2290  00DB  28FD               	goto	l1398
  2291                           
  2292                           ;switch1.c: 51: if (switch1_up == 1) {
  2293  00DC  033E               	decf	_switch1_up,w
  2294  00DD  043F               	iorwf	_switch1_up+1,w
  2295  00DE  1D03               	btfss	3,2
  2296  00DF  28E4               	goto	l234
  2297                           
  2298                           ;switch1.c: 52: switch1_toggle = 1;
  2299  00E0  3001               	movlw	1
  2300  00E1  00AA               	movwf	_switch1_toggle
  2301  00E2  3000               	movlw	0
  2302  00E3  00AB               	movwf	_switch1_toggle+1
  2303  00E4                     l234:	
  2304                           
  2305                           ;switch1.c: 53: }
  2306                           ;switch1.c: 55: if (switch1_down >= long_press_limit) {
  2307  00E4  0827               	movf	_switch1_down+1,w
  2308  00E5  3A80               	xorlw	128
  2309  00E6  00CB               	movwf	??_updateSwitch1
  2310  00E7  083B               	movf	_long_press_limit+1,w
  2311  00E8  3A80               	xorlw	128
  2312  00E9  024B               	subwf	??_updateSwitch1,w
  2313  00EA  1D03               	skipz
  2314  00EB  28EE               	goto	u855
  2315  00EC  083A               	movf	_long_press_limit,w
  2316  00ED  0226               	subwf	_switch1_down,w
  2317  00EE                     u855:	
  2318  00EE  1C03               	skipc
  2319  00EF  2908               	goto	l1404
  2320                           
  2321                           ;switch1.c: 56: switch1_down = long_press_limit;
  2322  00F0  0020               	movlb	0	; select bank0
  2323  00F1  083B               	movf	_long_press_limit+1,w
  2324  00F2  00A7               	movwf	_switch1_down+1
  2325  00F3  083A               	movf	_long_press_limit,w
  2326  00F4  00A6               	movwf	_switch1_down
  2327                           
  2328                           ;switch1.c: 57: setSwitch2State(0);
  2329  00F5  3000               	movlw	0
  2330  00F6  00C9               	movwf	setSwitch2State@f_state
  2331  00F7  00CA               	movwf	setSwitch2State@f_state+1
  2332  00F8  218A               	fcall	_setSwitch2State
  2333                           
  2334                           ;switch1.c: 58: switch1_toggle = 0;
  2335  00F9  0020               	movlb	0	; select bank0
  2336  00FA  01AA               	clrf	_switch1_toggle
  2337  00FB  01AB               	clrf	_switch1_toggle+1
  2338                           
  2339                           ;switch1.c: 59: }
  2340                           ;switch1.c: 60: } else {
  2341  00FC  2908               	goto	l1404
  2342  00FD                     l1398:	
  2343                           
  2344                           ;switch1.c: 62: switch1_turning_on = 1;
  2345  00FD  3001               	movlw	1
  2346  00FE  00AC               	movwf	_switch1_turning_on
  2347  00FF  3000               	movlw	0
  2348  0100  00AD               	movwf	_switch1_turning_on+1
  2349                           
  2350                           ;switch1.c: 63: switch1_toggle = 0;
  2351  0101  01AA               	clrf	_switch1_toggle
  2352  0102  01AB               	clrf	_switch1_toggle+1
  2353                           
  2354                           ;switch1.c: 64: setSwitch1State(1);
  2355  0103  3001               	movlw	1
  2356  0104  00C9               	movwf	setSwitch1State@f_state
  2357  0105  3000               	movlw	0
  2358  0106  00CA               	movwf	setSwitch1State@f_state+1
  2359  0107  21C4               	fcall	_setSwitch1State
  2360  0108                     l1404:	
  2361                           
  2362                           ;switch1.c: 65: }
  2363                           ;switch1.c: 67: switch1_up = 0;
  2364  0108  0020               	movlb	0	; select bank0
  2365  0109  01BE               	clrf	_switch1_up
  2366  010A  01BF               	clrf	_switch1_up+1
  2367                           
  2368                           ;switch1.c: 68: } else if (switch1_pressed >= 25) {
  2369  010B  0008               	return
  2370  010C                     l1406:	
  2371  010C  0829               	movf	_switch1_pressed+1,w
  2372  010D  3A80               	xorlw	128
  2373  010E  00CB               	movwf	??_updateSwitch1
  2374  010F  3080               	movlw	128
  2375  0110  024B               	subwf	??_updateSwitch1,w
  2376  0111  1D03               	skipz
  2377  0112  2915               	goto	u865
  2378  0113  3019               	movlw	25
  2379  0114  0228               	subwf	_switch1_pressed,w
  2380  0115                     u865:	
  2381  0115  1C03               	skipc
  2382  0116  0008               	return
  2383                           
  2384                           ;switch1.c: 69: if (switch1_toggle == 1) {
  2385  0117  0020               	movlb	0	; select bank0
  2386  0118  032A               	decf	_switch1_toggle,w
  2387  0119  042B               	iorwf	_switch1_toggle+1,w
  2388  011A  1D03               	btfss	3,2
  2389  011B  2920               	goto	l1412
  2390                           
  2391                           ;switch1.c: 70: setSwitch1State(0);
  2392  011C  3000               	movlw	0
  2393  011D  00C9               	movwf	setSwitch1State@f_state
  2394  011E  00CA               	movwf	setSwitch1State@f_state+1
  2395  011F  21C4               	fcall	_setSwitch1State
  2396  0120                     l1412:	
  2397                           
  2398                           ;switch1.c: 71: }
  2399                           ;switch1.c: 72: LATAbits.LATA2 = switch1_state;
  2400  0120  0020               	movlb	0	; select bank0
  2401  0121  0C3C               	rrf	_switch1_state,w
  2402  0122  0022               	movlb	2	; select bank2
  2403  0123  1C03               	skipc
  2404  0124  110C               	bcf	12,2	;volatile
  2405  0125  1803               	skipnc
  2406  0126  150C               	bsf	12,2	;volatile
  2407                           
  2408                           ;switch1.c: 73: switch1_turning_on = 0;
  2409  0127  0020               	movlb	0	; select bank0
  2410  0128  01AC               	clrf	_switch1_turning_on
  2411  0129  01AD               	clrf	_switch1_turning_on+1
  2412                           
  2413                           ;switch1.c: 74: switch1_toggle = 0;
  2414  012A  01AA               	clrf	_switch1_toggle
  2415  012B  01AB               	clrf	_switch1_toggle+1
  2416                           
  2417                           ;switch1.c: 75: switch1_up = 1;
  2418  012C  3001               	movlw	1
  2419  012D  00BE               	movwf	_switch1_up
  2420  012E  3000               	movlw	0
  2421  012F  00BF               	movwf	_switch1_up+1
  2422                           
  2423                           ;switch1.c: 76: switch1_down = 0;
  2424  0130  01A6               	clrf	_switch1_down
  2425  0131  01A7               	clrf	_switch1_down+1
  2426                           
  2427                           ;switch1.c: 77: switch1_pressed = 25;
  2428  0132  3019               	movlw	25
  2429  0133  00A8               	movwf	_switch1_pressed
  2430  0134  3000               	movlw	0
  2431  0135  00A9               	movwf	_switch1_pressed+1
  2432  0136  0008               	return
  2433  0137                     __end_of_updateSwitch1:	
  2434                           
  2435                           	psect	text3
  2436  031F                     __ptext3:	
  2437 ;; *************** function _initSwitch2 *****************
  2438 ;; Defined at:
  2439 ;;		line 24 in file "switch2.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;		None
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;  initState       2    7[BANK0 ] int 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMMON   BANK0   BANK1
  2453 ;;      Params:         0       0       0
  2454 ;;      Locals:         0       2       0
  2455 ;;      Temps:          0       0       0
  2456 ;;      Totals:         0       2       0
  2457 ;;Total ram usage:        2 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    6
  2460 ;; This function calls:
  2461 ;;		_getSwitch2State
  2462 ;;		_setSwitch2State
  2463 ;; This function is called by:
  2464 ;;		_main
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           
  2469                           ;psect for function _initSwitch2
  2470  031F                     _initSwitch2:	
  2471                           
  2472                           ;switch2.c: 25: int initState = getSwitch2State();
  2473                           
  2474                           ;incstack = 0
  2475                           ; Regs used in _initSwitch2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2476  031F  232B               	fcall	_getSwitch2State
  2477  0320  0020               	movlb	0	; select bank0
  2478  0321  0846               	movf	?_getSwitch2State+1,w
  2479  0322  00CC               	movwf	initSwitch2@initState+1
  2480  0323  0845               	movf	?_getSwitch2State,w
  2481  0324  00CB               	movwf	initSwitch2@initState
  2482                           
  2483                           ;switch2.c: 26: setSwitch2State(initState);
  2484  0325  084C               	movf	initSwitch2@initState+1,w
  2485  0326  00CA               	movwf	setSwitch2State@f_state+1
  2486  0327  084B               	movf	initSwitch2@initState,w
  2487  0328  00C9               	movwf	setSwitch2State@f_state
  2488  0329  218A               	fcall	_setSwitch2State
  2489  032A  0008               	return
  2490  032B                     __end_of_initSwitch2:	
  2491                           
  2492                           	psect	text4
  2493  018A                     __ptext4:	
  2494 ;; *************** function _setSwitch2State *****************
  2495 ;; Defined at:
  2496 ;;		line 88 in file "switch2.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;  f_state         2    5[BANK0 ] int 
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;		None
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  1    wreg      void 
  2503 ;; Registers used:
  2504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMMON   BANK0   BANK1
  2510 ;;      Params:         0       2       0
  2511 ;;      Locals:         0       0       0
  2512 ;;      Temps:          0       0       0
  2513 ;;      Totals:         0       2       0
  2514 ;;Total ram usage:        2 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    5
  2517 ;; This function calls:
  2518 ;;		_updateSwitch2State
  2519 ;;		_wait_ms
  2520 ;; This function is called by:
  2521 ;;		_updateSwitch1
  2522 ;;		_initSwitch2
  2523 ;;		_updateSwitch2
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           
  2528                           ;psect for function _setSwitch2State
  2529  018A                     _setSwitch2State:	
  2530                           
  2531                           ;switch2.c: 89: if (switch2_state == f_state) {return;}
  2532                           
  2533                           ;incstack = 0
  2534                           ; Regs used in _setSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2535  018A  0020               	movlb	0	; select bank0
  2536  018B  084A               	movf	setSwitch2State@f_state+1,w
  2537  018C  0641               	xorwf	_switch2_state+1,w
  2538  018D  1D03               	skipz
  2539  018E  2991               	goto	u765
  2540  018F  0849               	movf	setSwitch2State@f_state,w
  2541  0190  0640               	xorwf	_switch2_state,w
  2542  0191                     u765:	
  2543  0191  1903               	btfsc	3,2
  2544  0192  0008               	return
  2545                           
  2546                           ;switch2.c: 90: switch2_state = f_state;
  2547  0193  084A               	movf	setSwitch2State@f_state+1,w
  2548  0194  00C1               	movwf	_switch2_state+1
  2549  0195  0849               	movf	setSwitch2State@f_state,w
  2550  0196  00C0               	movwf	_switch2_state
  2551                           
  2552                           ;switch2.c: 91: LATCbits.LATC5 = f_state;
  2553  0197  0C49               	rrf	setSwitch2State@f_state,w
  2554  0198  0022               	movlb	2	; select bank2
  2555  0199  1C03               	skipc
  2556  019A  128E               	bcf	14,5	;volatile
  2557  019B  1803               	skipnc
  2558  019C  168E               	bsf	14,5	;volatile
  2559                           
  2560                           ;switch2.c: 92: LATCbits.LATC0 = f_state;
  2561  019D  0020               	movlb	0	; select bank0
  2562  019E  0C49               	rrf	setSwitch2State@f_state,w
  2563  019F  0022               	movlb	2	; select bank2
  2564  01A0  1C03               	skipc
  2565  01A1  100E               	bcf	14,0	;volatile
  2566  01A2  1803               	skipnc
  2567  01A3  140E               	bsf	14,0	;volatile
  2568                           
  2569                           ;switch2.c: 93: LATCbits.LATC4 = !f_state;
  2570  01A4  0020               	movlb	0	; select bank0
  2571  01A5  0849               	movf	setSwitch2State@f_state,w
  2572  01A6  044A               	iorwf	setSwitch2State@f_state+1,w
  2573  01A7  1D03               	btfss	3,2
  2574  01A8  29AC               	goto	u770
  2575  01A9  0022               	movlb	2	; select bank2
  2576  01AA  160E               	bsf	14,4	;volatile
  2577  01AB  29AE               	goto	l1358
  2578  01AC                     u770:	
  2579  01AC  0022               	movlb	2	; select bank2
  2580  01AD  120E               	bcf	14,4	;volatile
  2581  01AE                     l1358:	
  2582                           
  2583                           ;switch2.c: 95: wait_ms(20);
  2584  01AE  3014               	movlw	20
  2585  01AF  0020               	movlb	0	; select bank0
  2586  01B0  00C4               	movwf	wait_ms@time
  2587  01B1  3000               	movlw	0
  2588  01B2  00C5               	movwf	wait_ms@time+1
  2589  01B3  2261               	fcall	_wait_ms
  2590                           
  2591                           ;switch2.c: 97: LATCbits.LATC0 = 0;
  2592  01B4  0022               	movlb	2	; select bank2
  2593  01B5  100E               	bcf	14,0	;volatile
  2594                           
  2595                           ;switch2.c: 98: LATCbits.LATC4 = 0;
  2596  01B6  120E               	bcf	14,4	;volatile
  2597                           
  2598                           ;switch2.c: 100: updateSwitch2State(switch2_state);
  2599  01B7  0020               	movlb	0	; select bank0
  2600  01B8  0841               	movf	_switch2_state+1,w
  2601  01B9  00C8               	movwf	updateSwitch2State@state+1
  2602  01BA  0840               	movf	_switch2_state,w
  2603  01BB  00C7               	movwf	updateSwitch2State@state
  2604  01BC  2305               	fcall	_updateSwitch2State
  2605                           
  2606                           ;switch2.c: 101: wait_ms(20);
  2607  01BD  3014               	movlw	20
  2608  01BE  0020               	movlb	0	; select bank0
  2609  01BF  00C4               	movwf	wait_ms@time
  2610  01C0  3000               	movlw	0
  2611  01C1  00C5               	movwf	wait_ms@time+1
  2612  01C2  2261               	fcall	_wait_ms
  2613  01C3  0008               	return
  2614  01C4                     __end_of_setSwitch2State:	
  2615                           
  2616                           	psect	text5
  2617  0305                     __ptext5:	
  2618 ;; *************** function _updateSwitch2State *****************
  2619 ;; Defined at:
  2620 ;;		line 65 in file "state_manager.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  state           2    3[BANK0 ] int 
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;		None
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      void 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMMON   BANK0   BANK1
  2634 ;;      Params:         0       2       0
  2635 ;;      Locals:         0       0       0
  2636 ;;      Temps:          0       0       0
  2637 ;;      Totals:         0       2       0
  2638 ;;Total ram usage:        2 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    4
  2641 ;; This function calls:
  2642 ;;		_saveState
  2643 ;; This function is called by:
  2644 ;;		_setSwitch2State
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           
  2649                           ;psect for function _updateSwitch2State
  2650  0305                     _updateSwitch2State:	
  2651                           
  2652                           ;state_manager.c: 66: if (state != 1) {state = 0;}
  2653                           
  2654                           ;incstack = 0
  2655                           ; Regs used in _updateSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2656  0305  0020               	movlb	0	; select bank0
  2657  0306  0347               	decf	updateSwitch2State@state,w
  2658  0307  0448               	iorwf	updateSwitch2State@state+1,w
  2659  0308  1903               	btfsc	3,2
  2660  0309  2B0C               	goto	l1306
  2661  030A  01C7               	clrf	updateSwitch2State@state
  2662  030B  01C8               	clrf	updateSwitch2State@state+1
  2663  030C                     l1306:	
  2664                           
  2665                           ;state_manager.c: 68: pedalState.switch2 = state;
  2666  030C  0848               	movf	updateSwitch2State@state+1,w
  2667  030D  00B9               	movwf	_pedalState+3
  2668  030E  0847               	movf	updateSwitch2State@state,w
  2669  030F  00B8               	movwf	_pedalState+2
  2670                           
  2671                           ;state_manager.c: 69: saveState();
  2672  0310  22F5               	fcall	_saveState
  2673  0311  0008               	return
  2674  0312                     __end_of_updateSwitch2State:	
  2675                           
  2676                           	psect	text6
  2677  032B                     __ptext6:	
  2678 ;; *************** function _getSwitch2State *****************
  2679 ;; Defined at:
  2680 ;;		line 49 in file "state_manager.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;		None
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;		None
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  2    1[BANK0 ] int 
  2687 ;; Registers used:
  2688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMMON   BANK0   BANK1
  2694 ;;      Params:         0       2       0
  2695 ;;      Locals:         0       0       0
  2696 ;;      Temps:          0       0       0
  2697 ;;      Totals:         0       2       0
  2698 ;;Total ram usage:        2 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    5
  2701 ;; This function calls:
  2702 ;;		_initStateManager
  2703 ;; This function is called by:
  2704 ;;		_initSwitch2
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           
  2709                           ;psect for function _getSwitch2State
  2710  032B                     _getSwitch2State:	
  2711                           
  2712                           ;state_manager.c: 50: if (!isInitialized) {
  2713                           
  2714                           ;incstack = 0
  2715                           ; Regs used in _getSwitch2State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2716  032B  0020               	movlb	0	; select bank0
  2717  032C  0824               	movf	_isInitialized,w
  2718  032D  0425               	iorwf	_isInitialized+1,w
  2719  032E  1D03               	btfss	3,2
  2720  032F  2B31               	goto	l1320
  2721                           
  2722                           ;state_manager.c: 51: initStateManager();
  2723  0330  2371               	fcall	_initStateManager
  2724  0331                     l1320:	
  2725                           
  2726                           ;state_manager.c: 52: }
  2727                           ;state_manager.c: 53: return pedalState.switch2;
  2728  0331  0020               	movlb	0	; select bank0
  2729  0332  0839               	movf	_pedalState+3,w
  2730  0333  00C6               	movwf	?_getSwitch2State+1
  2731  0334  0838               	movf	_pedalState+2,w
  2732  0335  00C5               	movwf	?_getSwitch2State
  2733  0336  0008               	return
  2734  0337                     __end_of_getSwitch2State:	
  2735                           
  2736                           	psect	text7
  2737  0371                     __ptext7:	
  2738 ;; *************** function _initStateManager *****************
  2739 ;; Defined at:
  2740 ;;		line 18 in file "state_manager.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;		None
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;		None
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMMON   BANK0   BANK1
  2754 ;;      Params:         0       0       0
  2755 ;;      Locals:         0       0       0
  2756 ;;      Temps:          0       0       0
  2757 ;;      Totals:         0       0       0
  2758 ;;Total ram usage:        0 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    4
  2761 ;; This function calls:
  2762 ;;		_getCurrentState
  2763 ;; This function is called by:
  2764 ;;		_getSwitch2State
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           
  2769                           ;psect for function _initStateManager
  2770  0371                     _initStateManager:	
  2771                           
  2772                           ;state_manager.c: 19: isInitialized = 0;
  2773                           
  2774                           ;incstack = 0
  2775                           ; Regs used in _initStateManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2776  0371  0020               	movlb	0	; select bank0
  2777  0372  01A4               	clrf	_isInitialized
  2778  0373  01A5               	clrf	_isInitialized+1
  2779                           
  2780                           ;state_manager.c: 20: getCurrentState();
  2781  0374  2289               	fcall	_getCurrentState
  2782  0375  0008               	return
  2783  0376                     __end_of_initStateManager:	
  2784                           
  2785                           	psect	text8
  2786  0337                     __ptext8:	
  2787 ;; *************** function _initSwitch1 *****************
  2788 ;; Defined at:
  2789 ;;		line 24 in file "switch1.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;		None
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  initState       2    7[BANK0 ] int 
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  1    wreg      void 
  2796 ;; Registers used:
  2797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMMON   BANK0   BANK1
  2803 ;;      Params:         0       0       0
  2804 ;;      Locals:         0       2       0
  2805 ;;      Temps:          0       0       0
  2806 ;;      Totals:         0       2       0
  2807 ;;Total ram usage:        2 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    6
  2810 ;; This function calls:
  2811 ;;		_getSwitch1State
  2812 ;;		_setSwitch1State
  2813 ;; This function is called by:
  2814 ;;		_main
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           
  2819                           ;psect for function _initSwitch1
  2820  0337                     _initSwitch1:	
  2821                           
  2822                           ;switch1.c: 25: int initState = getSwitch1State();
  2823                           
  2824                           ;incstack = 0
  2825                           ; Regs used in _initSwitch1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2826  0337  235E               	fcall	_getSwitch1State
  2827  0338  0020               	movlb	0	; select bank0
  2828  0339  0846               	movf	?_getSwitch1State+1,w
  2829  033A  00CC               	movwf	initSwitch1@initState+1
  2830  033B  0845               	movf	?_getSwitch1State,w
  2831  033C  00CB               	movwf	initSwitch1@initState
  2832                           
  2833                           ;switch1.c: 26: setSwitch1State(initState);
  2834  033D  084C               	movf	initSwitch1@initState+1,w
  2835  033E  00CA               	movwf	setSwitch1State@f_state+1
  2836  033F  084B               	movf	initSwitch1@initState,w
  2837  0340  00C9               	movwf	setSwitch1State@f_state
  2838  0341  21C4               	fcall	_setSwitch1State
  2839  0342  0008               	return
  2840  0343                     __end_of_initSwitch1:	
  2841                           
  2842                           	psect	text9
  2843  01C4                     __ptext9:	
  2844 ;; *************** function _setSwitch1State *****************
  2845 ;; Defined at:
  2846 ;;		line 81 in file "switch1.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  f_state         2    5[BANK0 ] int 
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;		None
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMMON   BANK0   BANK1
  2860 ;;      Params:         0       2       0
  2861 ;;      Locals:         0       0       0
  2862 ;;      Temps:          0       0       0
  2863 ;;      Totals:         0       2       0
  2864 ;;Total ram usage:        2 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    5
  2867 ;; This function calls:
  2868 ;;		_updateSwitch1State
  2869 ;;		_wait_ms
  2870 ;; This function is called by:
  2871 ;;		_initSwitch1
  2872 ;;		_updateSwitch1
  2873 ;;		_updateSwitch2
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           
  2878                           ;psect for function _setSwitch1State
  2879  01C4                     _setSwitch1State:	
  2880                           
  2881                           ;switch1.c: 82: if (switch1_state == f_state) {return;}
  2882                           
  2883                           ;incstack = 0
  2884                           ; Regs used in _setSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2885  01C4  0020               	movlb	0	; select bank0
  2886  01C5  084A               	movf	setSwitch1State@f_state+1,w
  2887  01C6  063D               	xorwf	_switch1_state+1,w
  2888  01C7  1D03               	skipz
  2889  01C8  29CB               	goto	u735
  2890  01C9  0849               	movf	setSwitch1State@f_state,w
  2891  01CA  063C               	xorwf	_switch1_state,w
  2892  01CB                     u735:	
  2893  01CB  1903               	btfsc	3,2
  2894  01CC  0008               	return
  2895                           
  2896                           ;switch1.c: 83: switch1_state = f_state;
  2897  01CD  084A               	movf	setSwitch1State@f_state+1,w
  2898  01CE  00BD               	movwf	_switch1_state+1
  2899  01CF  0849               	movf	setSwitch1State@f_state,w
  2900  01D0  00BC               	movwf	_switch1_state
  2901                           
  2902                           ;switch1.c: 84: LATAbits.LATA2 = f_state;
  2903  01D1  0C49               	rrf	setSwitch1State@f_state,w
  2904  01D2  0022               	movlb	2	; select bank2
  2905  01D3  1C03               	skipc
  2906  01D4  110C               	bcf	12,2	;volatile
  2907  01D5  1803               	skipnc
  2908  01D6  150C               	bsf	12,2	;volatile
  2909                           
  2910                           ;switch1.c: 85: LATCbits.LATC2 = f_state;
  2911  01D7  0020               	movlb	0	; select bank0
  2912  01D8  0C49               	rrf	setSwitch1State@f_state,w
  2913  01D9  0022               	movlb	2	; select bank2
  2914  01DA  1C03               	skipc
  2915  01DB  110E               	bcf	14,2	;volatile
  2916  01DC  1803               	skipnc
  2917  01DD  150E               	bsf	14,2	;volatile
  2918                           
  2919                           ;switch1.c: 86: LATCbits.LATC1 = !f_state;
  2920  01DE  0020               	movlb	0	; select bank0
  2921  01DF  0849               	movf	setSwitch1State@f_state,w
  2922  01E0  044A               	iorwf	setSwitch1State@f_state+1,w
  2923  01E1  1D03               	btfss	3,2
  2924  01E2  29E6               	goto	u740
  2925  01E3  0022               	movlb	2	; select bank2
  2926  01E4  148E               	bsf	14,1	;volatile
  2927  01E5  29E8               	goto	l1336
  2928  01E6                     u740:	
  2929  01E6  0022               	movlb	2	; select bank2
  2930  01E7  108E               	bcf	14,1	;volatile
  2931  01E8                     l1336:	
  2932                           
  2933                           ;switch1.c: 88: wait_ms(20);
  2934  01E8  3014               	movlw	20
  2935  01E9  0020               	movlb	0	; select bank0
  2936  01EA  00C4               	movwf	wait_ms@time
  2937  01EB  3000               	movlw	0
  2938  01EC  00C5               	movwf	wait_ms@time+1
  2939  01ED  2261               	fcall	_wait_ms
  2940                           
  2941                           ;switch1.c: 90: LATCbits.LATC2 = 0;
  2942  01EE  0022               	movlb	2	; select bank2
  2943  01EF  110E               	bcf	14,2	;volatile
  2944                           
  2945                           ;switch1.c: 91: LATCbits.LATC1 = 0;
  2946  01F0  108E               	bcf	14,1	;volatile
  2947                           
  2948                           ;switch1.c: 93: updateSwitch1State(switch1_state);
  2949  01F1  0020               	movlb	0	; select bank0
  2950  01F2  083D               	movf	_switch1_state+1,w
  2951  01F3  00C8               	movwf	updateSwitch1State@state+1
  2952  01F4  083C               	movf	_switch1_state,w
  2953  01F5  00C7               	movwf	updateSwitch1State@state
  2954  01F6  2312               	fcall	_updateSwitch1State
  2955                           
  2956                           ;switch1.c: 94: wait_ms(20);
  2957  01F7  3014               	movlw	20
  2958  01F8  0020               	movlb	0	; select bank0
  2959  01F9  00C4               	movwf	wait_ms@time
  2960  01FA  3000               	movlw	0
  2961  01FB  00C5               	movwf	wait_ms@time+1
  2962  01FC  2261               	fcall	_wait_ms
  2963  01FD  0008               	return
  2964  01FE                     __end_of_setSwitch1State:	
  2965                           
  2966                           	psect	text10
  2967  0261                     __ptext10:	
  2968 ;; *************** function _wait_ms *****************
  2969 ;; Defined at:
  2970 ;;		line 23 in file "system.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  time            2    0[BANK0 ] unsigned int 
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;		None
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		wreg, status,2, status,0, pclath, cstack
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMMON   BANK0   BANK1
  2984 ;;      Params:         0       2       0
  2985 ;;      Locals:         0       0       0
  2986 ;;      Temps:          0       0       0
  2987 ;;      Totals:         0       2       0
  2988 ;;Total ram usage:        2 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    2
  2991 ;; This function calls:
  2992 ;;		___lmul
  2993 ;; This function is called by:
  2994 ;;		_setSwitch1State
  2995 ;;		_setSwitch2State
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           
  3000                           ;psect for function _wait_ms
  3001  0261                     _wait_ms:	
  3002                           
  3003                           ;system.c: 25: static long timel = 0;
  3004                           ;system.c: 26: timel = time * 1000l;
  3005                           
  3006                           ;incstack = 0
  3007                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  3008  0261  0020               	movlb	0	; select bank0
  3009  0262  0844               	movf	wait_ms@time,w
  3010  0263  00F1               	movwf	___lmul@multiplier
  3011  0264  0845               	movf	wait_ms@time+1,w
  3012  0265  00F2               	movwf	___lmul@multiplier+1
  3013  0266  01F3               	clrf	___lmul@multiplier+2
  3014  0267  01F4               	clrf	___lmul@multiplier+3
  3015  0268  3000               	movlw	0
  3016  0269  00F8               	movwf	___lmul@multiplicand+3
  3017  026A  3000               	movlw	0
  3018  026B  00F7               	movwf	___lmul@multiplicand+2
  3019  026C  3003               	movlw	3
  3020  026D  00F6               	movwf	___lmul@multiplicand+1
  3021  026E  30E8               	movlw	232
  3022  026F  00F5               	movwf	___lmul@multiplicand
  3023  0270  2232               	fcall	___lmul
  3024  0271  0874               	movf	?___lmul+3,w
  3025  0272  0020               	movlb	0	; select bank0
  3026  0273  00A3               	movwf	wait_ms@timel+3
  3027  0274  0873               	movf	?___lmul+2,w
  3028  0275  00A2               	movwf	wait_ms@timel+2
  3029  0276  0872               	movf	?___lmul+1,w
  3030  0277  00A1               	movwf	wait_ms@timel+1
  3031  0278  0871               	movf	?___lmul,w
  3032  0279  00A0               	movwf	wait_ms@timel
  3033  027A                     l71:	
  3034                           ;system.c: 27: for( ; timel; timel--);
  3035                           
  3036  027A  0823               	movf	wait_ms@timel+3,w
  3037  027B  0422               	iorwf	wait_ms@timel+2,w
  3038  027C  0421               	iorwf	wait_ms@timel+1,w
  3039  027D  0420               	iorwf	wait_ms@timel,w
  3040  027E  1903               	btfsc	3,2
  3041  027F  0008               	return
  3042  0280  30FF               	movlw	255
  3043  0281  07A0               	addwf	wait_ms@timel,f
  3044  0282  30FF               	movlw	255
  3045  0283  3DA1               	addwfc	wait_ms@timel+1,f
  3046  0284  30FF               	movlw	255
  3047  0285  3DA2               	addwfc	wait_ms@timel+2,f
  3048  0286  30FF               	movlw	255
  3049  0287  3DA3               	addwfc	wait_ms@timel+3,f
  3050  0288  2A7A               	goto	l71
  3051  0289                     __end_of_wait_ms:	
  3052                           
  3053                           	psect	text11
  3054  0232                     __ptext11:	
  3055 ;; *************** function ___lmul *****************
  3056 ;; Defined at:
  3057 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  multiplier      4    1[COMMON] unsigned long 
  3060 ;;  multiplicand    4    5[COMMON] unsigned long 
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;  product         4    9[COMMON] unsigned long 
  3063 ;; Return value:  Size  Location     Type
  3064 ;;                  4    1[COMMON] unsigned long 
  3065 ;; Registers used:
  3066 ;;		wreg, status,2, status,0
  3067 ;; Tracked objects:
  3068 ;;		On entry : 0/0
  3069 ;;		On exit  : 0/0
  3070 ;;		Unchanged: 0/0
  3071 ;; Data sizes:     COMMON   BANK0   BANK1
  3072 ;;      Params:         8       0       0
  3073 ;;      Locals:         4       0       0
  3074 ;;      Temps:          0       0       0
  3075 ;;      Totals:        12       0       0
  3076 ;;Total ram usage:       12 bytes
  3077 ;; Hardware stack levels used:    1
  3078 ;; Hardware stack levels required when called:    1
  3079 ;; This function calls:
  3080 ;;		Nothing
  3081 ;; This function is called by:
  3082 ;;		_wait_ms
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           
  3087                           ;psect for function ___lmul
  3088  0232                     ___lmul:	
  3089                           
  3090                           ;incstack = 0
  3091                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3092  0232  3000               	movlw	0
  3093  0233  00FC               	movwf	___lmul@product+3
  3094  0234  3000               	movlw	0
  3095  0235  00FB               	movwf	___lmul@product+2
  3096  0236  3000               	movlw	0
  3097  0237  00FA               	movwf	___lmul@product+1
  3098  0238  3000               	movlw	0
  3099  0239  00F9               	movwf	___lmul@product
  3100  023A                     l1274:	
  3101  023A  1C71               	btfss	___lmul@multiplier,0
  3102  023B  2A44               	goto	l1278
  3103  023C  0875               	movf	___lmul@multiplicand,w
  3104  023D  07F9               	addwf	___lmul@product,f
  3105  023E  0876               	movf	___lmul@multiplicand+1,w
  3106  023F  3DFA               	addwfc	___lmul@product+1,f
  3107  0240  0877               	movf	___lmul@multiplicand+2,w
  3108  0241  3DFB               	addwfc	___lmul@product+2,f
  3109  0242  0878               	movf	___lmul@multiplicand+3,w
  3110  0243  3DFC               	addwfc	___lmul@product+3,f
  3111  0244                     l1278:	
  3112  0244  3001               	movlw	1
  3113  0245                     u665:	
  3114  0245  35F5               	lslf	___lmul@multiplicand,f
  3115  0246  0DF6               	rlf	___lmul@multiplicand+1,f
  3116  0247  0DF7               	rlf	___lmul@multiplicand+2,f
  3117  0248  0DF8               	rlf	___lmul@multiplicand+3,f
  3118  0249  0B89               	decfsz	9,f
  3119  024A  2A45               	goto	u665
  3120  024B  3001               	movlw	1
  3121  024C                     u675:	
  3122  024C  36F4               	lsrf	___lmul@multiplier+3,f
  3123  024D  0CF3               	rrf	___lmul@multiplier+2,f
  3124  024E  0CF2               	rrf	___lmul@multiplier+1,f
  3125  024F  0CF1               	rrf	___lmul@multiplier,f
  3126  0250  0B89               	decfsz	9,f
  3127  0251  2A4C               	goto	u675
  3128  0252  0874               	movf	___lmul@multiplier+3,w
  3129  0253  0473               	iorwf	___lmul@multiplier+2,w
  3130  0254  0472               	iorwf	___lmul@multiplier+1,w
  3131  0255  0471               	iorwf	___lmul@multiplier,w
  3132  0256  1D03               	skipz
  3133  0257  2A3A               	goto	l1274
  3134  0258  087C               	movf	___lmul@product+3,w
  3135  0259  00F4               	movwf	?___lmul+3
  3136  025A  087B               	movf	___lmul@product+2,w
  3137  025B  00F3               	movwf	?___lmul+2
  3138  025C  087A               	movf	___lmul@product+1,w
  3139  025D  00F2               	movwf	?___lmul+1
  3140  025E  0879               	movf	___lmul@product,w
  3141  025F  00F1               	movwf	?___lmul
  3142  0260  0008               	return
  3143  0261                     __end_of___lmul:	
  3144                           
  3145                           	psect	text12
  3146  0312                     __ptext12:	
  3147 ;; *************** function _updateSwitch1State *****************
  3148 ;; Defined at:
  3149 ;;		line 57 in file "state_manager.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;  state           2    3[BANK0 ] int 
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;		None
  3154 ;; Return value:  Size  Location     Type
  3155 ;;                  1    wreg      void 
  3156 ;; Registers used:
  3157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMMON   BANK0   BANK1
  3163 ;;      Params:         0       2       0
  3164 ;;      Locals:         0       0       0
  3165 ;;      Temps:          0       0       0
  3166 ;;      Totals:         0       2       0
  3167 ;;Total ram usage:        2 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    4
  3170 ;; This function calls:
  3171 ;;		_saveState
  3172 ;; This function is called by:
  3173 ;;		_setSwitch1State
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           
  3178                           ;psect for function _updateSwitch1State
  3179  0312                     _updateSwitch1State:	
  3180                           
  3181                           ;state_manager.c: 58: if (state != 1) {state = 0;}
  3182                           
  3183                           ;incstack = 0
  3184                           ; Regs used in _updateSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3185  0312  0020               	movlb	0	; select bank0
  3186  0313  0347               	decf	updateSwitch1State@state,w
  3187  0314  0448               	iorwf	updateSwitch1State@state+1,w
  3188  0315  1903               	btfsc	3,2
  3189  0316  2B19               	goto	l1298
  3190  0317  01C7               	clrf	updateSwitch1State@state
  3191  0318  01C8               	clrf	updateSwitch1State@state+1
  3192  0319                     l1298:	
  3193                           
  3194                           ;state_manager.c: 60: pedalState.switch1 = state;
  3195  0319  0848               	movf	updateSwitch1State@state+1,w
  3196  031A  00B7               	movwf	_pedalState+1
  3197  031B  0847               	movf	updateSwitch1State@state,w
  3198  031C  00B6               	movwf	_pedalState
  3199                           
  3200                           ;state_manager.c: 61: saveState();
  3201  031D  22F5               	fcall	_saveState
  3202  031E  0008               	return
  3203  031F                     __end_of_updateSwitch1State:	
  3204                           
  3205                           	psect	text13
  3206  02F5                     __ptext13:	
  3207 ;; *************** function _saveState *****************
  3208 ;; Defined at:
  3209 ;;		line 72 in file "state_manager.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  r               1   12[COMMON] unsigned char 
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      void 
  3216 ;; Registers used:
  3217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMMON   BANK0   BANK1
  3223 ;;      Params:         0       0       0
  3224 ;;      Locals:         1       0       0
  3225 ;;      Temps:          0       3       0
  3226 ;;      Totals:         1       3       0
  3227 ;;Total ram usage:        4 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    3
  3230 ;; This function calls:
  3231 ;;		_HEF_ByteArrayWrite
  3232 ;; This function is called by:
  3233 ;;		_updateSwitch1State
  3234 ;;		_updateSwitch2State
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           
  3239                           ;psect for function _saveState
  3240  02F5                     _saveState:	
  3241                           
  3242                           ;state_manager.c: 73: uint8_t r;
  3243                           ;state_manager.c: 74: r = HEF_ByteArrayWrite(1, (void *) &pedalState, sizeof (pedalState
      +                          ));
  3244                           
  3245                           ;incstack = 0
  3246                           ; Regs used in _saveState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3247  02F5  3036               	movlw	(low (_pedalState| 0))& (0+255)
  3248  02F6  0020               	movlb	0	; select bank0
  3249  02F7  00C4               	movwf	??_saveState
  3250  02F8  0844               	movf	??_saveState,w
  3251  02F9  00F4               	movwf	HEF_ByteArrayWrite@byteArray
  3252  02FA  3004               	movlw	4
  3253  02FB  00C5               	movwf	??_saveState+1
  3254  02FC  0845               	movf	??_saveState+1,w
  3255  02FD  00F5               	movwf	HEF_ByteArrayWrite@count
  3256  02FE  3001               	movlw	1
  3257  02FF  2137               	fcall	_HEF_ByteArrayWrite
  3258  0300  0020               	movlb	0	; select bank0
  3259  0301  00C6               	movwf	??_saveState+2
  3260  0302  0846               	movf	??_saveState+2,w
  3261  0303  00FC               	movwf	saveState@r
  3262  0304  0008               	return
  3263  0305                     __end_of_saveState:	
  3264                           
  3265                           	psect	text14
  3266  0137                     __ptext14:	
  3267 ;; *************** function _HEF_ByteArrayWrite *****************
  3268 ;; Defined at:
  3269 ;;		line 12 in file "HEF.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  block           1    wreg     unsigned char 
  3272 ;;  byteArray       1    4[COMMON] PTR unsigned char 
  3273 ;;		 -> pedalState(4), 
  3274 ;;  count           1    5[COMMON] unsigned char 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  block           1    9[COMMON] unsigned char 
  3277 ;;  blockAddr       2   10[COMMON] unsigned int 
  3278 ;;  GIEBitValue     1    8[COMMON] unsigned char 
  3279 ;;  i               1    0        unsigned char 
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  1    wreg      char 
  3282 ;; Registers used:
  3283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMMON   BANK0   BANK1
  3289 ;;      Params:         2       0       0
  3290 ;;      Locals:         4       0       0
  3291 ;;      Temps:          2       0       0
  3292 ;;      Totals:         8       0       0
  3293 ;;Total ram usage:        8 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    2
  3296 ;; This function calls:
  3297 ;;		_FLASH_EraseBlock
  3298 ;; This function is called by:
  3299 ;;		_saveState
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           
  3304                           ;psect for function _HEF_ByteArrayWrite
  3305  0137                     _HEF_ByteArrayWrite:	
  3306                           
  3307                           ;incstack = 0
  3308                           ; Regs used in _HEF_ByteArrayWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3309                           ;HEF_ByteArrayWrite@block stored from wreg
  3310  0137  00F9               	movwf	HEF_ByteArrayWrite@block
  3311                           
  3312                           ;HEF.c: 13: uint16_t blockAddr;
  3313                           ;HEF.c: 14: uint8_t GIEBitValue = INTCONbits.GIE;
  3314  0138  3000               	movlw	0
  3315  0139  1B8B               	btfsc	11,7	;volatile
  3316  013A  3001               	movlw	1
  3317  013B  00F8               	movwf	HEF_ByteArrayWrite@GIEBitValue
  3318                           
  3319                           ;HEF.c: 15: uint8_t i;
  3320                           ;HEF.c: 17: if ( ( block >= 128 / 32) || ( count > 32))
  3321  013C  3004               	movlw	4
  3322  013D  0279               	subwf	HEF_ByteArrayWrite@block,w
  3323  013E  1803               	skipnc
  3324  013F  2944               	goto	l1184
  3325  0140  3021               	movlw	33
  3326  0141  0275               	subwf	HEF_ByteArrayWrite@count,w
  3327  0142  1C03               	skipc
  3328  0143  2946               	goto	l1188
  3329  0144                     l1184:	
  3330                           
  3331                           ;HEF.c: 18: return -1;
  3332  0144  30FF               	movlw	255
  3333  0145  0008               	return
  3334  0146                     l1188:	
  3335                           
  3336                           ;HEF.c: 20: blockAddr = 16384 - 128 + block * 32;
  3337  0146  0879               	movf	HEF_ByteArrayWrite@block,w
  3338  0147  00F6               	movwf	??_HEF_ByteArrayWrite
  3339  0148  01F7               	clrf	??_HEF_ByteArrayWrite+1
  3340  0149  3005               	movlw	5
  3341  014A                     u555:	
  3342  014A  35F6               	lslf	??_HEF_ByteArrayWrite,f
  3343  014B  0DF7               	rlf	??_HEF_ByteArrayWrite+1,f
  3344  014C  0B89               	decfsz	9,f
  3345  014D  294A               	goto	u555
  3346  014E  0876               	movf	??_HEF_ByteArrayWrite,w
  3347  014F  3E80               	addlw	128
  3348  0150  00FA               	movwf	HEF_ByteArrayWrite@blockAddr
  3349  0151  303F               	movlw	63
  3350  0152  3D77               	addwfc	??_HEF_ByteArrayWrite+1,w
  3351  0153  00FB               	movwf	HEF_ByteArrayWrite@blockAddr+1
  3352                           
  3353                           ;HEF.c: 21: INTCONbits.GIE = 0;
  3354  0154  138B               	bcf	11,7	;volatile
  3355                           
  3356                           ;HEF.c: 23: FLASH_EraseBlock( blockAddr);
  3357  0155  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3358  0156  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  3359  0157  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3360  0158  00F1               	movwf	FLASH_EraseBlock@startAddr
  3361  0159  22AB               	fcall	_FLASH_EraseBlock
  3362                           
  3363                           ;HEF.c: 26: PMCON1bits.CFGS = 0;
  3364  015A  0023               	movlb	3	; select bank3
  3365  015B  1315               	bcf	21,6	;volatile
  3366                           
  3367                           ;HEF.c: 27: PMCON1bits.WREN = 1;
  3368  015C  1515               	bsf	21,2	;volatile
  3369                           
  3370                           ;HEF.c: 28: PMCON1bits.LWLO = 1;
  3371  015D  1695               	bsf	21,5	;volatile
  3372  015E                     l1222:	
  3373                           ;HEF.c: 30: while ( count > 0) {
  3374                           
  3375  015E  0875               	movf	HEF_ByteArrayWrite@count,w
  3376  015F  1903               	btfsc	3,2
  3377  0160  2981               	goto	l141
  3378                           
  3379                           ;HEF.c: 31: PMADR = blockAddr++;
  3380  0161  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3381  0162  0023               	movlb	3	; select bank3
  3382  0163  0092               	movwf	18	;volatile
  3383  0164  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3384  0165  0091               	movwf	17	;volatile
  3385  0166  3001               	movlw	1
  3386  0167  07FA               	addwf	HEF_ByteArrayWrite@blockAddr,f
  3387  0168  3000               	movlw	0
  3388  0169  3DFB               	addwfc	HEF_ByteArrayWrite@blockAddr+1,f
  3389                           
  3390                           ;HEF.c: 33: PMDATL = *byteArray++;
  3391  016A  0874               	movf	HEF_ByteArrayWrite@byteArray,w
  3392  016B  0086               	movwf	6
  3393  016C  0187               	clrf	7
  3394  016D  0801               	movf	1,w
  3395  016E  0093               	movwf	19	;volatile
  3396  016F  3001               	movlw	1
  3397  0170  00F6               	movwf	??_HEF_ByteArrayWrite
  3398  0171  0876               	movf	??_HEF_ByteArrayWrite,w
  3399  0172  07F4               	addwf	HEF_ByteArrayWrite@byteArray,f
  3400                           
  3401                           ;HEF.c: 34: PMDATH = 0;
  3402  0173  0194               	clrf	20	;volatile
  3403                           
  3404                           ;HEF.c: 35: if ( count == 1) {
  3405  0174  0375               	decf	HEF_ByteArrayWrite@count,w
  3406  0175  1903               	btfsc	3,2
  3407                           
  3408                           ;HEF.c: 36: PMCON1bits.LWLO = 0;
  3409  0176  1295               	bcf	21,5	;volatile
  3410                           
  3411                           ;HEF.c: 37: }
  3412                           ;HEF.c: 39: PMCON2 = 0x55;
  3413  0177  3055               	movlw	85
  3414  0178  0096               	movwf	22	;volsfr
  3415                           
  3416                           ;HEF.c: 40: PMCON2 = 0xAA;
  3417  0179  30AA               	movlw	170
  3418  017A  0096               	movwf	22	;volsfr
  3419                           
  3420                           ;HEF.c: 41: PMCON1bits.WR = 1;
  3421  017B  1495               	bsf	21,1	;volatile
  3422                           
  3423                           ;HEF.c: 42: __nop();
  3424  017C  0000               	nop
  3425                           
  3426                           ;HEF.c: 43: __nop();
  3427  017D  0000               	nop
  3428                           
  3429                           ;HEF.c: 44: count--;
  3430  017E  3001               	movlw	1
  3431  017F  02F5               	subwf	HEF_ByteArrayWrite@count,f
  3432  0180  295E               	goto	l1222
  3433  0181                     l141:	
  3434                           
  3435                           ;HEF.c: 45: }
  3436                           ;HEF.c: 47: PMCON1bits.WREN = 0;
  3437  0181  0023               	movlb	3	; select bank3
  3438  0182  1115               	bcf	21,2	;volatile
  3439                           
  3440                           ;HEF.c: 48: INTCONbits.GIE = GIEBitValue;
  3441  0183  0C78               	rrf	HEF_ByteArrayWrite@GIEBitValue,w
  3442  0184  1C03               	skipc
  3443  0185  138B               	bcf	11,7	;volatile
  3444  0186  1803               	skipnc
  3445  0187  178B               	bsf	11,7	;volatile
  3446                           
  3447                           ;HEF.c: 50: return 0;
  3448  0188  3000               	movlw	0
  3449  0189  0008               	return
  3450  018A                     __end_of_HEF_ByteArrayWrite:	
  3451                           
  3452                           	psect	text15
  3453  02AB                     __ptext15:	
  3454 ;; *************** function _FLASH_EraseBlock *****************
  3455 ;; Defined at:
  3456 ;;		line 141 in file "mcc_generated_files/memory.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  startAddr       2    1[COMMON] unsigned int 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      void 
  3463 ;; Registers used:
  3464 ;;		wreg, status,2, status,0
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMMON   BANK0   BANK1
  3470 ;;      Params:         2       0       0
  3471 ;;      Locals:         1       0       0
  3472 ;;      Temps:          0       0       0
  3473 ;;      Totals:         3       0       0
  3474 ;;Total ram usage:        3 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    1
  3477 ;; This function calls:
  3478 ;;		Nothing
  3479 ;; This function is called by:
  3480 ;;		_HEF_ByteArrayWrite
  3481 ;;		_FLASH_WriteBlock
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           
  3486                           ;psect for function _FLASH_EraseBlock
  3487  02AB                     _FLASH_EraseBlock:	
  3488                           
  3489                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
  3490                           
  3491                           ;incstack = 0
  3492                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  3493  02AB  3000               	movlw	0
  3494  02AC  1B8B               	btfsc	11,7	;volatile
  3495  02AD  3001               	movlw	1
  3496  02AE  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  3497                           
  3498                           ;memory.c: 145: INTCONbits.GIE = 0;
  3499  02AF  138B               	bcf	11,7	;volatile
  3500                           
  3501                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
  3502  02B0  0871               	movf	FLASH_EraseBlock@startAddr,w
  3503  02B1  0023               	movlb	3	; select bank3
  3504  02B2  0091               	movwf	17	;volatile
  3505                           
  3506                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
  3507  02B3  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  3508  02B4  0092               	movwf	18	;volatile
  3509                           
  3510                           ;memory.c: 152: PMCON1bits.CFGS = 0;
  3511  02B5  1315               	bcf	21,6	;volatile
  3512                           
  3513                           ;memory.c: 153: PMCON1bits.FREE = 1;
  3514  02B6  1615               	bsf	21,4	;volatile
  3515                           
  3516                           ;memory.c: 154: PMCON1bits.WREN = 1;
  3517  02B7  1515               	bsf	21,2	;volatile
  3518                           
  3519                           ;memory.c: 157: PMCON2 = 0x55;
  3520  02B8  3055               	movlw	85
  3521  02B9  0096               	movwf	22	;volsfr
  3522                           
  3523                           ;memory.c: 158: PMCON2 = 0xAA;
  3524  02BA  30AA               	movlw	170
  3525  02BB  0096               	movwf	22	;volsfr
  3526                           
  3527                           ;memory.c: 159: PMCON1bits.WR = 1;
  3528  02BC  1495               	bsf	21,1	;volatile
  3529                           
  3530                           ;memory.c: 160: __nop();
  3531  02BD  0000               	nop
  3532                           
  3533                           ;memory.c: 161: __nop();
  3534  02BE  0000               	nop
  3535                           
  3536                           ;memory.c: 163: PMCON1bits.WREN = 0;
  3537  02BF  0023               	movlb	3	; select bank3
  3538  02C0  1115               	bcf	21,2	;volatile
  3539                           
  3540                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
  3541  02C1  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  3542  02C2  1C03               	skipc
  3543  02C3  138B               	bcf	11,7	;volatile
  3544  02C4  1803               	skipnc
  3545  02C5  178B               	bsf	11,7	;volatile
  3546  02C6  0008               	return
  3547  02C7                     __end_of_FLASH_EraseBlock:	
  3548                           
  3549                           	psect	text16
  3550  035E                     __ptext16:	
  3551 ;; *************** function _getSwitch1State *****************
  3552 ;; Defined at:
  3553 ;;		line 42 in file "state_manager.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;		None
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;		None
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  2    1[BANK0 ] int 
  3560 ;; Registers used:
  3561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMMON   BANK0   BANK1
  3567 ;;      Params:         0       2       0
  3568 ;;      Locals:         0       0       0
  3569 ;;      Temps:          0       0       0
  3570 ;;      Totals:         0       2       0
  3571 ;;Total ram usage:        2 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    4
  3574 ;; This function calls:
  3575 ;;		_getCurrentState
  3576 ;; This function is called by:
  3577 ;;		_initSwitch1
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           
  3582                           ;psect for function _getSwitch1State
  3583  035E                     _getSwitch1State:	
  3584                           
  3585                           ;state_manager.c: 43: getCurrentState();
  3586                           
  3587                           ;incstack = 0
  3588                           ; Regs used in _getSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3589  035E  2289               	fcall	_getCurrentState
  3590                           
  3591                           ;state_manager.c: 44: return pedalState.switch1;
  3592  035F  0020               	movlb	0	; select bank0
  3593  0360  0837               	movf	_pedalState+1,w
  3594  0361  00C6               	movwf	?_getSwitch1State+1
  3595  0362  0836               	movf	_pedalState,w
  3596  0363  00C5               	movwf	?_getSwitch1State
  3597  0364  0008               	return
  3598  0365                     __end_of_getSwitch1State:	
  3599                           
  3600                           	psect	text17
  3601  0289                     __ptext17:	
  3602 ;; *************** function _getCurrentState *****************
  3603 ;; Defined at:
  3604 ;;		line 23 in file "state_manager.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;		None
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  r               1    0[BANK0 ] unsigned char 
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  4  155[None  ] struct .
  3611 ;; Registers used:
  3612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMMON   BANK0   BANK1
  3618 ;;      Params:         0       0       0
  3619 ;;      Locals:         0       1       0
  3620 ;;      Temps:          2       0       0
  3621 ;;      Totals:         2       1       0
  3622 ;;Total ram usage:        3 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    3
  3625 ;; This function calls:
  3626 ;;		_HEF_ByteArrayRead
  3627 ;; This function is called by:
  3628 ;;		_initStateManager
  3629 ;;		_getSwitch1State
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           
  3634                           ;psect for function _getCurrentState
  3635  0289                     _getCurrentState:	
  3636                           
  3637                           ;state_manager.c: 24: if (!isInitialized) {
  3638                           
  3639                           ;incstack = 0
  3640                           ; Regs used in _getCurrentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3641  0289  0020               	movlb	0	; select bank0
  3642  028A  0824               	movf	_isInitialized,w
  3643  028B  0425               	iorwf	_isInitialized+1,w
  3644  028C  1D03               	btfss	3,2
  3645  028D  0008               	return
  3646                           
  3647                           ;state_manager.c: 25: uint8_t r;
  3648                           ;state_manager.c: 28: r = HEF_ByteArrayRead((void *) &pedalState, 1, sizeof (pedalState)
      +                          );
  3649  028E  01F4               	clrf	HEF_ByteArrayRead@block
  3650  028F  0AF4               	incf	HEF_ByteArrayRead@block,f
  3651  0290  3004               	movlw	4
  3652  0291  00FB               	movwf	??_getCurrentState
  3653  0292  087B               	movf	??_getCurrentState,w
  3654  0293  00F5               	movwf	HEF_ByteArrayRead@count
  3655  0294  3036               	movlw	(low (_pedalState| 0))& (0+255)
  3656  0295  21FE               	fcall	_HEF_ByteArrayRead
  3657  0296  00FC               	movwf	??_getCurrentState+1
  3658  0297  087C               	movf	??_getCurrentState+1,w
  3659  0298  0020               	movlb	0	; select bank0
  3660  0299  00C4               	movwf	getCurrentState@r
  3661                           
  3662                           ;state_manager.c: 30: if (pedalState.switch1 != 1) {
  3663  029A  0336               	decf	_pedalState,w
  3664  029B  0437               	iorwf	_pedalState+1,w
  3665  029C  1903               	btfsc	3,2
  3666  029D  2AA0               	goto	l1262
  3667                           
  3668                           ;state_manager.c: 31: pedalState.switch1 = 0;
  3669  029E  01B6               	clrf	_pedalState
  3670  029F  01B7               	clrf	_pedalState+1
  3671  02A0                     l1262:	
  3672                           
  3673                           ;state_manager.c: 32: }
  3674                           ;state_manager.c: 34: if (pedalState.switch2 != 1) {
  3675  02A0  0338               	decf	_pedalState+2,w
  3676  02A1  0439               	iorwf	_pedalState+3,w
  3677  02A2  1903               	btfsc	3,2
  3678  02A3  2AA6               	goto	l1266
  3679                           
  3680                           ;state_manager.c: 35: pedalState.switch2 = 0;
  3681  02A4  01B8               	clrf	_pedalState+2
  3682  02A5  01B9               	clrf	_pedalState+3
  3683  02A6                     l1266:	
  3684                           
  3685                           ;state_manager.c: 36: }
  3686                           ;state_manager.c: 37: isInitialized = 1;
  3687  02A6  3001               	movlw	1
  3688  02A7  00A4               	movwf	_isInitialized
  3689  02A8  3000               	movlw	0
  3690  02A9  00A5               	movwf	_isInitialized+1
  3691  02AA  0008               	return
  3692  02AB                     __end_of_getCurrentState:	
  3693                           ;state_manager.c: 38: }
  3694                           ;state_manager.c: 39: return pedalState;
  3695                           ;	Return value of _getCurrentState is never used
  3696                           
  3697                           
  3698                           	psect	text18
  3699  01FE                     __ptext18:	
  3700 ;; *************** function _HEF_ByteArrayRead *****************
  3701 ;; Defined at:
  3702 ;;		line 53 in file "HEF.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;  bArray          1    wreg     PTR unsigned char 
  3705 ;;		 -> pedalState(4), 
  3706 ;;  block           1    4[COMMON] unsigned char 
  3707 ;;  count           1    5[COMMON] unsigned char 
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  bArray          1   10[COMMON] PTR unsigned char 
  3710 ;;		 -> pedalState(4), 
  3711 ;;  wordAdd         2    8[COMMON] unsigned int 
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      char 
  3714 ;; Registers used:
  3715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1
  3721 ;;      Params:         2       0       0
  3722 ;;      Locals:         3       0       0
  3723 ;;      Temps:          2       0       0
  3724 ;;      Totals:         7       0       0
  3725 ;;Total ram usage:        7 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    2
  3728 ;; This function calls:
  3729 ;;		_FLASH_ReadWord
  3730 ;; This function is called by:
  3731 ;;		_getCurrentState
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           
  3736                           ;psect for function _HEF_ByteArrayRead
  3737  01FE                     _HEF_ByteArrayRead:	
  3738                           
  3739                           ;incstack = 0
  3740                           ; Regs used in _HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3741                           ;HEF_ByteArrayRead@bArray stored from wreg
  3742  01FE  00FA               	movwf	HEF_ByteArrayRead@bArray
  3743                           
  3744                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
  3745  01FF  0874               	movf	HEF_ByteArrayRead@block,w
  3746  0200  00F6               	movwf	??_HEF_ByteArrayRead
  3747  0201  01F7               	clrf	??_HEF_ByteArrayRead+1
  3748  0202  3005               	movlw	5
  3749  0203                     u585:	
  3750  0203  35F6               	lslf	??_HEF_ByteArrayRead,f
  3751  0204  0DF7               	rlf	??_HEF_ByteArrayRead+1,f
  3752  0205  0B89               	decfsz	9,f
  3753  0206  2A03               	goto	u585
  3754  0207  0876               	movf	??_HEF_ByteArrayRead,w
  3755  0208  3E80               	addlw	128
  3756  0209  00F8               	movwf	HEF_ByteArrayRead@wordAdd
  3757  020A  303F               	movlw	63
  3758  020B  3D77               	addwfc	??_HEF_ByteArrayRead+1,w
  3759  020C  00F9               	movwf	HEF_ByteArrayRead@wordAdd+1
  3760                           
  3761                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
  3762  020D  3021               	movlw	33
  3763  020E  0275               	subwf	HEF_ByteArrayRead@count,w
  3764  020F  1803               	skipnc
  3765  0210  2A15               	goto	l1236
  3766  0211  3004               	movlw	4
  3767  0212  0274               	subwf	HEF_ByteArrayRead@block,w
  3768  0213  1C03               	skipc
  3769  0214  2A2D               	goto	l1248
  3770  0215                     l1236:	
  3771                           
  3772                           ;HEF.c: 60: return -1;
  3773  0215  30FF               	movlw	255
  3774  0216  0008               	return
  3775  0217                     l1240:	
  3776                           ;HEF.c: 63: while ( count > 0)
  3777                           
  3778                           
  3779                           ;HEF.c: 64: {
  3780                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
  3781  0217  0879               	movf	HEF_ByteArrayRead@wordAdd+1,w
  3782  0218  00F2               	movwf	FLASH_ReadWord@flashAddr+1
  3783  0219  0878               	movf	HEF_ByteArrayRead@wordAdd,w
  3784  021A  00F1               	movwf	FLASH_ReadWord@flashAddr
  3785  021B  22C7               	fcall	_FLASH_ReadWord
  3786  021C  0871               	movf	?_FLASH_ReadWord,w
  3787  021D  00F6               	movwf	??_HEF_ByteArrayRead
  3788  021E  087A               	movf	HEF_ByteArrayRead@bArray,w
  3789  021F  0086               	movwf	6
  3790  0220  0187               	clrf	7
  3791  0221  0876               	movf	??_HEF_ByteArrayRead,w
  3792  0222  0081               	movwf	1
  3793  0223  3001               	movlw	1
  3794  0224  07F8               	addwf	HEF_ByteArrayRead@wordAdd,f
  3795  0225  3000               	movlw	0
  3796  0226  3DF9               	addwfc	HEF_ByteArrayRead@wordAdd+1,f
  3797  0227  3001               	movlw	1
  3798  0228  00F6               	movwf	??_HEF_ByteArrayRead
  3799  0229  0876               	movf	??_HEF_ByteArrayRead,w
  3800  022A  07FA               	addwf	HEF_ByteArrayRead@bArray,f
  3801                           
  3802                           ;HEF.c: 66: count--;
  3803  022B  3001               	movlw	1
  3804  022C  02F5               	subwf	HEF_ByteArrayRead@count,f
  3805  022D                     l1248:	
  3806  022D  0875               	movf	HEF_ByteArrayRead@count,w
  3807  022E  1D03               	btfss	3,2
  3808  022F  2A17               	goto	l1240
  3809                           
  3810                           ;HEF.c: 67: }
  3811                           ;HEF.c: 70: return 0;
  3812  0230  3000               	movlw	0
  3813  0231  0008               	return
  3814  0232                     __end_of_HEF_ByteArrayRead:	
  3815                           
  3816                           	psect	text19
  3817  02C7                     __ptext19:	
  3818 ;; *************** function _FLASH_ReadWord *****************
  3819 ;; Defined at:
  3820 ;;		line 58 in file "mcc_generated_files/memory.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  flashAddr       2    1[COMMON] unsigned int 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  2    1[COMMON] unsigned int 
  3827 ;; Registers used:
  3828 ;;		wreg, status,2, status,0
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMMON   BANK0   BANK1
  3834 ;;      Params:         2       0       0
  3835 ;;      Locals:         1       0       0
  3836 ;;      Temps:          0       0       0
  3837 ;;      Totals:         3       0       0
  3838 ;;Total ram usage:        3 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    1
  3841 ;; This function calls:
  3842 ;;		Nothing
  3843 ;; This function is called by:
  3844 ;;		_HEF_ByteArrayRead
  3845 ;;		_FLASH_WriteWord
  3846 ;;		_HEF_ByteRead
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           
  3851                           ;psect for function _FLASH_ReadWord
  3852  02C7                     _FLASH_ReadWord:	
  3853                           
  3854                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  3855                           
  3856                           ;incstack = 0
  3857                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3858  02C7  3000               	movlw	0
  3859  02C8  1B8B               	btfsc	11,7	;volatile
  3860  02C9  3001               	movlw	1
  3861  02CA  00F3               	movwf	FLASH_ReadWord@GIEBitValue
  3862                           
  3863                           ;memory.c: 61: INTCONbits.GIE = 0;
  3864  02CB  138B               	bcf	11,7	;volatile
  3865                           
  3866                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  3867  02CC  0871               	movf	FLASH_ReadWord@flashAddr,w
  3868  02CD  0023               	movlb	3	; select bank3
  3869  02CE  0091               	movwf	17	;volatile
  3870                           
  3871                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  3872  02CF  0872               	movf	FLASH_ReadWord@flashAddr+1,w
  3873  02D0  0092               	movwf	18	;volatile
  3874                           
  3875                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  3876  02D1  1315               	bcf	21,6	;volatile
  3877                           
  3878                           ;memory.c: 66: PMCON1bits.RD = 1;
  3879  02D2  1415               	bsf	21,0	;volatile
  3880                           
  3881                           ;memory.c: 67: __nop();
  3882  02D3  0000               	nop
  3883                           
  3884                           ;memory.c: 68: __nop();
  3885  02D4  0000               	nop
  3886                           
  3887                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  3888  02D5  0C73               	rrf	FLASH_ReadWord@GIEBitValue,w
  3889  02D6  1C03               	skipc
  3890  02D7  138B               	bcf	11,7	;volatile
  3891  02D8  1803               	skipnc
  3892  02D9  178B               	bsf	11,7	;volatile
  3893                           
  3894                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
  3895  02DA  0023               	movlb	3	; select bank3
  3896  02DB  0814               	movf	20,w	;volatile
  3897  02DC  00F2               	movwf	?_FLASH_ReadWord+1
  3898  02DD  0813               	movf	19,w	;volatile
  3899  02DE  00F1               	movwf	?_FLASH_ReadWord
  3900  02DF  0008               	return
  3901  02E0                     __end_of_FLASH_ReadWord:	
  3902                           
  3903                           	psect	text20
  3904  02E0                     __ptext20:	
  3905 ;; *************** function _InitApp *****************
  3906 ;; Defined at:
  3907 ;;		line 27 in file "user.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;		None
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;		None
  3912 ;; Return value:  Size  Location     Type
  3913 ;;                  1    wreg      void 
  3914 ;; Registers used:
  3915 ;;		wreg, status,2, status,0, pclath, cstack
  3916 ;; Tracked objects:
  3917 ;;		On entry : 0/0
  3918 ;;		On exit  : 0/0
  3919 ;;		Unchanged: 0/0
  3920 ;; Data sizes:     COMMON   BANK0   BANK1
  3921 ;;      Params:         0       0       0
  3922 ;;      Locals:         0       0       0
  3923 ;;      Temps:          0       0       0
  3924 ;;      Totals:         0       0       0
  3925 ;;Total ram usage:        0 bytes
  3926 ;; Hardware stack levels used:    1
  3927 ;; Hardware stack levels required when called:    2
  3928 ;; This function calls:
  3929 ;;		_init_adc
  3930 ;; This function is called by:
  3931 ;;		_main
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           
  3936                           ;psect for function _InitApp
  3937  02E0                     _InitApp:	
  3938                           
  3939                           ;user.c: 28: TRISAbits.TRISA0 = 0;
  3940                           
  3941                           ;incstack = 0
  3942                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  3943  02E0  0021               	movlb	1	; select bank1
  3944  02E1  100C               	bcf	12,0	;volatile
  3945                           
  3946                           ;user.c: 29: TRISAbits.TRISA1 = 0;
  3947  02E2  108C               	bcf	12,1	;volatile
  3948                           
  3949                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  3950  02E3  110C               	bcf	12,2	;volatile
  3951                           
  3952                           ;user.c: 32: TRISAbits.TRISA4 = 1;
  3953  02E4  160C               	bsf	12,4	;volatile
  3954                           
  3955                           ;user.c: 33: TRISAbits.TRISA5 = 1;
  3956  02E5  168C               	bsf	12,5	;volatile
  3957                           
  3958                           ;user.c: 34: ANSELAbits.ANSA4 = 0;
  3959  02E6  0023               	movlb	3	; select bank3
  3960  02E7  120C               	bcf	12,4	;volatile
  3961                           
  3962                           ;user.c: 36: TRISCbits.TRISC0 = 0;
  3963  02E8  0021               	movlb	1	; select bank1
  3964  02E9  100E               	bcf	14,0	;volatile
  3965                           
  3966                           ;user.c: 37: TRISCbits.TRISC1 = 0;
  3967  02EA  108E               	bcf	14,1	;volatile
  3968                           
  3969                           ;user.c: 38: TRISCbits.TRISC2 = 0;
  3970  02EB  110E               	bcf	14,2	;volatile
  3971                           
  3972                           ;user.c: 39: TRISCbits.TRISC3 = 0;
  3973  02EC  118E               	bcf	14,3	;volatile
  3974                           
  3975                           ;user.c: 40: TRISCbits.TRISC4 = 0;
  3976  02ED  120E               	bcf	14,4	;volatile
  3977                           
  3978                           ;user.c: 41: TRISCbits.TRISC5 = 0;
  3979  02EE  128E               	bcf	14,5	;volatile
  3980                           
  3981                           ;user.c: 43: LATCbits.LATC5 = 0;
  3982  02EF  0022               	movlb	2	; select bank2
  3983  02F0  128E               	bcf	14,5	;volatile
  3984                           
  3985                           ;user.c: 45: LATAbits.LATA2 = 0;
  3986  02F1  110C               	bcf	12,2	;volatile
  3987                           
  3988                           ;user.c: 46: LATCbits.LATC3 = 0;
  3989  02F2  118E               	bcf	14,3	;volatile
  3990                           
  3991                           ;user.c: 48: init_adc();
  3992  02F3  234D               	fcall	_init_adc
  3993  02F4  0008               	return
  3994  02F5                     __end_of_InitApp:	
  3995                           
  3996                           	psect	text21
  3997  034D                     __ptext21:	
  3998 ;; *************** function _init_adc *****************
  3999 ;; Defined at:
  4000 ;;		line 60 in file "user.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;		None
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      void 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1
  4014 ;;      Params:         0       0       0
  4015 ;;      Locals:         0       0       0
  4016 ;;      Temps:          0       0       0
  4017 ;;      Totals:         0       0       0
  4018 ;;Total ram usage:        0 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    1
  4021 ;; This function calls:
  4022 ;;		Nothing
  4023 ;; This function is called by:
  4024 ;;		_InitApp
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _init_adc
  4030  034D                     _init_adc:	
  4031                           
  4032                           ;user.c: 61: ADCON1bits.ADFM = 0b1;
  4033                           
  4034                           ;incstack = 0
  4035                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  4036  034D  0021               	movlb	1	; select bank1
  4037  034E  179E               	bsf	30,7	;volatile
  4038                           
  4039                           ;user.c: 62: ADCON1bits.ADCS = 0b110;
  4040  034F  081E               	movf	30,w	;volatile
  4041  0350  398F               	andlw	-113
  4042  0351  3860               	iorlw	96
  4043  0352  009E               	movwf	30	;volatile
  4044                           
  4045                           ;user.c: 63: ADCON1bits.ADPREF = 0b00;
  4046  0353  30FC               	movlw	-4
  4047  0354  059E               	andwf	30,f	;volatile
  4048                           
  4049                           ;user.c: 64: ADCON0bits.ADON = 0b1;
  4050  0355  141D               	bsf	29,0	;volatile
  4051  0356  0008               	return
  4052  0357                     __end_of_init_adc:	
  4053                           
  4054                           	psect	text22
  4055  0376                     __ptext22:	
  4056 ;; *************** function _ConfigureOscillator *****************
  4057 ;; Defined at:
  4058 ;;		line 17 in file "system.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;		None
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;		None
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  1    wreg      void 
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMMON   BANK0   BANK1
  4072 ;;      Params:         0       0       0
  4073 ;;      Locals:         0       0       0
  4074 ;;      Temps:          0       0       0
  4075 ;;      Totals:         0       0       0
  4076 ;;Total ram usage:        0 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    1
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_main
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           
  4087                           ;psect for function _ConfigureOscillator
  4088  0376                     _ConfigureOscillator:	
  4089                           
  4090                           ;system.c: 19: OSCCONbits.IRCF = 0b1111;
  4091                           
  4092                           ;incstack = 0
  4093                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  4094  0376  3078               	movlw	120
  4095  0377  0021               	movlb	1	; select bank1
  4096  0378  0499               	iorwf	25,f	;volatile
  4097                           
  4098                           ;system.c: 20: OSCSTAT = 0x00;
  4099  0379  019A               	clrf	26	;volatile
  4100  037A  0008               	return
  4101  037B                     __end_of_ConfigureOscillator:	
  4102                           
  4103                           	psect	intentry
  4104  0004                     __pintentry:	
  4105 ;; *************** function _isr *****************
  4106 ;; Defined at:
  4107 ;;		line 23 in file "interrupts.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;		None
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;		None
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  1    wreg      void 
  4114 ;; Registers used:
  4115 ;;		None
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMMON   BANK0   BANK1
  4121 ;;      Params:         0       0       0
  4122 ;;      Locals:         0       0       0
  4123 ;;      Temps:          1       0       0
  4124 ;;      Totals:         1       0       0
  4125 ;;Total ram usage:        1 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		Interrupt level 1
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134  0004                     _isr:	
  4135                           
  4136                           ;incstack = 0
  4137                           ; Regs used in _isr: []
  4138  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4139  0005  3180               	pagesel	$
  4140  0006  0020               	movlb	0	; select bank0
  4141  0007  087F               	movf	127,w
  4142  0008  00F0               	movwf	??_isr
  4143  0009  0870               	movf	??_isr,w
  4144  000A  00FF               	movwf	127
  4145  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4146  000C  0009               	retfie
  4147  000D                     __end_of_isr:	
  4148  007E                     btemp	set	126	;btemp
  4149  007E                     int$flags	set	126
  4150  007E                     wtemp	set	126
  4151  007E                     wtemp0	set	126
  4152  0080                     wtemp1	set	128
  4153  0082                     wtemp2	set	130
  4154  0084                     wtemp3	set	132
  4155  0086                     wtemp4	set	134
  4156  0088                     wtemp5	set	136
  4157  007F                     wtemp6	set	127
  4158  007E                     ttemp	set	126
  4159  007E                     ttemp0	set	126
  4160  0081                     ttemp1	set	129
  4161  0084                     ttemp2	set	132
  4162  0087                     ttemp3	set	135
  4163  007F                     ttemp4	set	127
  4164  007E                     ltemp	set	126
  4165  007E                     ltemp0	set	126
  4166  0082                     ltemp1	set	130
  4167  0086                     ltemp2	set	134
  4168  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      9      45
    BANK1            32      0       0

Pointer List with Targets:

    HEF_ByteArrayRead@bArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 

    HEF_ByteArrayWrite@byteArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 


Critical Paths under _main in COMMON

    _updateSwitch2State->_saveState
    _initStateManager->_getCurrentState
    _wait_ms->___lmul
    _updateSwitch1State->_saveState
    _saveState->_HEF_ByteArrayWrite
    _HEF_ByteArrayWrite->_FLASH_EraseBlock
    _getSwitch1State->_getCurrentState
    _getCurrentState->_HEF_ByteArrayRead
    _HEF_ByteArrayRead->_FLASH_ReadWord

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_initSwitch1
    _main->_initSwitch2
    _updateSwitch2->_setSwitch1State
    _updateSwitch2->_setSwitch2State
    _updateSwitch1->_setSwitch1State
    _updateSwitch1->_setSwitch2State
    _initSwitch2->_setSwitch2State
    _setSwitch2State->_updateSwitch2State
    _updateSwitch2State->_saveState
    _initStateManager->_getCurrentState
    _initSwitch1->_setSwitch1State
    _setSwitch1State->_updateSwitch1State
    _updateSwitch1State->_saveState
    _getSwitch1State->_getCurrentState

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10154
                _ConfigureOscillator
                            _InitApp
                        _initSwitch1
                        _initSwitch2
                      _updateSwitch1
                      _updateSwitch2
 ---------------------------------------------------------------------------------
 (1) _updateSwitch2                                        1     1      0    3000
                                              7 BANK0      1     1      0
                    _setSwitch1State
                    _setSwitch2State
 ---------------------------------------------------------------------------------
 (1) _updateSwitch1                                        1     1      0    3000
                                              7 BANK0      1     1      0
                    _setSwitch1State
                    _setSwitch2State
 ---------------------------------------------------------------------------------
 (1) _initSwitch2                                          2     2      0    2077
                                              7 BANK0      2     2      0
                    _getSwitch2State
                    _setSwitch2State
 ---------------------------------------------------------------------------------
 (2) _setSwitch2State                                      2     0      2    1500
                                              5 BANK0      2     0      2
                 _updateSwitch2State
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _updateSwitch2State                                   2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (2) _getSwitch2State                                      2     0      2     554
                                              1 BANK0      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (3) _initStateManager                                     0     0      0     554
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (1) _initSwitch1                                          2     2      0    2077
                                              7 BANK0      2     2      0
                    _getSwitch1State
                    _setSwitch1State
 ---------------------------------------------------------------------------------
 (2) _setSwitch1State                                      2     0      2    1500
                                              5 BANK0      2     0      2
                 _updateSwitch1State
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2     498
                                              0 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitch1State                                   2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (4) _saveState                                            4     4      0     527
                                             12 COMMON     1     1      0
                                              0 BANK0      3     3      0
                 _HEF_ByteArrayWrite
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayWrite                                   9     7      2     526
                                              4 COMMON     8     6      2
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     195
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getSwitch1State                                      2     0      2     554
                                              1 BANK0      2     0      2
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (4) _getCurrentState                                      3     3      0     554
                                             11 COMMON     2     2      0
                                              0 BANK0      1     1      0
                  _HEF_ByteArrayRead
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayRead                                    7     5      2     553
                                              4 COMMON     7     5      2
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (6) _FLASH_ReadWord                                       3     1      2     259
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
   _initSwitch1
     _getSwitch1State
       _getCurrentState
         _HEF_ByteArrayRead
           _FLASH_ReadWord
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _initSwitch2
     _getSwitch2State
       _initStateManager
         _getCurrentState
           _HEF_ByteArrayRead
             _FLASH_ReadWord
     _setSwitch2State
       _updateSwitch2State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateSwitch1
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
     _setSwitch2State
       _updateSwitch2State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateSwitch2
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
     _setSwitch2State
       _updateSwitch2State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      2D       6       56.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      3A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Dec 21 20:55:58 2016

                _updateSwitch1 00AC                  _updateSwitch2 0021                    __CFG_CP$OFF 0000  
                           l71 027A                    __CFG_LVP$ON 0000                            l141 0181  
                          l234 00E4                            l284 0059                            u555 014A  
                          u740 01E6                            u805 00B8                            u735 01CB  
                          u815 00C8                            u585 0203                            u665 0245  
                          u905 003D                            u770 01AC                            u675 024C  
                          u765 0191                            u855 00EE                            u865 0115  
                          u945 0063                            u955 008A                            u895 002D  
              _getCurrentState 0289                            _isr 0004                   __CFG_BORV$LO 0000  
                          wreg 0009                           l1222 015E                           l1240 0217  
                         l1320 0331                           l1306 030C                           l1236 0215  
                         l1412 0120                           l1404 0108                           l1262 02A0  
                         l1406 010C                           l1430 0034                           l1248 022D  
                         l1184 0144                           l1336 01E8                           l1266 02A6  
                         l1274 023A                           l1450 0072                           l1434 0044  
                         l1188 0146                           l1278 0244                           l1358 01AE  
                         l1382 00CF                           l1464 0095                           l1456 007D  
                         l1298 0319                           l1378 00BF                           l1458 0081  
                         l1548 035B                           l1398 00FD                           ?_isr 0070  
                 __CFG_WRT$OFF 0000     __end_of_HEF_ByteArrayWrite 018A                           _main 0357  
                         fsr0h 0005                           fsr1h 0007                           fsr0l 0004  
                         indf0 0000                           indf1 0001                           fsr1l 0006  
                         btemp 007E                           ltemp 007E                           start 000D  
                         ttemp 007E                           wtemp 007E                  __CFG_MCLRE$ON 0000  
               ?_updateSwitch1 0070                 ?_updateSwitch2 0070                __end_of_InitApp 02F5  
                        ??_isr 0070                          ?_main 0070                   ?_initSwitch1 0070  
                 ?_initSwitch2 0070                  __CFG_WDTE$OFF 0000                          _PMADR 0191  
     __size_of_getSwitch1State 0007       __size_of_getSwitch2State 000C            _ConfigureOscillator 0376  
          ___lmul@multiplicand 0075             _updateSwitch1State 0312             _updateSwitch2State 0305  
               __CFG_BOREN$OFF 0000                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                __end_of_wait_ms 0289  
                 _switch1_down 0026                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                 _switch2_down 002E                          status 0003         HEF_ByteArrayRead@block 0074  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F         HEF_ByteArrayRead@count 0075            ?_updateSwitch1State 0047  
          ?_updateSwitch2State 0047           ?_ConfigureOscillator 0070                __initialization 000E  
                 __end_of_main 035E        __end_of_getCurrentState 02AB                 __CFG_LPBOR$OFF 0000  
             _initStateManager 0371                         ??_main 007D           ??_updateSwitch1State 007D  
      __size_of_FLASH_ReadWord 0019           ??_updateSwitch2State 007D              _HEF_ByteArrayRead 01FE  
                       _ADRESH 009C                         _ADRESL 009B             ?_HEF_ByteArrayRead 0074  
                       _PMADRH 0192                         _PMADRL 0191                         _PMDATH 0194  
                       _PMDATL 0193                         _PMCON2 0196      __size_of_FLASH_EraseBlock 001C  
                    ??_InitApp 0071          ??_ConfigureOscillator 0071                ??_updateSwitch1 004B  
              ??_updateSwitch2 004B            ??_HEF_ByteArrayRead 0076                 __CFG_PWRTE$OFF 0000  
                       ___lmul 0232                 __CFG_STVREN$ON 0000               __end_of_init_adc 0357  
      FLASH_ReadWord@flashAddr 0071      __end_of_HEF_ByteArrayRead 0232        HEF_ByteArrayRead@bArray 007A  
                    ??_wait_ms 007D                  _switch1_state 003C                  _switch2_state 0040  
            ??_getSwitch1State 007D              ??_getSwitch2State 007D        __end_of__initialization 001E  
             getCurrentState@r 0044                 __pcstackCOMMON 0070                   __pidataBANK0 0343  
             ?_getCurrentState 0070           __size_of_initSwitch1 000C           __size_of_initSwitch2 000C  
                   __pbssBANK0 0020         setSwitch1State@f_state 0049               _long_press_limit 003A  
                   __pmaintext 0357                        ?___lmul 0071                     __pintentry 0004  
           _HEF_ByteArrayWrite 0137             __size_of_saveState 0010       __size_of_setSwitch1State 003A  
     __size_of_setSwitch2State 003A                 ___lmul@product 0079                 _FLASH_ReadWord 02C7  
          ?_HEF_ByteArrayWrite 0074     __size_of_HEF_ByteArrayRead 0034                        _OSCSTAT 009A  
             _FLASH_EraseBlock 02AB       __end_of_initStateManager 0376                      ?_init_adc 0070  
                      _InitApp 02E0           ??_HEF_ByteArrayWrite 0076                     _pedalState 0036  
              __size_of___lmul 002F         __end_of_FLASH_ReadWord 02E0                        __ptext1 0021  
                      __ptext2 00AC                        __ptext3 031F                        __ptext4 018A  
                      __ptext5 0305                        __ptext6 032B                        __ptext7 0371  
                      __ptext8 0337                        __ptext9 01C4                      _T2CONbits 001C  
                 __size_of_isr 0009                        _wait_ms 0261                        clrloop0 0366  
         end_of_initialization 001E              __end_of_saveState 0305                        init_ram 036B  
                   ??_init_adc 0071                        initloop 036C         setSwitch2State@f_state 0049  
                  wait_ms@time 0044      FLASH_ReadWord@GIEBitValue 0073                 _switch1_toggle 002A  
               _switch2_toggle 0032                ?_FLASH_ReadWord 0071                      _PORTAbits 000C  
              _getSwitch1State 035E                _getSwitch2State 032B    __size_of_updateSwitch1State 000D  
  __size_of_updateSwitch2State 000D              ??_setSwitch1State 007D               __CFG_FOSC$INTOSC 0000  
            ??_setSwitch2State 007D                      _TRISAbits 008C                      _TRISCbits 008E  
     HEF_ByteArrayRead@wordAdd 0078    __end_of_ConfigureOscillator 037B        HEF_ByteArrayWrite@block 0079  
      HEF_ByteArrayWrite@count 0075                     _switch1_up 003E                     _switch2_up 0042  
        __end_of_updateSwitch1 0137          __end_of_updateSwitch2 00AC                 __end_of___lmul 0261  
          start_initialization 000E                    __end_of_isr 000D                       ??___lmul 0079  
      __end_of_getSwitch1State 0365        __end_of_getSwitch2State 0337                    __pdataBANK0 003A  
  FLASH_EraseBlock@GIEBitValue 0073       __end_of_FLASH_EraseBlock 02C7                  ??_initSwitch1 007D  
                ??_initSwitch2 007D                      ___latbits 0000        updateSwitch1State@state 0047  
                __pcstackBANK0 0044       __size_of_getCurrentState 0022              ?_initStateManager 0070  
                     ?_InitApp 0070              __size_of_init_adc 000A             ??_initStateManager 007D  
      updateSwitch2State@state 0047    HEF_ByteArrayWrite@blockAddr 007A                     saveState@r 007C  
                     ?_wait_ms 0044            __end_of_initSwitch1 0343            __end_of_initSwitch2 032B  
  HEF_ByteArrayWrite@byteArray 0074                       _LATAbits 010C                       _LATCbits 010E  
                    clear_ram0 0365                      _saveState 02F5    __size_of_HEF_ByteArrayWrite 0053  
           _switch1_turning_on 002C                       _PIR1bits 0011      FLASH_EraseBlock@startAddr 0071  
             ??_FLASH_ReadWord 0073                _setSwitch1State 01C4                _setSwitch2State 018A  
             ?_getSwitch1State 0045               ?_getSwitch2State 0045                     _ADCON0bits 009D  
                   _ADCON1bits 009E             _switch2_turning_on 0034              ___lmul@multiplier 0071  
            ??_getCurrentState 007B           initSwitch1@initState 004B                     ?_saveState 0070  
             __size_of_InitApp 0015           initSwitch2@initState 004B     __end_of_updateSwitch1State 031F  
   __end_of_updateSwitch2State 0312                    _initSwitch1 0337                    _initSwitch2 031F  
                   _ANSELAbits 018C                       __ptext10 0261                       __ptext11 0232  
                     __ptext20 02E0                       __ptext12 0312                       __ptext21 034D  
                     __ptext13 02F5                       __ptext22 0376                       __ptext14 0137  
                     __ptext15 02AB                       __ptext16 035E                       __ptext17 0289  
                     __ptext18 01FE                       __ptext19 02C7               __size_of_wait_ms 0028  
                     _init_adc 034D                  __size_of_main 0007        __end_of_setSwitch1State 01FE  
      __end_of_setSwitch2State 01C4   __size_of_ConfigureOscillator 0005                       int$flags 007E  
            ?_FLASH_EraseBlock 0071             ??_FLASH_EraseBlock 0073                     _INTCONbits 000B  
       __size_of_updateSwitch1 008B         __size_of_updateSwitch2 008B                       intlevel1 0000  
                   _PMCON1bits 0195  HEF_ByteArrayWrite@GIEBitValue 0078              __CFG_CLKOUTEN$OFF 0000  
                  ??_saveState 0044                     _OSCCONbits 0099                  _isInitialized 0024  
                 wait_ms@timel 0020      __size_of_initStateManager 0005                _switch1_pressed 0028  
              _switch2_pressed 0030               ?_setSwitch1State 0049               ?_setSwitch2State 0049  
