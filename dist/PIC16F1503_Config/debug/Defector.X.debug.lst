

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Aug 08 19:00:17 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     	;# 
    38  0001                     	;# 
    39  0002                     	;# 
    40  0003                     	;# 
    41  0004                     	;# 
    42  0005                     	;# 
    43  0006                     	;# 
    44  0007                     	;# 
    45  0008                     	;# 
    46  0009                     	;# 
    47  000A                     	;# 
    48  000B                     	;# 
    49  000C                     	;# 
    50  000E                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0015                     	;# 
    55  0016                     	;# 
    56  0016                     	;# 
    57  0017                     	;# 
    58  0018                     	;# 
    59  0019                     	;# 
    60  001A                     	;# 
    61  001B                     	;# 
    62  001C                     	;# 
    63  008C                     	;# 
    64  008E                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0099                     	;# 
    72  009A                     	;# 
    73  009B                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009E                     	;# 
    78  009F                     	;# 
    79  010C                     	;# 
    80  010E                     	;# 
    81  0111                     	;# 
    82  0112                     	;# 
    83  0113                     	;# 
    84  0114                     	;# 
    85  0115                     	;# 
    86  0116                     	;# 
    87  0117                     	;# 
    88  0118                     	;# 
    89  0119                     	;# 
    90  011D                     	;# 
    91  018C                     	;# 
    92  018E                     	;# 
    93  0191                     	;# 
    94  0191                     	;# 
    95  0192                     	;# 
    96  0193                     	;# 
    97  0193                     	;# 
    98  0194                     	;# 
    99  0195                     	;# 
   100  0196                     	;# 
   101  0197                     	;# 
   102  020C                     	;# 
   103  0211                     	;# 
   104  0211                     	;# 
   105  0212                     	;# 
   106  0212                     	;# 
   107  0213                     	;# 
   108  0213                     	;# 
   109  0214                     	;# 
   110  0214                     	;# 
   111  0215                     	;# 
   112  0215                     	;# 
   113  0215                     	;# 
   114  0216                     	;# 
   115  0216                     	;# 
   116  0217                     	;# 
   117  0217                     	;# 
   118  0391                     	;# 
   119  0392                     	;# 
   120  0393                     	;# 
   121  0498                     	;# 
   122  0498                     	;# 
   123  0499                     	;# 
   124  049A                     	;# 
   125  049B                     	;# 
   126  049B                     	;# 
   127  049C                     	;# 
   128  049D                     	;# 
   129  049E                     	;# 
   130  049F                     	;# 
   131  0611                     	;# 
   132  0612                     	;# 
   133  0613                     	;# 
   134  0613                     	;# 
   135  0614                     	;# 
   136  0615                     	;# 
   137  0616                     	;# 
   138  0616                     	;# 
   139  0617                     	;# 
   140  0618                     	;# 
   141  0619                     	;# 
   142  0619                     	;# 
   143  061A                     	;# 
   144  061B                     	;# 
   145  061C                     	;# 
   146  061C                     	;# 
   147  0691                     	;# 
   148  0692                     	;# 
   149  0693                     	;# 
   150  0694                     	;# 
   151  0695                     	;# 
   152  0F0F                     	;# 
   153  0F10                     	;# 
   154  0F11                     	;# 
   155  0F12                     	;# 
   156  0F13                     	;# 
   157  0F14                     	;# 
   158  0F15                     	;# 
   159  0F16                     	;# 
   160  0F17                     	;# 
   161  0F18                     	;# 
   162  0F19                     	;# 
   163  0F1A                     	;# 
   164  0F1B                     	;# 
   165  0F1C                     	;# 
   166  0F1D                     	;# 
   167  0F1E                     	;# 
   168  0F1F                     	;# 
   169  0FE3                     	;# 
   170  0FE4                     	;# 
   171  0FE5                     	;# 
   172  0FE6                     	;# 
   173  0FE7                     	;# 
   174  0FE8                     	;# 
   175  0FE9                     	;# 
   176  0FEA                     	;# 
   177  0FEB                     	;# 
   178  0FED                     	;# 
   179  0FEE                     	;# 
   180  0FEF                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000E                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  008C                     	;# 
   208  008E                     	;# 
   209  0091                     	;# 
   210  0092                     	;# 
   211  0093                     	;# 
   212  0095                     	;# 
   213  0096                     	;# 
   214  0097                     	;# 
   215  0099                     	;# 
   216  009A                     	;# 
   217  009B                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  010C                     	;# 
   224  010E                     	;# 
   225  0111                     	;# 
   226  0112                     	;# 
   227  0113                     	;# 
   228  0114                     	;# 
   229  0115                     	;# 
   230  0116                     	;# 
   231  0117                     	;# 
   232  0118                     	;# 
   233  0119                     	;# 
   234  011D                     	;# 
   235  018C                     	;# 
   236  018E                     	;# 
   237  0191                     	;# 
   238  0191                     	;# 
   239  0192                     	;# 
   240  0193                     	;# 
   241  0193                     	;# 
   242  0194                     	;# 
   243  0195                     	;# 
   244  0196                     	;# 
   245  0197                     	;# 
   246  020C                     	;# 
   247  0211                     	;# 
   248  0211                     	;# 
   249  0212                     	;# 
   250  0212                     	;# 
   251  0213                     	;# 
   252  0213                     	;# 
   253  0214                     	;# 
   254  0214                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  0391                     	;# 
   263  0392                     	;# 
   264  0393                     	;# 
   265  0498                     	;# 
   266  0498                     	;# 
   267  0499                     	;# 
   268  049A                     	;# 
   269  049B                     	;# 
   270  049B                     	;# 
   271  049C                     	;# 
   272  049D                     	;# 
   273  049E                     	;# 
   274  049F                     	;# 
   275  0611                     	;# 
   276  0612                     	;# 
   277  0613                     	;# 
   278  0613                     	;# 
   279  0614                     	;# 
   280  0615                     	;# 
   281  0616                     	;# 
   282  0616                     	;# 
   283  0617                     	;# 
   284  0618                     	;# 
   285  0619                     	;# 
   286  0619                     	;# 
   287  061A                     	;# 
   288  061B                     	;# 
   289  061C                     	;# 
   290  061C                     	;# 
   291  0691                     	;# 
   292  0692                     	;# 
   293  0693                     	;# 
   294  0694                     	;# 
   295  0695                     	;# 
   296  0F0F                     	;# 
   297  0F10                     	;# 
   298  0F11                     	;# 
   299  0F12                     	;# 
   300  0F13                     	;# 
   301  0F14                     	;# 
   302  0F15                     	;# 
   303  0F16                     	;# 
   304  0F17                     	;# 
   305  0F18                     	;# 
   306  0F19                     	;# 
   307  0F1A                     	;# 
   308  0F1B                     	;# 
   309  0F1C                     	;# 
   310  0F1D                     	;# 
   311  0F1E                     	;# 
   312  0F1F                     	;# 
   313  0FE3                     	;# 
   314  0FE4                     	;# 
   315  0FE5                     	;# 
   316  0FE6                     	;# 
   317  0FE7                     	;# 
   318  0FE8                     	;# 
   319  0FE9                     	;# 
   320  0FEA                     	;# 
   321  0FEB                     	;# 
   322  0FED                     	;# 
   323  0FEE                     	;# 
   324  0FEF                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  0007                     	;# 
   333  0008                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000E                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0013                     	;# 
   342  0015                     	;# 
   343  0016                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001C                     	;# 
   351  008C                     	;# 
   352  008E                     	;# 
   353  0091                     	;# 
   354  0092                     	;# 
   355  0093                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  010C                     	;# 
   368  010E                     	;# 
   369  0111                     	;# 
   370  0112                     	;# 
   371  0113                     	;# 
   372  0114                     	;# 
   373  0115                     	;# 
   374  0116                     	;# 
   375  0117                     	;# 
   376  0118                     	;# 
   377  0119                     	;# 
   378  011D                     	;# 
   379  018C                     	;# 
   380  018E                     	;# 
   381  0191                     	;# 
   382  0191                     	;# 
   383  0192                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0197                     	;# 
   390  020C                     	;# 
   391  0211                     	;# 
   392  0211                     	;# 
   393  0212                     	;# 
   394  0212                     	;# 
   395  0213                     	;# 
   396  0213                     	;# 
   397  0214                     	;# 
   398  0214                     	;# 
   399  0215                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0216                     	;# 
   403  0216                     	;# 
   404  0217                     	;# 
   405  0217                     	;# 
   406  0391                     	;# 
   407  0392                     	;# 
   408  0393                     	;# 
   409  0498                     	;# 
   410  0498                     	;# 
   411  0499                     	;# 
   412  049A                     	;# 
   413  049B                     	;# 
   414  049B                     	;# 
   415  049C                     	;# 
   416  049D                     	;# 
   417  049E                     	;# 
   418  049F                     	;# 
   419  0611                     	;# 
   420  0612                     	;# 
   421  0613                     	;# 
   422  0613                     	;# 
   423  0614                     	;# 
   424  0615                     	;# 
   425  0616                     	;# 
   426  0616                     	;# 
   427  0617                     	;# 
   428  0618                     	;# 
   429  0619                     	;# 
   430  0619                     	;# 
   431  061A                     	;# 
   432  061B                     	;# 
   433  061C                     	;# 
   434  061C                     	;# 
   435  0691                     	;# 
   436  0692                     	;# 
   437  0693                     	;# 
   438  0694                     	;# 
   439  0695                     	;# 
   440  0F0F                     	;# 
   441  0F10                     	;# 
   442  0F11                     	;# 
   443  0F12                     	;# 
   444  0F13                     	;# 
   445  0F14                     	;# 
   446  0F15                     	;# 
   447  0F16                     	;# 
   448  0F17                     	;# 
   449  0F18                     	;# 
   450  0F19                     	;# 
   451  0F1A                     	;# 
   452  0F1B                     	;# 
   453  0F1C                     	;# 
   454  0F1D                     	;# 
   455  0F1E                     	;# 
   456  0F1F                     	;# 
   457  0FE3                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000E                     	;# 
   483  0011                     	;# 
   484  0012                     	;# 
   485  0013                     	;# 
   486  0015                     	;# 
   487  0016                     	;# 
   488  0016                     	;# 
   489  0017                     	;# 
   490  0018                     	;# 
   491  0019                     	;# 
   492  001A                     	;# 
   493  001B                     	;# 
   494  001C                     	;# 
   495  008C                     	;# 
   496  008E                     	;# 
   497  0091                     	;# 
   498  0092                     	;# 
   499  0093                     	;# 
   500  0095                     	;# 
   501  0096                     	;# 
   502  0097                     	;# 
   503  0099                     	;# 
   504  009A                     	;# 
   505  009B                     	;# 
   506  009B                     	;# 
   507  009C                     	;# 
   508  009D                     	;# 
   509  009E                     	;# 
   510  009F                     	;# 
   511  010C                     	;# 
   512  010E                     	;# 
   513  0111                     	;# 
   514  0112                     	;# 
   515  0113                     	;# 
   516  0114                     	;# 
   517  0115                     	;# 
   518  0116                     	;# 
   519  0117                     	;# 
   520  0118                     	;# 
   521  0119                     	;# 
   522  011D                     	;# 
   523  018C                     	;# 
   524  018E                     	;# 
   525  0191                     	;# 
   526  0191                     	;# 
   527  0192                     	;# 
   528  0193                     	;# 
   529  0193                     	;# 
   530  0194                     	;# 
   531  0195                     	;# 
   532  0196                     	;# 
   533  0197                     	;# 
   534  020C                     	;# 
   535  0211                     	;# 
   536  0211                     	;# 
   537  0212                     	;# 
   538  0212                     	;# 
   539  0213                     	;# 
   540  0213                     	;# 
   541  0214                     	;# 
   542  0214                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0216                     	;# 
   547  0216                     	;# 
   548  0217                     	;# 
   549  0217                     	;# 
   550  0391                     	;# 
   551  0392                     	;# 
   552  0393                     	;# 
   553  0498                     	;# 
   554  0498                     	;# 
   555  0499                     	;# 
   556  049A                     	;# 
   557  049B                     	;# 
   558  049B                     	;# 
   559  049C                     	;# 
   560  049D                     	;# 
   561  049E                     	;# 
   562  049F                     	;# 
   563  0611                     	;# 
   564  0612                     	;# 
   565  0613                     	;# 
   566  0613                     	;# 
   567  0614                     	;# 
   568  0615                     	;# 
   569  0616                     	;# 
   570  0616                     	;# 
   571  0617                     	;# 
   572  0618                     	;# 
   573  0619                     	;# 
   574  0619                     	;# 
   575  061A                     	;# 
   576  061B                     	;# 
   577  061C                     	;# 
   578  061C                     	;# 
   579  0691                     	;# 
   580  0692                     	;# 
   581  0693                     	;# 
   582  0694                     	;# 
   583  0695                     	;# 
   584  0F0F                     	;# 
   585  0F10                     	;# 
   586  0F11                     	;# 
   587  0F12                     	;# 
   588  0F13                     	;# 
   589  0F14                     	;# 
   590  0F15                     	;# 
   591  0F16                     	;# 
   592  0F17                     	;# 
   593  0F18                     	;# 
   594  0F19                     	;# 
   595  0F1A                     	;# 
   596  0F1B                     	;# 
   597  0F1C                     	;# 
   598  0F1D                     	;# 
   599  0F1E                     	;# 
   600  0F1F                     	;# 
   601  0FE3                     	;# 
   602  0FE4                     	;# 
   603  0FE5                     	;# 
   604  0FE6                     	;# 
   605  0FE7                     	;# 
   606  0FE8                     	;# 
   607  0FE9                     	;# 
   608  0FEA                     	;# 
   609  0FEB                     	;# 
   610  0FED                     	;# 
   611  0FEE                     	;# 
   612  0FEF                     	;# 
   613  0000                     	;# 
   614  0001                     	;# 
   615  0002                     	;# 
   616  0003                     	;# 
   617  0004                     	;# 
   618  0005                     	;# 
   619  0006                     	;# 
   620  0007                     	;# 
   621  0008                     	;# 
   622  0009                     	;# 
   623  000A                     	;# 
   624  000B                     	;# 
   625  000C                     	;# 
   626  000E                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0013                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008E                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0093                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  009F                     	;# 
   655  010C                     	;# 
   656  010E                     	;# 
   657  0111                     	;# 
   658  0112                     	;# 
   659  0113                     	;# 
   660  0114                     	;# 
   661  0115                     	;# 
   662  0116                     	;# 
   663  0117                     	;# 
   664  0118                     	;# 
   665  0119                     	;# 
   666  011D                     	;# 
   667  018C                     	;# 
   668  018E                     	;# 
   669  0191                     	;# 
   670  0191                     	;# 
   671  0192                     	;# 
   672  0193                     	;# 
   673  0193                     	;# 
   674  0194                     	;# 
   675  0195                     	;# 
   676  0196                     	;# 
   677  0197                     	;# 
   678  020C                     	;# 
   679  0211                     	;# 
   680  0211                     	;# 
   681  0212                     	;# 
   682  0212                     	;# 
   683  0213                     	;# 
   684  0213                     	;# 
   685  0214                     	;# 
   686  0214                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0216                     	;# 
   691  0216                     	;# 
   692  0217                     	;# 
   693  0217                     	;# 
   694  0391                     	;# 
   695  0392                     	;# 
   696  0393                     	;# 
   697  0498                     	;# 
   698  0498                     	;# 
   699  0499                     	;# 
   700  049A                     	;# 
   701  049B                     	;# 
   702  049B                     	;# 
   703  049C                     	;# 
   704  049D                     	;# 
   705  049E                     	;# 
   706  049F                     	;# 
   707  0611                     	;# 
   708  0612                     	;# 
   709  0613                     	;# 
   710  0613                     	;# 
   711  0614                     	;# 
   712  0615                     	;# 
   713  0616                     	;# 
   714  0616                     	;# 
   715  0617                     	;# 
   716  0618                     	;# 
   717  0619                     	;# 
   718  0619                     	;# 
   719  061A                     	;# 
   720  061B                     	;# 
   721  061C                     	;# 
   722  061C                     	;# 
   723  0691                     	;# 
   724  0692                     	;# 
   725  0693                     	;# 
   726  0694                     	;# 
   727  0695                     	;# 
   728  0F0F                     	;# 
   729  0F10                     	;# 
   730  0F11                     	;# 
   731  0F12                     	;# 
   732  0F13                     	;# 
   733  0F14                     	;# 
   734  0F15                     	;# 
   735  0F16                     	;# 
   736  0F17                     	;# 
   737  0F18                     	;# 
   738  0F19                     	;# 
   739  0F1A                     	;# 
   740  0F1B                     	;# 
   741  0F1C                     	;# 
   742  0F1D                     	;# 
   743  0F1E                     	;# 
   744  0F1F                     	;# 
   745  0FE3                     	;# 
   746  0FE4                     	;# 
   747  0FE5                     	;# 
   748  0FE6                     	;# 
   749  0FE7                     	;# 
   750  0FE8                     	;# 
   751  0FE9                     	;# 
   752  0FEA                     	;# 
   753  0FEB                     	;# 
   754  0FED                     	;# 
   755  0FEE                     	;# 
   756  0FEF                     	;# 
   757  0000                     	;# 
   758  0001                     	;# 
   759  0002                     	;# 
   760  0003                     	;# 
   761  0004                     	;# 
   762  0005                     	;# 
   763  0006                     	;# 
   764  0007                     	;# 
   765  0008                     	;# 
   766  0009                     	;# 
   767  000A                     	;# 
   768  000B                     	;# 
   769  000C                     	;# 
   770  000E                     	;# 
   771  0011                     	;# 
   772  0012                     	;# 
   773  0013                     	;# 
   774  0015                     	;# 
   775  0016                     	;# 
   776  0016                     	;# 
   777  0017                     	;# 
   778  0018                     	;# 
   779  0019                     	;# 
   780  001A                     	;# 
   781  001B                     	;# 
   782  001C                     	;# 
   783  008C                     	;# 
   784  008E                     	;# 
   785  0091                     	;# 
   786  0092                     	;# 
   787  0093                     	;# 
   788  0095                     	;# 
   789  0096                     	;# 
   790  0097                     	;# 
   791  0099                     	;# 
   792  009A                     	;# 
   793  009B                     	;# 
   794  009B                     	;# 
   795  009C                     	;# 
   796  009D                     	;# 
   797  009E                     	;# 
   798  009F                     	;# 
   799  010C                     	;# 
   800  010E                     	;# 
   801  0111                     	;# 
   802  0112                     	;# 
   803  0113                     	;# 
   804  0114                     	;# 
   805  0115                     	;# 
   806  0116                     	;# 
   807  0117                     	;# 
   808  0118                     	;# 
   809  0119                     	;# 
   810  011D                     	;# 
   811  018C                     	;# 
   812  018E                     	;# 
   813  0191                     	;# 
   814  0191                     	;# 
   815  0192                     	;# 
   816  0193                     	;# 
   817  0193                     	;# 
   818  0194                     	;# 
   819  0195                     	;# 
   820  0196                     	;# 
   821  0197                     	;# 
   822  020C                     	;# 
   823  0211                     	;# 
   824  0211                     	;# 
   825  0212                     	;# 
   826  0212                     	;# 
   827  0213                     	;# 
   828  0213                     	;# 
   829  0214                     	;# 
   830  0214                     	;# 
   831  0215                     	;# 
   832  0215                     	;# 
   833  0215                     	;# 
   834  0216                     	;# 
   835  0216                     	;# 
   836  0217                     	;# 
   837  0217                     	;# 
   838  0391                     	;# 
   839  0392                     	;# 
   840  0393                     	;# 
   841  0498                     	;# 
   842  0498                     	;# 
   843  0499                     	;# 
   844  049A                     	;# 
   845  049B                     	;# 
   846  049B                     	;# 
   847  049C                     	;# 
   848  049D                     	;# 
   849  049E                     	;# 
   850  049F                     	;# 
   851  0611                     	;# 
   852  0612                     	;# 
   853  0613                     	;# 
   854  0613                     	;# 
   855  0614                     	;# 
   856  0615                     	;# 
   857  0616                     	;# 
   858  0616                     	;# 
   859  0617                     	;# 
   860  0618                     	;# 
   861  0619                     	;# 
   862  0619                     	;# 
   863  061A                     	;# 
   864  061B                     	;# 
   865  061C                     	;# 
   866  061C                     	;# 
   867  0691                     	;# 
   868  0692                     	;# 
   869  0693                     	;# 
   870  0694                     	;# 
   871  0695                     	;# 
   872  0F0F                     	;# 
   873  0F10                     	;# 
   874  0F11                     	;# 
   875  0F12                     	;# 
   876  0F13                     	;# 
   877  0F14                     	;# 
   878  0F15                     	;# 
   879  0F16                     	;# 
   880  0F17                     	;# 
   881  0F18                     	;# 
   882  0F19                     	;# 
   883  0F1A                     	;# 
   884  0F1B                     	;# 
   885  0F1C                     	;# 
   886  0F1D                     	;# 
   887  0F1E                     	;# 
   888  0F1F                     	;# 
   889  0FE3                     	;# 
   890  0FE4                     	;# 
   891  0FE5                     	;# 
   892  0FE6                     	;# 
   893  0FE7                     	;# 
   894  0FE8                     	;# 
   895  0FE9                     	;# 
   896  0FEA                     	;# 
   897  0FEB                     	;# 
   898  0FED                     	;# 
   899  0FEE                     	;# 
   900  0FEF                     	;# 
   901  0000                     	;# 
   902  0001                     	;# 
   903  0002                     	;# 
   904  0003                     	;# 
   905  0004                     	;# 
   906  0005                     	;# 
   907  0006                     	;# 
   908  0007                     	;# 
   909  0008                     	;# 
   910  0009                     	;# 
   911  000A                     	;# 
   912  000B                     	;# 
   913  000C                     	;# 
   914  000E                     	;# 
   915  0011                     	;# 
   916  0012                     	;# 
   917  0013                     	;# 
   918  0015                     	;# 
   919  0016                     	;# 
   920  0016                     	;# 
   921  0017                     	;# 
   922  0018                     	;# 
   923  0019                     	;# 
   924  001A                     	;# 
   925  001B                     	;# 
   926  001C                     	;# 
   927  008C                     	;# 
   928  008E                     	;# 
   929  0091                     	;# 
   930  0092                     	;# 
   931  0093                     	;# 
   932  0095                     	;# 
   933  0096                     	;# 
   934  0097                     	;# 
   935  0099                     	;# 
   936  009A                     	;# 
   937  009B                     	;# 
   938  009B                     	;# 
   939  009C                     	;# 
   940  009D                     	;# 
   941  009E                     	;# 
   942  009F                     	;# 
   943  010C                     	;# 
   944  010E                     	;# 
   945  0111                     	;# 
   946  0112                     	;# 
   947  0113                     	;# 
   948  0114                     	;# 
   949  0115                     	;# 
   950  0116                     	;# 
   951  0117                     	;# 
   952  0118                     	;# 
   953  0119                     	;# 
   954  011D                     	;# 
   955  018C                     	;# 
   956  018E                     	;# 
   957  0191                     	;# 
   958  0191                     	;# 
   959  0192                     	;# 
   960  0193                     	;# 
   961  0193                     	;# 
   962  0194                     	;# 
   963  0195                     	;# 
   964  0196                     	;# 
   965  0197                     	;# 
   966  020C                     	;# 
   967  0211                     	;# 
   968  0211                     	;# 
   969  0212                     	;# 
   970  0212                     	;# 
   971  0213                     	;# 
   972  0213                     	;# 
   973  0214                     	;# 
   974  0214                     	;# 
   975  0215                     	;# 
   976  0215                     	;# 
   977  0215                     	;# 
   978  0216                     	;# 
   979  0216                     	;# 
   980  0217                     	;# 
   981  0217                     	;# 
   982  0391                     	;# 
   983  0392                     	;# 
   984  0393                     	;# 
   985  0498                     	;# 
   986  0498                     	;# 
   987  0499                     	;# 
   988  049A                     	;# 
   989  049B                     	;# 
   990  049B                     	;# 
   991  049C                     	;# 
   992  049D                     	;# 
   993  049E                     	;# 
   994  049F                     	;# 
   995  0611                     	;# 
   996  0612                     	;# 
   997  0613                     	;# 
   998  0613                     	;# 
   999  0614                     	;# 
  1000  0615                     	;# 
  1001  0616                     	;# 
  1002  0616                     	;# 
  1003  0617                     	;# 
  1004  0618                     	;# 
  1005  0619                     	;# 
  1006  0619                     	;# 
  1007  061A                     	;# 
  1008  061B                     	;# 
  1009  061C                     	;# 
  1010  061C                     	;# 
  1011  0691                     	;# 
  1012  0692                     	;# 
  1013  0693                     	;# 
  1014  0694                     	;# 
  1015  0695                     	;# 
  1016  0F0F                     	;# 
  1017  0F10                     	;# 
  1018  0F11                     	;# 
  1019  0F12                     	;# 
  1020  0F13                     	;# 
  1021  0F14                     	;# 
  1022  0F15                     	;# 
  1023  0F16                     	;# 
  1024  0F17                     	;# 
  1025  0F18                     	;# 
  1026  0F19                     	;# 
  1027  0F1A                     	;# 
  1028  0F1B                     	;# 
  1029  0F1C                     	;# 
  1030  0F1D                     	;# 
  1031  0F1E                     	;# 
  1032  0F1F                     	;# 
  1033  0FE3                     	;# 
  1034  0FE4                     	;# 
  1035  0FE5                     	;# 
  1036  0FE6                     	;# 
  1037  0FE7                     	;# 
  1038  0FE8                     	;# 
  1039  0FE9                     	;# 
  1040  0FEA                     	;# 
  1041  0FEB                     	;# 
  1042  0FED                     	;# 
  1043  0FEE                     	;# 
  1044  0FEF                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0008                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000E                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0013                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008E                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0093                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  009F                     	;# 
  1087  010C                     	;# 
  1088  010E                     	;# 
  1089  0111                     	;# 
  1090  0112                     	;# 
  1091  0113                     	;# 
  1092  0114                     	;# 
  1093  0115                     	;# 
  1094  0116                     	;# 
  1095  0117                     	;# 
  1096  0118                     	;# 
  1097  0119                     	;# 
  1098  011D                     	;# 
  1099  018C                     	;# 
  1100  018E                     	;# 
  1101  0191                     	;# 
  1102  0191                     	;# 
  1103  0192                     	;# 
  1104  0193                     	;# 
  1105  0193                     	;# 
  1106  0194                     	;# 
  1107  0195                     	;# 
  1108  0196                     	;# 
  1109  0197                     	;# 
  1110  020C                     	;# 
  1111  0211                     	;# 
  1112  0211                     	;# 
  1113  0212                     	;# 
  1114  0212                     	;# 
  1115  0213                     	;# 
  1116  0213                     	;# 
  1117  0214                     	;# 
  1118  0214                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0216                     	;# 
  1123  0216                     	;# 
  1124  0217                     	;# 
  1125  0217                     	;# 
  1126  0391                     	;# 
  1127  0392                     	;# 
  1128  0393                     	;# 
  1129  0498                     	;# 
  1130  0498                     	;# 
  1131  0499                     	;# 
  1132  049A                     	;# 
  1133  049B                     	;# 
  1134  049B                     	;# 
  1135  049C                     	;# 
  1136  049D                     	;# 
  1137  049E                     	;# 
  1138  049F                     	;# 
  1139  0611                     	;# 
  1140  0612                     	;# 
  1141  0613                     	;# 
  1142  0613                     	;# 
  1143  0614                     	;# 
  1144  0615                     	;# 
  1145  0616                     	;# 
  1146  0616                     	;# 
  1147  0617                     	;# 
  1148  0618                     	;# 
  1149  0619                     	;# 
  1150  0619                     	;# 
  1151  061A                     	;# 
  1152  061B                     	;# 
  1153  061C                     	;# 
  1154  061C                     	;# 
  1155  0691                     	;# 
  1156  0692                     	;# 
  1157  0693                     	;# 
  1158  0694                     	;# 
  1159  0695                     	;# 
  1160  0F0F                     	;# 
  1161  0F10                     	;# 
  1162  0F11                     	;# 
  1163  0F12                     	;# 
  1164  0F13                     	;# 
  1165  0F14                     	;# 
  1166  0F15                     	;# 
  1167  0F16                     	;# 
  1168  0F17                     	;# 
  1169  0F18                     	;# 
  1170  0F19                     	;# 
  1171  0F1A                     	;# 
  1172  0F1B                     	;# 
  1173  0F1C                     	;# 
  1174  0F1D                     	;# 
  1175  0F1E                     	;# 
  1176  0F1F                     	;# 
  1177  0FE3                     	;# 
  1178  0FE4                     	;# 
  1179  0FE5                     	;# 
  1180  0FE6                     	;# 
  1181  0FE7                     	;# 
  1182  0FE8                     	;# 
  1183  0FE9                     	;# 
  1184  0FEA                     	;# 
  1185  0FEB                     	;# 
  1186  0FED                     	;# 
  1187  0FEE                     	;# 
  1188  0FEF                     	;# 
  1189  0000                     	;# 
  1190  0001                     	;# 
  1191  0002                     	;# 
  1192  0003                     	;# 
  1193  0004                     	;# 
  1194  0005                     	;# 
  1195  0006                     	;# 
  1196  0007                     	;# 
  1197  0008                     	;# 
  1198  0009                     	;# 
  1199  000A                     	;# 
  1200  000B                     	;# 
  1201  000C                     	;# 
  1202  000E                     	;# 
  1203  0011                     	;# 
  1204  0012                     	;# 
  1205  0013                     	;# 
  1206  0015                     	;# 
  1207  0016                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001C                     	;# 
  1215  008C                     	;# 
  1216  008E                     	;# 
  1217  0091                     	;# 
  1218  0092                     	;# 
  1219  0093                     	;# 
  1220  0095                     	;# 
  1221  0096                     	;# 
  1222  0097                     	;# 
  1223  0099                     	;# 
  1224  009A                     	;# 
  1225  009B                     	;# 
  1226  009B                     	;# 
  1227  009C                     	;# 
  1228  009D                     	;# 
  1229  009E                     	;# 
  1230  009F                     	;# 
  1231  010C                     	;# 
  1232  010E                     	;# 
  1233  0111                     	;# 
  1234  0112                     	;# 
  1235  0113                     	;# 
  1236  0114                     	;# 
  1237  0115                     	;# 
  1238  0116                     	;# 
  1239  0117                     	;# 
  1240  0118                     	;# 
  1241  0119                     	;# 
  1242  011D                     	;# 
  1243  018C                     	;# 
  1244  018E                     	;# 
  1245  0191                     	;# 
  1246  0191                     	;# 
  1247  0192                     	;# 
  1248  0193                     	;# 
  1249  0193                     	;# 
  1250  0194                     	;# 
  1251  0195                     	;# 
  1252  0196                     	;# 
  1253  0197                     	;# 
  1254  020C                     	;# 
  1255  0211                     	;# 
  1256  0211                     	;# 
  1257  0212                     	;# 
  1258  0212                     	;# 
  1259  0213                     	;# 
  1260  0213                     	;# 
  1261  0214                     	;# 
  1262  0214                     	;# 
  1263  0215                     	;# 
  1264  0215                     	;# 
  1265  0215                     	;# 
  1266  0216                     	;# 
  1267  0216                     	;# 
  1268  0217                     	;# 
  1269  0217                     	;# 
  1270  0391                     	;# 
  1271  0392                     	;# 
  1272  0393                     	;# 
  1273  0498                     	;# 
  1274  0498                     	;# 
  1275  0499                     	;# 
  1276  049A                     	;# 
  1277  049B                     	;# 
  1278  049B                     	;# 
  1279  049C                     	;# 
  1280  049D                     	;# 
  1281  049E                     	;# 
  1282  049F                     	;# 
  1283  0611                     	;# 
  1284  0612                     	;# 
  1285  0613                     	;# 
  1286  0613                     	;# 
  1287  0614                     	;# 
  1288  0615                     	;# 
  1289  0616                     	;# 
  1290  0616                     	;# 
  1291  0617                     	;# 
  1292  0618                     	;# 
  1293  0619                     	;# 
  1294  0619                     	;# 
  1295  061A                     	;# 
  1296  061B                     	;# 
  1297  061C                     	;# 
  1298  061C                     	;# 
  1299  0691                     	;# 
  1300  0692                     	;# 
  1301  0693                     	;# 
  1302  0694                     	;# 
  1303  0695                     	;# 
  1304  0F0F                     	;# 
  1305  0F10                     	;# 
  1306  0F11                     	;# 
  1307  0F12                     	;# 
  1308  0F13                     	;# 
  1309  0F14                     	;# 
  1310  0F15                     	;# 
  1311  0F16                     	;# 
  1312  0F17                     	;# 
  1313  0F18                     	;# 
  1314  0F19                     	;# 
  1315  0F1A                     	;# 
  1316  0F1B                     	;# 
  1317  0F1C                     	;# 
  1318  0F1D                     	;# 
  1319  0F1E                     	;# 
  1320  0F1F                     	;# 
  1321  0FE3                     	;# 
  1322  0FE4                     	;# 
  1323  0FE5                     	;# 
  1324  0FE6                     	;# 
  1325  0FE7                     	;# 
  1326  0FE8                     	;# 
  1327  0FE9                     	;# 
  1328  0FEA                     	;# 
  1329  0FEB                     	;# 
  1330  0FED                     	;# 
  1331  0FEE                     	;# 
  1332  0FEF                     	;# 
  1333  0000                     	;# 
  1334  0001                     	;# 
  1335  0002                     	;# 
  1336  0003                     	;# 
  1337  0004                     	;# 
  1338  0005                     	;# 
  1339  0006                     	;# 
  1340  0007                     	;# 
  1341  0008                     	;# 
  1342  0009                     	;# 
  1343  000A                     	;# 
  1344  000B                     	;# 
  1345  000C                     	;# 
  1346  000E                     	;# 
  1347  0011                     	;# 
  1348  0012                     	;# 
  1349  0013                     	;# 
  1350  0015                     	;# 
  1351  0016                     	;# 
  1352  0016                     	;# 
  1353  0017                     	;# 
  1354  0018                     	;# 
  1355  0019                     	;# 
  1356  001A                     	;# 
  1357  001B                     	;# 
  1358  001C                     	;# 
  1359  008C                     	;# 
  1360  008E                     	;# 
  1361  0091                     	;# 
  1362  0092                     	;# 
  1363  0093                     	;# 
  1364  0095                     	;# 
  1365  0096                     	;# 
  1366  0097                     	;# 
  1367  0099                     	;# 
  1368  009A                     	;# 
  1369  009B                     	;# 
  1370  009B                     	;# 
  1371  009C                     	;# 
  1372  009D                     	;# 
  1373  009E                     	;# 
  1374  009F                     	;# 
  1375  010C                     	;# 
  1376  010E                     	;# 
  1377  0111                     	;# 
  1378  0112                     	;# 
  1379  0113                     	;# 
  1380  0114                     	;# 
  1381  0115                     	;# 
  1382  0116                     	;# 
  1383  0117                     	;# 
  1384  0118                     	;# 
  1385  0119                     	;# 
  1386  011D                     	;# 
  1387  018C                     	;# 
  1388  018E                     	;# 
  1389  0191                     	;# 
  1390  0191                     	;# 
  1391  0192                     	;# 
  1392  0193                     	;# 
  1393  0193                     	;# 
  1394  0194                     	;# 
  1395  0195                     	;# 
  1396  0196                     	;# 
  1397  0197                     	;# 
  1398  020C                     	;# 
  1399  0211                     	;# 
  1400  0211                     	;# 
  1401  0212                     	;# 
  1402  0212                     	;# 
  1403  0213                     	;# 
  1404  0213                     	;# 
  1405  0214                     	;# 
  1406  0214                     	;# 
  1407  0215                     	;# 
  1408  0215                     	;# 
  1409  0215                     	;# 
  1410  0216                     	;# 
  1411  0216                     	;# 
  1412  0217                     	;# 
  1413  0217                     	;# 
  1414  0391                     	;# 
  1415  0392                     	;# 
  1416  0393                     	;# 
  1417  0498                     	;# 
  1418  0498                     	;# 
  1419  0499                     	;# 
  1420  049A                     	;# 
  1421  049B                     	;# 
  1422  049B                     	;# 
  1423  049C                     	;# 
  1424  049D                     	;# 
  1425  049E                     	;# 
  1426  049F                     	;# 
  1427  0611                     	;# 
  1428  0612                     	;# 
  1429  0613                     	;# 
  1430  0613                     	;# 
  1431  0614                     	;# 
  1432  0615                     	;# 
  1433  0616                     	;# 
  1434  0616                     	;# 
  1435  0617                     	;# 
  1436  0618                     	;# 
  1437  0619                     	;# 
  1438  0619                     	;# 
  1439  061A                     	;# 
  1440  061B                     	;# 
  1441  061C                     	;# 
  1442  061C                     	;# 
  1443  0691                     	;# 
  1444  0692                     	;# 
  1445  0693                     	;# 
  1446  0694                     	;# 
  1447  0695                     	;# 
  1448  0F0F                     	;# 
  1449  0F10                     	;# 
  1450  0F11                     	;# 
  1451  0F12                     	;# 
  1452  0F13                     	;# 
  1453  0F14                     	;# 
  1454  0F15                     	;# 
  1455  0F16                     	;# 
  1456  0F17                     	;# 
  1457  0F18                     	;# 
  1458  0F19                     	;# 
  1459  0F1A                     	;# 
  1460  0F1B                     	;# 
  1461  0F1C                     	;# 
  1462  0F1D                     	;# 
  1463  0F1E                     	;# 
  1464  0F1F                     	;# 
  1465  0FE3                     	;# 
  1466  0FE4                     	;# 
  1467  0FE5                     	;# 
  1468  0FE6                     	;# 
  1469  0FE7                     	;# 
  1470  0FE8                     	;# 
  1471  0FE9                     	;# 
  1472  0FEA                     	;# 
  1473  0FEB                     	;# 
  1474  0FED                     	;# 
  1475  0FEE                     	;# 
  1476  0FEF                     	;# 
  1477                           
  1478                           	psect	idataBANK0
  1479  0351                     __pidataBANK0:	
  1480                           
  1481                           ;initializer for _boost_state
  1482  0351  34FF               	retlw	255
  1483  0352  34FF               	retlw	255
  1484                           
  1485                           ;initializer for _boost_up
  1486  0353  3401               	retlw	1
  1487  0354  3400               	retlw	0
  1488                           
  1489                           ;initializer for _debounce_limit
  1490  0355  3419               	retlw	25
  1491  0356  3400               	retlw	0
  1492                           
  1493                           ;initializer for _feedback_state
  1494  0357  34FF               	retlw	255
  1495  0358  34FF               	retlw	255
  1496                           
  1497                           ;initializer for _fuzz_state
  1498  0359  34FF               	retlw	255
  1499  035A  34FF               	retlw	255
  1500                           
  1501                           ;initializer for _fuzz_up
  1502  035B  3401               	retlw	1
  1503  035C  3400               	retlw	0
  1504                           
  1505                           ;initializer for _long_press_limit
  1506  035D  3400               	retlw	0
  1507  035E  342D               	retlw	45
  1508  000B                     _INTCONbits	set	11
  1509  0011                     _PIR1bits	set	17
  1510  000C                     _PORTAbits	set	12
  1511  001C                     _T2CONbits	set	28
  1512  009D                     _ADCON0bits	set	157
  1513  009E                     _ADCON1bits	set	158
  1514  009C                     _ADRESH	set	156
  1515  009B                     _ADRESL	set	155
  1516  0099                     _OSCCONbits	set	153
  1517  009A                     _OSCSTAT	set	154
  1518  008C                     _TRISAbits	set	140
  1519  008E                     _TRISCbits	set	142
  1520  010C                     _LATAbits	set	268
  1521  010E                     _LATCbits	set	270
  1522  0191                     _PMADR	set	401
  1523  018C                     _ANSELAbits	set	396
  1524  0192                     _PMADRH	set	402
  1525  0191                     _PMADRL	set	401
  1526  0195                     _PMCON1bits	set	405
  1527  0196                     _PMCON2	set	406
  1528  0194                     _PMDATH	set	404
  1529  0193                     _PMDATL	set	403
  1530                           
  1531                           ; #config settings
  1532  0000                     
  1533                           	psect	cinit
  1534  000E                     start_initialization:	
  1535  000E                     __initialization:	
  1536                           
  1537                           ; Clear objects allocated to BANK0
  1538  000E  3020               	movlw	low __pbssBANK0
  1539  000F  0084               	movwf	4
  1540  0010  3000               	movlw	high __pbssBANK0
  1541  0011  0085               	movwf	5
  1542  0012  3018               	movlw	24
  1543  0013  239B               	fcall	clear_ram0
  1544                           
  1545                           ; Initialize objects allocated to BANK0
  1546  0014  3051               	movlw	low __pidataBANK0
  1547  0015  0084               	movwf	4
  1548  0016  3083               	movlw	(high __pidataBANK0)| (0+128)
  1549  0017  0085               	movwf	5
  1550  0018  3038               	movlw	low __pdataBANK0
  1551  0019  0086               	movwf	6
  1552  001A  3000               	movlw	high __pdataBANK0
  1553  001B  0087               	movwf	7
  1554  001C  300E               	movlw	14
  1555  001D  23A1               	fcall	init_ram
  1556  001E                     end_of_initialization:	
  1557                           ;End of C runtime variable initialization code
  1558                           
  1559  001E                     __end_of__initialization:	
  1560  001E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1561  001F  0020               	movlb	0
  1562  0020  2B10               	ljmp	_main	;jump to C main() function
  1563                           
  1564                           	psect	bssBANK0
  1565  0020                     __pbssBANK0:	
  1566  0020                     wait_ms@timel:	
  1567  0020                     	ds	4
  1568  0024                     _boost_down:	
  1569  0024                     	ds	2
  1570  0026                     _boost_pressed:	
  1571  0026                     	ds	2
  1572  0028                     _fuzz_down:	
  1573  0028                     	ds	2
  1574  002A                     _fuzz_pressed:	
  1575  002A                     	ds	2
  1576  002C                     _fuzz_toggle:	
  1577  002C                     	ds	2
  1578  002E                     _fuzz_turning_on:	
  1579  002E                     	ds	2
  1580  0030                     _isInitialized:	
  1581  0030                     	ds	2
  1582  0032                     _last_boost_state:	
  1583  0032                     	ds	2
  1584  0034                     _pedalState:	
  1585  0034                     	ds	4
  1586                           
  1587                           	psect	dataBANK0
  1588  0038                     __pdataBANK0:	
  1589  0038                     _boost_state:	
  1590  0038                     	ds	2
  1591  003A                     _boost_up:	
  1592  003A                     	ds	2
  1593  003C                     _debounce_limit:	
  1594  003C                     	ds	2
  1595  003E                     _feedback_state:	
  1596  003E                     	ds	2
  1597  0040                     _fuzz_state:	
  1598  0040                     	ds	2
  1599  0042                     _fuzz_up:	
  1600  0042                     	ds	2
  1601  0044                     _long_press_limit:	
  1602  0044                     	ds	2
  1603                           
  1604                           	psect	clrtext
  1605  039B                     clear_ram0:	
  1606                           ;	Called with FSR0 containing the base address, and
  1607                           ;	WREG with the size to clear
  1608                           
  1609  039B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1610  039C                     clrloop0:	
  1611  039C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1612  039D  3101               	addfsr 0,1
  1613  039E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1614  039F  2B9C               	goto	clrloop0	;have we reached the end yet?
  1615  03A0  3400               	retlw	0	;all done for this memory range, return
  1616                           
  1617                           	psect	inittext
  1618  03A1                     init_ram:	
  1619  03A1  00FE               	movwf	126
  1620  03A2                     initloop:	
  1621  03A2  0012               	moviw fsr0++
  1622  03A3  001E               	movwi fsr1++
  1623  03A4  0BFE               	decfsz	126,f
  1624  03A5  2BA2               	goto	initloop
  1625  03A6  3400               	retlw	0
  1626                           
  1627                           	psect	cstackCOMMON
  1628  0070                     __pcstackCOMMON:	
  1629  0070                     ?_ConfigureOscillator:	
  1630  0070                     ?_InitApp:	
  1631                           ; 1 bytes @ 0x0
  1632                           
  1633  0070                     ?_initFuzz:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636  0070                     ?_initBoost:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639  0070                     ?_init_adc:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642  0070                     ?_saveState:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645  0070                     ?_isr:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648  0070                     ??_isr:	
  1649                           ; 1 bytes @ 0x0
  1650                           
  1651  0070                     ?_main:	
  1652                           ; 1 bytes @ 0x0
  1653                           
  1654  0070                     ?_initStateManager:	
  1655                           ; 1 bytes @ 0x0
  1656                           
  1657                           
  1658                           ; 1 bytes @ 0x0
  1659  0070                     	ds	1
  1660  0071                     ?_FLASH_EraseBlock:	
  1661  0071                     ??_ConfigureOscillator:	
  1662                           ; 1 bytes @ 0x1
  1663                           
  1664  0071                     ??_InitApp:	
  1665                           ; 1 bytes @ 0x1
  1666                           
  1667  0071                     ??_init_adc:	
  1668                           ; 1 bytes @ 0x1
  1669                           
  1670  0071                     ?_FLASH_ReadWord:	
  1671                           ; 1 bytes @ 0x1
  1672                           
  1673  0071                     ?___lmul:	
  1674                           ; 2 bytes @ 0x1
  1675                           
  1676  0071                     FLASH_ReadWord@flashAddr:	
  1677                           ; 4 bytes @ 0x1
  1678                           
  1679  0071                     FLASH_EraseBlock@startAddr:	
  1680                           ; 2 bytes @ 0x1
  1681                           
  1682  0071                     ___lmul@multiplier:	
  1683                           ; 2 bytes @ 0x1
  1684                           
  1685                           
  1686                           ; 4 bytes @ 0x1
  1687  0071                     	ds	2
  1688  0073                     ??_FLASH_EraseBlock:	
  1689  0073                     ??_FLASH_ReadWord:	
  1690                           ; 1 bytes @ 0x3
  1691                           
  1692  0073                     FLASH_ReadWord@GIEBitValue:	
  1693                           ; 1 bytes @ 0x3
  1694                           
  1695  0073                     FLASH_EraseBlock@GIEBitValue:	
  1696                           ; 1 bytes @ 0x3
  1697                           
  1698                           
  1699                           ; 1 bytes @ 0x3
  1700  0073                     	ds	1
  1701  0074                     ?_HEF_ByteArrayWrite:	
  1702  0074                     ?_HEF_ByteArrayRead:	
  1703                           ; 1 bytes @ 0x4
  1704                           
  1705  0074                     HEF_ByteArrayWrite@byteArray:	
  1706                           ; 1 bytes @ 0x4
  1707                           
  1708  0074                     HEF_ByteArrayRead@block:	
  1709                           ; 1 bytes @ 0x4
  1710                           
  1711                           
  1712                           ; 1 bytes @ 0x4
  1713  0074                     	ds	1
  1714  0075                     HEF_ByteArrayWrite@count:	
  1715  0075                     HEF_ByteArrayRead@count:	
  1716                           ; 1 bytes @ 0x5
  1717                           
  1718  0075                     ___lmul@multiplicand:	
  1719                           ; 1 bytes @ 0x5
  1720                           
  1721                           
  1722                           ; 4 bytes @ 0x5
  1723  0075                     	ds	1
  1724  0076                     ??_HEF_ByteArrayWrite:	
  1725  0076                     ??_HEF_ByteArrayRead:	
  1726                           ; 1 bytes @ 0x6
  1727                           
  1728                           
  1729                           ; 1 bytes @ 0x6
  1730  0076                     	ds	2
  1731  0078                     HEF_ByteArrayWrite@GIEBitValue:	
  1732  0078                     HEF_ByteArrayRead@wordAdd:	
  1733                           ; 1 bytes @ 0x8
  1734                           
  1735                           
  1736                           ; 2 bytes @ 0x8
  1737  0078                     	ds	1
  1738  0079                     ??___lmul:	
  1739  0079                     HEF_ByteArrayWrite@block:	
  1740                           ; 1 bytes @ 0x9
  1741                           
  1742  0079                     ___lmul@product:	
  1743                           ; 1 bytes @ 0x9
  1744                           
  1745                           
  1746                           ; 4 bytes @ 0x9
  1747  0079                     	ds	1
  1748  007A                     HEF_ByteArrayRead@bArray:	
  1749  007A                     HEF_ByteArrayWrite@blockAddr:	
  1750                           ; 1 bytes @ 0xA
  1751                           
  1752                           
  1753                           ; 2 bytes @ 0xA
  1754  007A                     	ds	1
  1755  007B                     ??_initStateManager:	
  1756                           
  1757                           ; 1 bytes @ 0xB
  1758  007B                     	ds	1
  1759  007C                     saveState@r:	
  1760                           
  1761                           ; 1 bytes @ 0xC
  1762  007C                     	ds	1
  1763  007D                     ??_initFuzz:	
  1764  007D                     ??_initBoost:	
  1765                           ; 1 bytes @ 0xD
  1766                           
  1767  007D                     ??_setFuzzState:	
  1768                           ; 1 bytes @ 0xD
  1769                           
  1770  007D                     ??_getFuzzState:	
  1771                           ; 1 bytes @ 0xD
  1772                           
  1773  007D                     ??_setFeedbackState:	
  1774                           ; 1 bytes @ 0xD
  1775                           
  1776  007D                     ??_updateFuzzState:	
  1777                           ; 1 bytes @ 0xD
  1778                           
  1779  007D                     ??_setBoostState:	
  1780                           ; 1 bytes @ 0xD
  1781                           
  1782  007D                     ??_getBoostState:	
  1783                           ; 1 bytes @ 0xD
  1784                           
  1785  007D                     ??_updateBoostState:	
  1786                           ; 1 bytes @ 0xD
  1787                           
  1788  007D                     ??_main:	
  1789                           ; 1 bytes @ 0xD
  1790                           
  1791  007D                     ??_wait_ms:	
  1792                           ; 1 bytes @ 0xD
  1793                           
  1794                           
  1795                           	psect	cstackBANK0
  1796  0046                     __pcstackBANK0:	
  1797                           ; 1 bytes @ 0xD
  1798                           
  1799  0046                     ??_saveState:	
  1800  0046                     ?_wait_ms:	
  1801                           ; 1 bytes @ 0x0
  1802                           
  1803  0046                     initStateManager@r:	
  1804                           ; 1 bytes @ 0x0
  1805                           
  1806  0046                     wait_ms@time:	
  1807                           ; 1 bytes @ 0x0
  1808                           
  1809                           
  1810                           ; 2 bytes @ 0x0
  1811  0046                     	ds	1
  1812  0047                     ?_getFuzzState:	
  1813  0047                     ?_getBoostState:	
  1814                           ; 2 bytes @ 0x1
  1815                           
  1816                           
  1817                           ; 2 bytes @ 0x1
  1818  0047                     	ds	1
  1819  0048                     ?_setFeedbackState:	
  1820  0048                     setFeedbackState@f_state:	
  1821                           ; 1 bytes @ 0x2
  1822                           
  1823                           
  1824                           ; 2 bytes @ 0x2
  1825  0048                     	ds	1
  1826  0049                     ?_updateFuzzState:	
  1827  0049                     ?_updateBoostState:	
  1828                           ; 1 bytes @ 0x3
  1829                           
  1830  0049                     updateFuzzState@state:	
  1831                           ; 1 bytes @ 0x3
  1832                           
  1833  0049                     updateBoostState@state:	
  1834                           ; 2 bytes @ 0x3
  1835                           
  1836                           
  1837                           ; 2 bytes @ 0x3
  1838  0049                     	ds	2
  1839  004B                     ?_setFuzzState:	
  1840  004B                     ?_setBoostState:	
  1841                           ; 1 bytes @ 0x5
  1842                           
  1843  004B                     setFuzzState@f_state:	
  1844                           ; 1 bytes @ 0x5
  1845                           
  1846  004B                     setBoostState@f_state:	
  1847                           ; 2 bytes @ 0x5
  1848                           
  1849                           
  1850                           ; 2 bytes @ 0x5
  1851  004B                     	ds	2
  1852  004D                     ?_updateFuzz:	
  1853  004D                     ?_updateBoost:	
  1854                           ; 1 bytes @ 0x7
  1855                           
  1856  004D                     updateFuzz@debounce_limit:	
  1857                           ; 1 bytes @ 0x7
  1858                           
  1859  004D                     initBoost@i:	
  1860                           ; 2 bytes @ 0x7
  1861                           
  1862  004D                     updateBoost@debounce_limit:	
  1863                           ; 2 bytes @ 0x7
  1864                           
  1865                           
  1866                           ; 2 bytes @ 0x7
  1867  004D                     	ds	2
  1868  004F                     ??_updateFuzz:	
  1869  004F                     ??_updateBoost:	
  1870                           ; 1 bytes @ 0x9
  1871                           
  1872                           
  1873                           ; 1 bytes @ 0x9
  1874  004F                     	ds	1
  1875  0050                     updateFuzz@fb_state:	
  1876                           
  1877                           ; 2 bytes @ 0xA
  1878  0050                     	ds	2
  1879                           
  1880                           	psect	maintext
  1881  0310                     __pmaintext:	
  1882 ;;
  1883 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1884 ;;
  1885 ;; *************** function _main *****************
  1886 ;; Defined at:
  1887 ;;		line 28 in file "main.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;		None
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;		None
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : B1F/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMMON   BANK0   BANK1
  1901 ;;      Params:         0       0       0
  1902 ;;      Locals:         0       0       0
  1903 ;;      Temps:          0       0       0
  1904 ;;      Totals:         0       0       0
  1905 ;;Total ram usage:        0 bytes
  1906 ;; Hardware stack levels required when called:    7
  1907 ;; This function calls:
  1908 ;;		_ConfigureOscillator
  1909 ;;		_InitApp
  1910 ;;		_initBoost
  1911 ;;		_initFuzz
  1912 ;;		_updateBoost
  1913 ;;		_updateFuzz
  1914 ;; This function is called by:
  1915 ;;		Startup code after reset
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           
  1920                           ;psect for function _main
  1921  0310                     _main:	
  1922                           
  1923                           ;main.c: 29: ConfigureOscillator();
  1924                           
  1925                           ;incstack = 0
  1926                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1927  0310  23A7               	fcall	_ConfigureOscillator
  1928                           
  1929                           ;main.c: 30: InitApp();
  1930  0311  22FB               	fcall	_InitApp
  1931                           
  1932                           ;main.c: 41: initFuzz();
  1933  0312  2321               	fcall	_initFuzz
  1934                           
  1935                           ;main.c: 42: initBoost();
  1936  0313  2342               	fcall	_initBoost
  1937  0314                     l1590:	
  1938                           ;main.c: 52: while (1) {
  1939                           
  1940                           
  1941                           ;main.c: 53: updateFuzz(debounce_limit);
  1942  0314  0020               	movlb	0	; select bank0
  1943  0315  083D               	movf	_debounce_limit+1,w
  1944  0316  00CE               	movwf	updateFuzz@debounce_limit+1
  1945  0317  083C               	movf	_debounce_limit,w
  1946  0318  00CD               	movwf	updateFuzz@debounce_limit
  1947  0319  2021               	fcall	_updateFuzz
  1948                           
  1949                           ;main.c: 54: updateBoost(debounce_limit);
  1950  031A  0020               	movlb	0	; select bank0
  1951  031B  083D               	movf	_debounce_limit+1,w
  1952  031C  00CE               	movwf	updateBoost@debounce_limit+1
  1953  031D  083C               	movf	_debounce_limit,w
  1954  031E  00CD               	movwf	updateBoost@debounce_limit
  1955  031F  20C8               	fcall	_updateBoost
  1956  0320  2B14               	goto	l1590
  1957  0321                     __end_of_main:	
  1958                           
  1959                           	psect	text1
  1960  0021                     __ptext1:	
  1961 ;; *************** function _updateFuzz *****************
  1962 ;; Defined at:
  1963 ;;		line 40 in file "mcc_generated_files/fuzz.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;  debounce_lim    2    7[BANK0 ] int 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  fb_state        2   10[BANK0 ] int 
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      void 
  1970 ;; Registers used:
  1971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1
  1977 ;;      Params:         0       2       0
  1978 ;;      Locals:         0       2       0
  1979 ;;      Temps:          0       1       0
  1980 ;;      Totals:         0       5       0
  1981 ;;Total ram usage:        5 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    6
  1984 ;; This function calls:
  1985 ;;		_setFeedbackState
  1986 ;;		_setFuzzState
  1987 ;; This function is called by:
  1988 ;;		_main
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           
  1993                           ;psect for function _updateFuzz
  1994  0021                     _updateFuzz:	
  1995                           
  1996                           ;fuzz.c: 47: if (PORTAbits.RA4 == 0) {
  1997                           
  1998                           ;incstack = 0
  1999                           ; Regs used in _updateFuzz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2000  0021  0020               	movlb	0	; select bank0
  2001  0022  1A0C               	btfsc	12,4	;volatile
  2002  0023  2834               	goto	l1432
  2003                           
  2004                           ;fuzz.c: 48: if (fuzz_pressed > 0) {
  2005  0024  082B               	movf	_fuzz_pressed+1,w
  2006  0025  3A80               	xorlw	128
  2007  0026  00CF               	movwf	??_updateFuzz
  2008  0027  3080               	movlw	128
  2009  0028  024F               	subwf	??_updateFuzz,w
  2010  0029  1D03               	skipz
  2011  002A  282D               	goto	u915
  2012  002B  3001               	movlw	1
  2013  002C  022A               	subwf	_fuzz_pressed,w
  2014  002D                     u915:	
  2015  002D  1C03               	skipc
  2016  002E  2845               	goto	l1436
  2017                           
  2018                           ;fuzz.c: 49: fuzz_pressed--;
  2019  002F  30FF               	movlw	255
  2020  0030  0020               	movlb	0	; select bank0
  2021  0031  07AA               	addwf	_fuzz_pressed,f
  2022  0032  30FF               	movlw	255
  2023  0033  2844               	goto	L1
  2024  0034                     l1432:	
  2025                           ;fuzz.c: 50: }
  2026                           ;fuzz.c: 51: } else if (fuzz_pressed < debounce_limit) {
  2027                           
  2028  0034  082B               	movf	_fuzz_pressed+1,w
  2029  0035  3A80               	xorlw	128
  2030  0036  00CF               	movwf	??_updateFuzz
  2031  0037  084E               	movf	updateFuzz@debounce_limit+1,w
  2032  0038  3A80               	xorlw	128
  2033  0039  024F               	subwf	??_updateFuzz,w
  2034  003A  1D03               	skipz
  2035  003B  283E               	goto	u925
  2036  003C  084D               	movf	updateFuzz@debounce_limit,w
  2037  003D  022A               	subwf	_fuzz_pressed,w
  2038  003E                     u925:	
  2039  003E  1803               	skipnc
  2040  003F  2845               	goto	l1436
  2041                           
  2042                           ;fuzz.c: 52: fuzz_pressed++;
  2043  0040  3001               	movlw	1
  2044  0041  0020               	movlb	0	; select bank0
  2045  0042  07AA               	addwf	_fuzz_pressed,f
  2046  0043  3000               	movlw	0
  2047  0044                     L1:	
  2048  0044  3DAB               	addwfc	_fuzz_pressed+1,f
  2049  0045                     l1436:	
  2050                           
  2051                           ;fuzz.c: 54: }
  2052                           ;fuzz.c: 60: if (fuzz_pressed == 0) {
  2053  0045  0020               	movlb	0	; select bank0
  2054  0046  082A               	movf	_fuzz_pressed,w
  2055  0047  042B               	iorwf	_fuzz_pressed+1,w
  2056  0048  1D03               	btfss	3,2
  2057  0049  288F               	goto	l1466
  2058                           
  2059                           ;fuzz.c: 62: fuzz_down++;
  2060  004A  3001               	movlw	1
  2061  004B  07A8               	addwf	_fuzz_down,f
  2062  004C  3000               	movlw	0
  2063  004D  3DA9               	addwfc	_fuzz_down+1,f
  2064                           
  2065                           ;fuzz.c: 63: if (fuzz_state == 1) {
  2066  004E  0340               	decf	_fuzz_state,w
  2067  004F  0441               	iorwf	_fuzz_state+1,w
  2068  0050  1D03               	btfss	3,2
  2069  0051  287C               	goto	l1456
  2070                           
  2071                           ;fuzz.c: 64: if (fuzz_up == 1) {
  2072  0052  0342               	decf	_fuzz_up,w
  2073  0053  0443               	iorwf	_fuzz_up+1,w
  2074  0054  1D03               	btfss	3,2
  2075  0055  285A               	goto	l160
  2076                           
  2077                           ;fuzz.c: 65: fuzz_toggle = 1;
  2078  0056  3001               	movlw	1
  2079  0057  00AC               	movwf	_fuzz_toggle
  2080  0058  3000               	movlw	0
  2081  0059  00AD               	movwf	_fuzz_toggle+1
  2082  005A                     l160:	
  2083                           
  2084                           ;fuzz.c: 66: }
  2085                           ;fuzz.c: 68: if (fuzz_down >= long_press_limit && feedback_state == 0 && fuzz_turning_on
      +                           == 0) {
  2086  005A  0829               	movf	_fuzz_down+1,w
  2087  005B  3A80               	xorlw	128
  2088  005C  00CF               	movwf	??_updateFuzz
  2089  005D  0845               	movf	_long_press_limit+1,w
  2090  005E  3A80               	xorlw	128
  2091  005F  024F               	subwf	??_updateFuzz,w
  2092  0060  1D03               	skipz
  2093  0061  2864               	goto	u965
  2094  0062  0844               	movf	_long_press_limit,w
  2095  0063  0228               	subwf	_fuzz_down,w
  2096  0064                     u965:	
  2097  0064  1C03               	skipc
  2098  0065  288B               	goto	l1464
  2099  0066  0020               	movlb	0	; select bank0
  2100  0067  083E               	movf	_feedback_state,w
  2101  0068  043F               	iorwf	_feedback_state+1,w
  2102  0069  1D03               	btfss	3,2
  2103  006A  288B               	goto	l1464
  2104  006B  082E               	movf	_fuzz_turning_on,w
  2105  006C  042F               	iorwf	_fuzz_turning_on+1,w
  2106  006D  1D03               	btfss	3,2
  2107  006E  288B               	goto	l1464
  2108                           
  2109                           ;fuzz.c: 70: fuzz_down = long_press_limit;
  2110  006F  0845               	movf	_long_press_limit+1,w
  2111  0070  00A9               	movwf	_fuzz_down+1
  2112  0071  0844               	movf	_long_press_limit,w
  2113  0072  00A8               	movwf	_fuzz_down
  2114                           
  2115                           ;fuzz.c: 71: LATAbits.LATA2 = 0;
  2116  0073  0022               	movlb	2	; select bank2
  2117  0074  110C               	bcf	12,2	;volatile
  2118                           
  2119                           ;fuzz.c: 72: setFeedbackState(1);
  2120  0075  3001               	movlw	1
  2121  0076  0020               	movlb	0	; select bank0
  2122  0077  00C8               	movwf	setFeedbackState@f_state
  2123  0078  3000               	movlw	0
  2124  0079  00C9               	movwf	setFeedbackState@f_state+1
  2125  007A  21EA               	fcall	_setFeedbackState
  2126                           
  2127                           ;fuzz.c: 73: }
  2128                           ;fuzz.c: 74: } else {
  2129  007B  288B               	goto	l1464
  2130  007C                     l1456:	
  2131                           
  2132                           ;fuzz.c: 76: fuzz_turning_on = 1;
  2133  007C  3001               	movlw	1
  2134  007D  0020               	movlb	0	; select bank0
  2135  007E  00AE               	movwf	_fuzz_turning_on
  2136  007F  3000               	movlw	0
  2137  0080  00AF               	movwf	_fuzz_turning_on+1
  2138                           
  2139                           ;fuzz.c: 77: fuzz_toggle = 0;
  2140  0081  01AC               	clrf	_fuzz_toggle
  2141  0082  01AD               	clrf	_fuzz_toggle+1
  2142                           
  2143                           ;fuzz.c: 78: setFuzzState(1);
  2144  0083  3001               	movlw	1
  2145  0084  00CB               	movwf	setFuzzState@f_state
  2146  0085  3000               	movlw	0
  2147  0086  00CC               	movwf	setFuzzState@f_state+1
  2148  0087  2176               	fcall	_setFuzzState
  2149                           
  2150                           ;fuzz.c: 79: feedback_state = 0;
  2151  0088  0020               	movlb	0	; select bank0
  2152  0089  01BE               	clrf	_feedback_state
  2153  008A  01BF               	clrf	_feedback_state+1
  2154  008B                     l1464:	
  2155                           
  2156                           ;fuzz.c: 80: }
  2157                           ;fuzz.c: 83: fuzz_up = 0;
  2158  008B  0020               	movlb	0	; select bank0
  2159  008C  01C2               	clrf	_fuzz_up
  2160  008D  01C3               	clrf	_fuzz_up+1
  2161                           
  2162                           ;fuzz.c: 84: } else if (fuzz_pressed >= debounce_limit) {
  2163  008E  0008               	return
  2164  008F                     l1466:	
  2165  008F  082B               	movf	_fuzz_pressed+1,w
  2166  0090  3A80               	xorlw	128
  2167  0091  00CF               	movwf	??_updateFuzz
  2168  0092  084E               	movf	updateFuzz@debounce_limit+1,w
  2169  0093  3A80               	xorlw	128
  2170  0094  024F               	subwf	??_updateFuzz,w
  2171  0095  1D03               	skipz
  2172  0096  2899               	goto	u995
  2173  0097  084D               	movf	updateFuzz@debounce_limit,w
  2174  0098  022A               	subwf	_fuzz_pressed,w
  2175  0099                     u995:	
  2176  0099  1C03               	skipc
  2177  009A  0008               	return
  2178                           
  2179                           ;fuzz.c: 85: int fb_state = feedback_state;
  2180  009B  0020               	movlb	0	; select bank0
  2181  009C  083F               	movf	_feedback_state+1,w
  2182  009D  00D1               	movwf	updateFuzz@fb_state+1
  2183  009E  083E               	movf	_feedback_state,w
  2184  009F  00D0               	movwf	updateFuzz@fb_state
  2185                           
  2186                           ;fuzz.c: 86: if (fuzz_toggle == 1 && fb_state == 0) {
  2187  00A0  032C               	decf	_fuzz_toggle,w
  2188  00A1  042D               	iorwf	_fuzz_toggle+1,w
  2189  00A2  1D03               	btfss	3,2
  2190  00A3  28AC               	goto	l1476
  2191  00A4  0850               	movf	updateFuzz@fb_state,w
  2192  00A5  0451               	iorwf	updateFuzz@fb_state+1,w
  2193  00A6  1D03               	btfss	3,2
  2194  00A7  28AC               	goto	l1476
  2195                           
  2196                           ;fuzz.c: 87: setFuzzState(0);
  2197  00A8  3000               	movlw	0
  2198  00A9  00CB               	movwf	setFuzzState@f_state
  2199  00AA  00CC               	movwf	setFuzzState@f_state+1
  2200  00AB  2176               	fcall	_setFuzzState
  2201  00AC                     l1476:	
  2202                           
  2203                           ;fuzz.c: 88: }
  2204                           ;fuzz.c: 89: LATAbits.LATA2 = fuzz_state;
  2205  00AC  0020               	movlb	0	; select bank0
  2206  00AD  0C40               	rrf	_fuzz_state,w
  2207  00AE  0022               	movlb	2	; select bank2
  2208  00AF  1C03               	skipc
  2209  00B0  110C               	bcf	12,2	;volatile
  2210  00B1  1803               	skipnc
  2211  00B2  150C               	bsf	12,2	;volatile
  2212                           
  2213                           ;fuzz.c: 91: setFeedbackState(0);
  2214  00B3  3000               	movlw	0
  2215  00B4  0020               	movlb	0	; select bank0
  2216  00B5  00C8               	movwf	setFeedbackState@f_state
  2217  00B6  00C9               	movwf	setFeedbackState@f_state+1
  2218  00B7  21EA               	fcall	_setFeedbackState
  2219                           
  2220                           ;fuzz.c: 92: fuzz_turning_on = 0;
  2221  00B8  0020               	movlb	0	; select bank0
  2222  00B9  01AE               	clrf	_fuzz_turning_on
  2223  00BA  01AF               	clrf	_fuzz_turning_on+1
  2224                           
  2225                           ;fuzz.c: 93: fuzz_toggle = 0;
  2226  00BB  01AC               	clrf	_fuzz_toggle
  2227  00BC  01AD               	clrf	_fuzz_toggle+1
  2228                           
  2229                           ;fuzz.c: 94: fuzz_up = 1;
  2230  00BD  3001               	movlw	1
  2231  00BE  00C2               	movwf	_fuzz_up
  2232  00BF  3000               	movlw	0
  2233  00C0  00C3               	movwf	_fuzz_up+1
  2234                           
  2235                           ;fuzz.c: 95: fuzz_down = 0;
  2236  00C1  01A8               	clrf	_fuzz_down
  2237  00C2  01A9               	clrf	_fuzz_down+1
  2238                           
  2239                           ;fuzz.c: 96: fuzz_pressed = debounce_limit;
  2240  00C3  084E               	movf	updateFuzz@debounce_limit+1,w
  2241  00C4  00AB               	movwf	_fuzz_pressed+1
  2242  00C5  084D               	movf	updateFuzz@debounce_limit,w
  2243  00C6  00AA               	movwf	_fuzz_pressed
  2244  00C7  0008               	return
  2245  00C8                     __end_of_updateFuzz:	
  2246                           
  2247                           	psect	text2
  2248  00C8                     __ptext2:	
  2249 ;; *************** function _updateBoost *****************
  2250 ;; Defined at:
  2251 ;;		line 29 in file "mcc_generated_files/boost.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;  debounce_lim    2    7[BANK0 ] int 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;		None
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  1    wreg      void 
  2258 ;; Registers used:
  2259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMMON   BANK0   BANK1
  2265 ;;      Params:         0       2       0
  2266 ;;      Locals:         0       0       0
  2267 ;;      Temps:          0       2       0
  2268 ;;      Totals:         0       4       0
  2269 ;;Total ram usage:        4 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    6
  2272 ;; This function calls:
  2273 ;;		_setBoostState
  2274 ;; This function is called by:
  2275 ;;		_main
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           
  2280                           ;psect for function _updateBoost
  2281  00C8                     _updateBoost:	
  2282                           
  2283                           ;boost.c: 36: if (PORTAbits.RA5 == 0) {
  2284                           
  2285                           ;incstack = 0
  2286                           ; Regs used in _updateBoost: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2287  00C8  0020               	movlb	0	; select bank0
  2288  00C9  1A8C               	btfsc	12,5	;volatile
  2289  00CA  28DB               	goto	l1496
  2290                           
  2291                           ;boost.c: 37: if (boost_pressed > 0) {
  2292  00CB  0827               	movf	_boost_pressed+1,w
  2293  00CC  3A80               	xorlw	128
  2294  00CD  00CF               	movwf	??_updateBoost
  2295  00CE  3080               	movlw	128
  2296  00CF  024F               	subwf	??_updateBoost,w
  2297  00D0  1D03               	skipz
  2298  00D1  28D4               	goto	u1035
  2299  00D2  3001               	movlw	1
  2300  00D3  0226               	subwf	_boost_pressed,w
  2301  00D4                     u1035:	
  2302  00D4  1C03               	skipc
  2303  00D5  28EC               	goto	l1500
  2304                           
  2305                           ;boost.c: 38: boost_pressed--;
  2306  00D6  30FF               	movlw	255
  2307  00D7  0020               	movlb	0	; select bank0
  2308  00D8  07A6               	addwf	_boost_pressed,f
  2309  00D9  30FF               	movlw	255
  2310  00DA  28EB               	goto	L2
  2311  00DB                     l1496:	
  2312                           ;boost.c: 39: }
  2313                           ;boost.c: 40: } else if (boost_pressed < debounce_limit) {
  2314                           
  2315  00DB  0827               	movf	_boost_pressed+1,w
  2316  00DC  3A80               	xorlw	128
  2317  00DD  00CF               	movwf	??_updateBoost
  2318  00DE  084E               	movf	updateBoost@debounce_limit+1,w
  2319  00DF  3A80               	xorlw	128
  2320  00E0  024F               	subwf	??_updateBoost,w
  2321  00E1  1D03               	skipz
  2322  00E2  28E5               	goto	u1045
  2323  00E3  084D               	movf	updateBoost@debounce_limit,w
  2324  00E4  0226               	subwf	_boost_pressed,w
  2325  00E5                     u1045:	
  2326  00E5  1803               	skipnc
  2327  00E6  28EC               	goto	l1500
  2328                           
  2329                           ;boost.c: 41: boost_pressed++;
  2330  00E7  3001               	movlw	1
  2331  00E8  0020               	movlb	0	; select bank0
  2332  00E9  07A6               	addwf	_boost_pressed,f
  2333  00EA  3000               	movlw	0
  2334  00EB                     L2:	
  2335  00EB  3DA7               	addwfc	_boost_pressed+1,f
  2336  00EC                     l1500:	
  2337                           
  2338                           ;boost.c: 42: }
  2339                           ;boost.c: 48: if (boost_pressed == 0) {
  2340  00EC  0020               	movlb	0	; select bank0
  2341  00ED  0826               	movf	_boost_pressed,w
  2342  00EE  0427               	iorwf	_boost_pressed+1,w
  2343  00EF  1D03               	btfss	3,2
  2344  00F0  290B               	goto	l1510
  2345                           
  2346                           ;boost.c: 49: boost_down = 1;
  2347  00F1  3001               	movlw	1
  2348  00F2  00A4               	movwf	_boost_down
  2349  00F3  3000               	movlw	0
  2350  00F4  00A5               	movwf	_boost_down+1
  2351                           
  2352                           ;boost.c: 50: if (boost_up == 1) {
  2353  00F5  033A               	decf	_boost_up,w
  2354  00F6  043B               	iorwf	_boost_up+1,w
  2355  00F7  1D03               	btfss	3,2
  2356  00F8  2907               	goto	l1508
  2357                           
  2358                           ;boost.c: 51: setBoostState(!boost_state);
  2359  00F9  0838               	movf	_boost_state,w
  2360  00FA  0439               	iorwf	_boost_state+1,w
  2361  00FB  1D03               	btfss	3,2
  2362  00FC  28FF               	goto	u1070
  2363  00FD  3001               	movlw	1
  2364  00FE  2900               	goto	u1080
  2365  00FF                     u1070:	
  2366  00FF  3000               	movlw	0
  2367  0100                     u1080:	
  2368  0100  00CF               	movwf	??_updateBoost
  2369  0101  01D0               	clrf	??_updateBoost+1
  2370  0102  084F               	movf	??_updateBoost,w
  2371  0103  00CB               	movwf	setBoostState@f_state
  2372  0104  0850               	movf	??_updateBoost+1,w
  2373  0105  00CC               	movwf	setBoostState@f_state+1
  2374  0106  21B0               	fcall	_setBoostState
  2375  0107                     l1508:	
  2376                           
  2377                           ;boost.c: 52: }
  2378                           ;boost.c: 53: boost_up = 0;
  2379  0107  0020               	movlb	0	; select bank0
  2380  0108  01BA               	clrf	_boost_up
  2381  0109  01BB               	clrf	_boost_up+1
  2382                           
  2383                           ;boost.c: 54: } else if (boost_pressed >= debounce_limit) {
  2384  010A  0008               	return
  2385  010B                     l1510:	
  2386  010B  0827               	movf	_boost_pressed+1,w
  2387  010C  3A80               	xorlw	128
  2388  010D  00CF               	movwf	??_updateBoost
  2389  010E  084E               	movf	updateBoost@debounce_limit+1,w
  2390  010F  3A80               	xorlw	128
  2391  0110  024F               	subwf	??_updateBoost,w
  2392  0111  1D03               	skipz
  2393  0112  2915               	goto	u1095
  2394  0113  084D               	movf	updateBoost@debounce_limit,w
  2395  0114  0226               	subwf	_boost_pressed,w
  2396  0115                     u1095:	
  2397  0115  1C03               	skipc
  2398  0116  0008               	return
  2399                           
  2400                           ;boost.c: 55: boost_up = 1;
  2401  0117  3001               	movlw	1
  2402  0118  0020               	movlb	0	; select bank0
  2403  0119  00BA               	movwf	_boost_up
  2404  011A  3000               	movlw	0
  2405  011B  00BB               	movwf	_boost_up+1
  2406                           
  2407                           ;boost.c: 56: boost_down = 0;
  2408  011C  01A4               	clrf	_boost_down
  2409  011D  01A5               	clrf	_boost_down+1
  2410                           
  2411                           ;boost.c: 57: boost_pressed = debounce_limit;
  2412  011E  084E               	movf	updateBoost@debounce_limit+1,w
  2413  011F  00A7               	movwf	_boost_pressed+1
  2414  0120  084D               	movf	updateBoost@debounce_limit,w
  2415  0121  00A6               	movwf	_boost_pressed
  2416  0122  0008               	return
  2417  0123                     __end_of_updateBoost:	
  2418                           
  2419                           	psect	text3
  2420  0321                     __ptext3:	
  2421 ;; *************** function _initFuzz *****************
  2422 ;; Defined at:
  2423 ;;		line 28 in file "mcc_generated_files/fuzz.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;		None
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;		None
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1
  2437 ;;      Params:         0       0       0
  2438 ;;      Locals:         0       0       0
  2439 ;;      Temps:          0       0       0
  2440 ;;      Totals:         0       0       0
  2441 ;;Total ram usage:        0 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    6
  2444 ;; This function calls:
  2445 ;;		_getFuzzState
  2446 ;;		_setFeedbackState
  2447 ;;		_setFuzzState
  2448 ;; This function is called by:
  2449 ;;		_main
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           
  2454                           ;psect for function _initFuzz
  2455  0321                     _initFuzz:	
  2456                           
  2457                           ;fuzz.c: 29: setFuzzState(getFuzzState());
  2458                           
  2459                           ;incstack = 0
  2460                           ; Regs used in _initFuzz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2461  0321  2379               	fcall	_getFuzzState
  2462  0322  0020               	movlb	0	; select bank0
  2463  0323  0848               	movf	?_getFuzzState+1,w
  2464  0324  00CC               	movwf	setFuzzState@f_state+1
  2465  0325  0847               	movf	?_getFuzzState,w
  2466  0326  00CB               	movwf	setFuzzState@f_state
  2467  0327  2176               	fcall	_setFuzzState
  2468                           
  2469                           ;fuzz.c: 30: setFeedbackState(0);
  2470  0328  3000               	movlw	0
  2471  0329  0020               	movlb	0	; select bank0
  2472  032A  00C8               	movwf	setFeedbackState@f_state
  2473  032B  00C9               	movwf	setFeedbackState@f_state+1
  2474  032C  21EA               	fcall	_setFeedbackState
  2475                           
  2476                           ;fuzz.c: 33: if (LATAbits.LATA2 == 1) {
  2477  032D  0022               	movlb	2	; select bank2
  2478  032E  1D0C               	btfss	12,2	;volatile
  2479  032F  0008               	return
  2480                           
  2481                           ;fuzz.c: 35: LATCbits.LATC5 - 1;
  2482  0330  080E               	movf	14,w	;volatile
  2483  0331  0008               	return
  2484  0332                     __end_of_initFuzz:	
  2485                           
  2486                           	psect	text4
  2487  0176                     __ptext4:	
  2488 ;; *************** function _setFuzzState *****************
  2489 ;; Defined at:
  2490 ;;		line 100 in file "mcc_generated_files/fuzz.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  f_state         2    5[BANK0 ] int 
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;		None
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMMON   BANK0   BANK1
  2504 ;;      Params:         0       2       0
  2505 ;;      Locals:         0       0       0
  2506 ;;      Temps:          0       0       0
  2507 ;;      Totals:         0       2       0
  2508 ;;Total ram usage:        2 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    5
  2511 ;; This function calls:
  2512 ;;		_updateFuzzState
  2513 ;;		_wait_ms
  2514 ;; This function is called by:
  2515 ;;		_initFuzz
  2516 ;;		_updateFuzz
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           
  2521                           ;psect for function _setFuzzState
  2522  0176                     _setFuzzState:	
  2523                           
  2524                           ;fuzz.c: 101: if (fuzz_state == f_state) {return;}
  2525                           
  2526                           ;incstack = 0
  2527                           ; Regs used in _setFuzzState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2528  0176  0020               	movlb	0	; select bank0
  2529  0177  084C               	movf	setFuzzState@f_state+1,w
  2530  0178  0641               	xorwf	_fuzz_state+1,w
  2531  0179  1D03               	skipz
  2532  017A  297D               	goto	u795
  2533  017B  084B               	movf	setFuzzState@f_state,w
  2534  017C  0640               	xorwf	_fuzz_state,w
  2535  017D                     u795:	
  2536  017D  1903               	btfsc	3,2
  2537  017E  0008               	return
  2538                           
  2539                           ;fuzz.c: 102: fuzz_state = f_state;
  2540  017F  084C               	movf	setFuzzState@f_state+1,w
  2541  0180  00C1               	movwf	_fuzz_state+1
  2542  0181  084B               	movf	setFuzzState@f_state,w
  2543  0182  00C0               	movwf	_fuzz_state
  2544                           
  2545                           ;fuzz.c: 103: LATAbits.LATA2 = f_state;
  2546  0183  0C4B               	rrf	setFuzzState@f_state,w
  2547  0184  0022               	movlb	2	; select bank2
  2548  0185  1C03               	skipc
  2549  0186  110C               	bcf	12,2	;volatile
  2550  0187  1803               	skipnc
  2551  0188  150C               	bsf	12,2	;volatile
  2552                           
  2553                           ;fuzz.c: 104: LATCbits.LATC2 = f_state;
  2554  0189  0020               	movlb	0	; select bank0
  2555  018A  0C4B               	rrf	setFuzzState@f_state,w
  2556  018B  0022               	movlb	2	; select bank2
  2557  018C  1C03               	skipc
  2558  018D  110E               	bcf	14,2	;volatile
  2559  018E  1803               	skipnc
  2560  018F  150E               	bsf	14,2	;volatile
  2561                           
  2562                           ;fuzz.c: 105: LATCbits.LATC1 = !f_state;
  2563  0190  0020               	movlb	0	; select bank0
  2564  0191  084B               	movf	setFuzzState@f_state,w
  2565  0192  044C               	iorwf	setFuzzState@f_state+1,w
  2566  0193  1D03               	btfss	3,2
  2567  0194  2998               	goto	u800
  2568  0195  0022               	movlb	2	; select bank2
  2569  0196  148E               	bsf	14,1	;volatile
  2570  0197  299A               	goto	l1344
  2571  0198                     u800:	
  2572  0198  0022               	movlb	2	; select bank2
  2573  0199  108E               	bcf	14,1	;volatile
  2574  019A                     l1344:	
  2575                           
  2576                           ;fuzz.c: 107: wait_ms(20);
  2577  019A  3014               	movlw	20
  2578  019B  0020               	movlb	0	; select bank0
  2579  019C  00C6               	movwf	wait_ms@time
  2580  019D  3000               	movlw	0
  2581  019E  00C7               	movwf	wait_ms@time+1
  2582  019F  2281               	fcall	_wait_ms
  2583                           
  2584                           ;fuzz.c: 109: LATCbits.LATC2 = 0;
  2585  01A0  0022               	movlb	2	; select bank2
  2586  01A1  110E               	bcf	14,2	;volatile
  2587                           
  2588                           ;fuzz.c: 110: LATCbits.LATC1 = 0;
  2589  01A2  108E               	bcf	14,1	;volatile
  2590                           
  2591                           ;fuzz.c: 112: updateFuzzState(fuzz_state);
  2592  01A3  0020               	movlb	0	; select bank0
  2593  01A4  0841               	movf	_fuzz_state+1,w
  2594  01A5  00CA               	movwf	updateFuzzState@state+1
  2595  01A6  0840               	movf	_fuzz_state,w
  2596  01A7  00C9               	movwf	updateFuzzState@state
  2597  01A8  235F               	fcall	_updateFuzzState
  2598                           
  2599                           ;fuzz.c: 113: wait_ms(20);
  2600  01A9  3014               	movlw	20
  2601  01AA  0020               	movlb	0	; select bank0
  2602  01AB  00C6               	movwf	wait_ms@time
  2603  01AC  3000               	movlw	0
  2604  01AD  00C7               	movwf	wait_ms@time+1
  2605  01AE  2281               	fcall	_wait_ms
  2606  01AF  0008               	return
  2607  01B0                     __end_of_setFuzzState:	
  2608                           
  2609                           	psect	text5
  2610  035F                     __ptext5:	
  2611 ;; *************** function _updateFuzzState *****************
  2612 ;; Defined at:
  2613 ;;		line 59 in file "state_manager.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  state           2    3[BANK0 ] int 
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;		None
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  1    wreg      void 
  2620 ;; Registers used:
  2621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMMON   BANK0   BANK1
  2627 ;;      Params:         0       2       0
  2628 ;;      Locals:         0       0       0
  2629 ;;      Temps:          0       0       0
  2630 ;;      Totals:         0       2       0
  2631 ;;Total ram usage:        2 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    4
  2634 ;; This function calls:
  2635 ;;		_saveState
  2636 ;; This function is called by:
  2637 ;;		_setFuzzState
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           
  2642                           ;psect for function _updateFuzzState
  2643  035F                     _updateFuzzState:	
  2644                           
  2645                           ;state_manager.c: 60: if (state != 1) {state = 0;}
  2646                           
  2647                           ;incstack = 0
  2648                           ; Regs used in _updateFuzzState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2649  035F  0020               	movlb	0	; select bank0
  2650  0360  0349               	decf	updateFuzzState@state,w
  2651  0361  044A               	iorwf	updateFuzzState@state+1,w
  2652  0362  1903               	btfsc	3,2
  2653  0363  2B66               	goto	l1294
  2654  0364  01C9               	clrf	updateFuzzState@state
  2655  0365  01CA               	clrf	updateFuzzState@state+1
  2656  0366                     l1294:	
  2657                           
  2658                           ;state_manager.c: 62: pedalState.fuzz = state;
  2659  0366  084A               	movf	updateFuzzState@state+1,w
  2660  0367  00B5               	movwf	_pedalState+1
  2661  0368  0849               	movf	updateFuzzState@state,w
  2662  0369  00B4               	movwf	_pedalState
  2663                           
  2664                           ;state_manager.c: 63: saveState();
  2665  036A  2332               	fcall	_saveState
  2666  036B  0008               	return
  2667  036C                     __end_of_updateFuzzState:	
  2668                           
  2669                           	psect	text6
  2670  01EA                     __ptext6:	
  2671 ;; *************** function _setFeedbackState *****************
  2672 ;; Defined at:
  2673 ;;		line 116 in file "mcc_generated_files/fuzz.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;  f_state         2    2[BANK0 ] int 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0, pclath, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMMON   BANK0   BANK1
  2687 ;;      Params:         0       2       0
  2688 ;;      Locals:         0       0       0
  2689 ;;      Temps:          0       0       0
  2690 ;;      Totals:         0       2       0
  2691 ;;Total ram usage:        2 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    3
  2694 ;; This function calls:
  2695 ;;		_wait_ms
  2696 ;; This function is called by:
  2697 ;;		_initFuzz
  2698 ;;		_updateFuzz
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           
  2703                           ;psect for function _setFeedbackState
  2704  01EA                     _setFeedbackState:	
  2705                           
  2706                           ;fuzz.c: 117: if (feedback_state == f_state) {return;}
  2707                           
  2708                           ;incstack = 0
  2709                           ; Regs used in _setFeedbackState: [wreg+status,2+status,0+pclath+cstack]
  2710  01EA  0020               	movlb	0	; select bank0
  2711  01EB  0849               	movf	setFeedbackState@f_state+1,w
  2712  01EC  063F               	xorwf	_feedback_state+1,w
  2713  01ED  1D03               	skipz
  2714  01EE  29F1               	goto	u825
  2715  01EF  0848               	movf	setFeedbackState@f_state,w
  2716  01F0  063E               	xorwf	_feedback_state,w
  2717  01F1                     u825:	
  2718  01F1  1903               	btfsc	3,2
  2719  01F2  0008               	return
  2720                           
  2721                           ;fuzz.c: 118: feedback_state = f_state;
  2722  01F3  0849               	movf	setFeedbackState@f_state+1,w
  2723  01F4  00BF               	movwf	_feedback_state+1
  2724  01F5  0848               	movf	setFeedbackState@f_state,w
  2725  01F6  00BE               	movwf	_feedback_state
  2726                           
  2727                           ;fuzz.c: 119: LATCbits.LATC3 = f_state;
  2728  01F7  0C48               	rrf	setFeedbackState@f_state,w
  2729  01F8  0022               	movlb	2	; select bank2
  2730  01F9  1C03               	skipc
  2731  01FA  118E               	bcf	14,3	;volatile
  2732  01FB  1803               	skipnc
  2733  01FC  158E               	bsf	14,3	;volatile
  2734                           
  2735                           ;fuzz.c: 120: LATAbits.LATA0 = f_state;
  2736  01FD  0020               	movlb	0	; select bank0
  2737  01FE  0C48               	rrf	setFeedbackState@f_state,w
  2738  01FF  0022               	movlb	2	; select bank2
  2739  0200  1C03               	skipc
  2740  0201  100C               	bcf	12,0	;volatile
  2741  0202  1803               	skipnc
  2742  0203  140C               	bsf	12,0	;volatile
  2743                           
  2744                           ;fuzz.c: 121: LATAbits.LATA1 = !f_state;
  2745  0204  0020               	movlb	0	; select bank0
  2746  0205  0848               	movf	setFeedbackState@f_state,w
  2747  0206  0449               	iorwf	setFeedbackState@f_state+1,w
  2748  0207  1D03               	btfss	3,2
  2749  0208  2A0C               	goto	u830
  2750  0209  0022               	movlb	2	; select bank2
  2751  020A  148C               	bsf	12,1	;volatile
  2752  020B  2A0E               	goto	l1366
  2753  020C                     u830:	
  2754  020C  0022               	movlb	2	; select bank2
  2755  020D  108C               	bcf	12,1	;volatile
  2756  020E                     l1366:	
  2757                           
  2758                           ;fuzz.c: 123: wait_ms(20);
  2759  020E  3014               	movlw	20
  2760  020F  0020               	movlb	0	; select bank0
  2761  0210  00C6               	movwf	wait_ms@time
  2762  0211  3000               	movlw	0
  2763  0212  00C7               	movwf	wait_ms@time+1
  2764  0213  2281               	fcall	_wait_ms
  2765                           
  2766                           ;fuzz.c: 125: LATAbits.LATA0 = 0;
  2767  0214  0022               	movlb	2	; select bank2
  2768  0215  100C               	bcf	12,0	;volatile
  2769                           
  2770                           ;fuzz.c: 126: LATAbits.LATA1 = 0;
  2771  0216  108C               	bcf	12,1	;volatile
  2772                           
  2773                           ;fuzz.c: 129: wait_ms(20);
  2774  0217  3014               	movlw	20
  2775  0218  0020               	movlb	0	; select bank0
  2776  0219  00C6               	movwf	wait_ms@time
  2777  021A  3000               	movlw	0
  2778  021B  00C7               	movwf	wait_ms@time+1
  2779  021C  2281               	fcall	_wait_ms
  2780  021D  0008               	return
  2781  021E                     __end_of_setFeedbackState:	
  2782                           
  2783                           	psect	text7
  2784  0379                     __ptext7:	
  2785 ;; *************** function _getFuzzState *****************
  2786 ;; Defined at:
  2787 ;;		line 42 in file "state_manager.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;		None
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;		None
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  2    1[BANK0 ] int 
  2794 ;; Registers used:
  2795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMMON   BANK0   BANK1
  2801 ;;      Params:         0       2       0
  2802 ;;      Locals:         0       0       0
  2803 ;;      Temps:          0       0       0
  2804 ;;      Totals:         0       2       0
  2805 ;;Total ram usage:        2 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    4
  2808 ;; This function calls:
  2809 ;;		_initStateManager
  2810 ;; This function is called by:
  2811 ;;		_initFuzz
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           
  2816                           ;psect for function _getFuzzState
  2817  0379                     _getFuzzState:	
  2818                           
  2819                           ;state_manager.c: 43: if (!isInitialized) {
  2820                           
  2821                           ;incstack = 0
  2822                           ; Regs used in _getFuzzState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2823  0379  0020               	movlb	0	; select bank0
  2824  037A  0830               	movf	_isInitialized,w
  2825  037B  0431               	iorwf	_isInitialized+1,w
  2826  037C  1D03               	btfss	3,2
  2827  037D  2B7F               	goto	l1328
  2828                           
  2829                           ;state_manager.c: 44: initStateManager();
  2830  037E  22A9               	fcall	_initStateManager
  2831  037F                     l1328:	
  2832                           
  2833                           ;state_manager.c: 45: }
  2834                           ;state_manager.c: 46: return pedalState.fuzz;
  2835  037F  0020               	movlb	0	; select bank0
  2836  0380  0835               	movf	_pedalState+1,w
  2837  0381  00C8               	movwf	?_getFuzzState+1
  2838  0382  0834               	movf	_pedalState,w
  2839  0383  00C7               	movwf	?_getFuzzState
  2840  0384  0008               	return
  2841  0385                     __end_of_getFuzzState:	
  2842                           
  2843                           	psect	text8
  2844  0342                     __ptext8:	
  2845 ;; *************** function _initBoost *****************
  2846 ;; Defined at:
  2847 ;;		line 23 in file "mcc_generated_files/boost.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;		None
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  i               2    7[BANK0 ] int 
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMMON   BANK0   BANK1
  2861 ;;      Params:         0       0       0
  2862 ;;      Locals:         0       2       0
  2863 ;;      Temps:          0       0       0
  2864 ;;      Totals:         0       2       0
  2865 ;;Total ram usage:        2 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    6
  2868 ;; This function calls:
  2869 ;;		_getBoostState
  2870 ;;		_setBoostState
  2871 ;; This function is called by:
  2872 ;;		_main
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           
  2877                           ;psect for function _initBoost
  2878  0342                     _initBoost:	
  2879                           
  2880                           ;boost.c: 24: setBoostState(getBoostState());
  2881                           
  2882                           ;incstack = 0
  2883                           ; Regs used in _initBoost: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2884  0342  2385               	fcall	_getBoostState
  2885  0343  0020               	movlb	0	; select bank0
  2886  0344  0848               	movf	?_getBoostState+1,w
  2887  0345  00CC               	movwf	setBoostState@f_state+1
  2888  0346  0847               	movf	?_getBoostState,w
  2889  0347  00CB               	movwf	setBoostState@f_state
  2890  0348  21B0               	fcall	_setBoostState
  2891                           
  2892                           ;boost.c: 25: int i = 0;
  2893  0349  0020               	movlb	0	; select bank0
  2894  034A  01CD               	clrf	initBoost@i
  2895  034B  01CE               	clrf	initBoost@i+1
  2896                           
  2897                           ;boost.c: 26: i++;
  2898  034C  3001               	movlw	1
  2899  034D  07CD               	addwf	initBoost@i,f
  2900  034E  3000               	movlw	0
  2901  034F  3DCE               	addwfc	initBoost@i+1,f
  2902  0350  0008               	return
  2903  0351                     __end_of_initBoost:	
  2904                           
  2905                           	psect	text9
  2906  01B0                     __ptext9:	
  2907 ;; *************** function _setBoostState *****************
  2908 ;; Defined at:
  2909 ;;		line 64 in file "mcc_generated_files/boost.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;  f_state         2    5[BANK0 ] int 
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMMON   BANK0   BANK1
  2923 ;;      Params:         0       2       0
  2924 ;;      Locals:         0       0       0
  2925 ;;      Temps:          0       0       0
  2926 ;;      Totals:         0       2       0
  2927 ;;Total ram usage:        2 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    5
  2930 ;; This function calls:
  2931 ;;		_updateBoostState
  2932 ;;		_wait_ms
  2933 ;; This function is called by:
  2934 ;;		_initBoost
  2935 ;;		_updateBoost
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           
  2940                           ;psect for function _setBoostState
  2941  01B0                     _setBoostState:	
  2942                           
  2943                           ;boost.c: 65: if (boost_state == f_state) {return;}
  2944                           
  2945                           ;incstack = 0
  2946                           ; Regs used in _setBoostState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2947  01B0  0020               	movlb	0	; select bank0
  2948  01B1  084C               	movf	setBoostState@f_state+1,w
  2949  01B2  0639               	xorwf	_boost_state+1,w
  2950  01B3  1D03               	skipz
  2951  01B4  29B7               	goto	u865
  2952  01B5  084B               	movf	setBoostState@f_state,w
  2953  01B6  0638               	xorwf	_boost_state,w
  2954  01B7                     u865:	
  2955  01B7  1903               	btfsc	3,2
  2956  01B8  0008               	return
  2957                           
  2958                           ;boost.c: 66: boost_state = f_state;
  2959  01B9  084C               	movf	setBoostState@f_state+1,w
  2960  01BA  00B9               	movwf	_boost_state+1
  2961  01BB  084B               	movf	setBoostState@f_state,w
  2962  01BC  00B8               	movwf	_boost_state
  2963                           
  2964                           ;boost.c: 67: LATCbits.LATC5 = f_state;
  2965  01BD  0C4B               	rrf	setBoostState@f_state,w
  2966  01BE  0022               	movlb	2	; select bank2
  2967  01BF  1C03               	skipc
  2968  01C0  128E               	bcf	14,5	;volatile
  2969  01C1  1803               	skipnc
  2970  01C2  168E               	bsf	14,5	;volatile
  2971                           
  2972                           ;boost.c: 68: LATCbits.LATC0 = f_state;
  2973  01C3  0020               	movlb	0	; select bank0
  2974  01C4  0C4B               	rrf	setBoostState@f_state,w
  2975  01C5  0022               	movlb	2	; select bank2
  2976  01C6  1C03               	skipc
  2977  01C7  100E               	bcf	14,0	;volatile
  2978  01C8  1803               	skipnc
  2979  01C9  140E               	bsf	14,0	;volatile
  2980                           
  2981                           ;boost.c: 69: LATCbits.LATC4 = !f_state;
  2982  01CA  0020               	movlb	0	; select bank0
  2983  01CB  084B               	movf	setBoostState@f_state,w
  2984  01CC  044C               	iorwf	setBoostState@f_state+1,w
  2985  01CD  1D03               	btfss	3,2
  2986  01CE  29D2               	goto	u870
  2987  01CF  0022               	movlb	2	; select bank2
  2988  01D0  160E               	bsf	14,4	;volatile
  2989  01D1  29D4               	goto	l1394
  2990  01D2                     u870:	
  2991  01D2  0022               	movlb	2	; select bank2
  2992  01D3  120E               	bcf	14,4	;volatile
  2993  01D4                     l1394:	
  2994                           
  2995                           ;boost.c: 71: wait_ms(20);
  2996  01D4  3014               	movlw	20
  2997  01D5  0020               	movlb	0	; select bank0
  2998  01D6  00C6               	movwf	wait_ms@time
  2999  01D7  3000               	movlw	0
  3000  01D8  00C7               	movwf	wait_ms@time+1
  3001  01D9  2281               	fcall	_wait_ms
  3002                           
  3003                           ;boost.c: 73: LATCbits.LATC0 = 0;
  3004  01DA  0022               	movlb	2	; select bank2
  3005  01DB  100E               	bcf	14,0	;volatile
  3006                           
  3007                           ;boost.c: 74: LATCbits.LATC4 = 0;
  3008  01DC  120E               	bcf	14,4	;volatile
  3009                           
  3010                           ;boost.c: 76: updateBoostState(boost_state);
  3011  01DD  0020               	movlb	0	; select bank0
  3012  01DE  0839               	movf	_boost_state+1,w
  3013  01DF  00CA               	movwf	updateBoostState@state+1
  3014  01E0  0838               	movf	_boost_state,w
  3015  01E1  00C9               	movwf	updateBoostState@state
  3016  01E2  236C               	fcall	_updateBoostState
  3017                           
  3018                           ;boost.c: 77: wait_ms(20);
  3019  01E3  3014               	movlw	20
  3020  01E4  0020               	movlb	0	; select bank0
  3021  01E5  00C6               	movwf	wait_ms@time
  3022  01E6  3000               	movlw	0
  3023  01E7  00C7               	movwf	wait_ms@time+1
  3024  01E8  2281               	fcall	_wait_ms
  3025  01E9  0008               	return
  3026  01EA                     __end_of_setBoostState:	
  3027                           
  3028                           	psect	text10
  3029  0281                     __ptext10:	
  3030 ;; *************** function _wait_ms *****************
  3031 ;; Defined at:
  3032 ;;		line 23 in file "system.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  time            2    0[BANK0 ] unsigned int 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;		None
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  1    wreg      void 
  3039 ;; Registers used:
  3040 ;;		wreg, status,2, status,0, pclath, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMMON   BANK0   BANK1
  3046 ;;      Params:         0       2       0
  3047 ;;      Locals:         0       0       0
  3048 ;;      Temps:          0       0       0
  3049 ;;      Totals:         0       2       0
  3050 ;;Total ram usage:        2 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    2
  3053 ;; This function calls:
  3054 ;;		___lmul
  3055 ;; This function is called by:
  3056 ;;		_setFuzzState
  3057 ;;		_setFeedbackState
  3058 ;;		_setBoostState
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           
  3063                           ;psect for function _wait_ms
  3064  0281                     _wait_ms:	
  3065                           
  3066                           ;system.c: 25: static long timel = 0;
  3067                           ;system.c: 26: timel = time * 1000l;
  3068                           
  3069                           ;incstack = 0
  3070                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  3071  0281  0020               	movlb	0	; select bank0
  3072  0282  0846               	movf	wait_ms@time,w
  3073  0283  00F1               	movwf	___lmul@multiplier
  3074  0284  0847               	movf	wait_ms@time+1,w
  3075  0285  00F2               	movwf	___lmul@multiplier+1
  3076  0286  01F3               	clrf	___lmul@multiplier+2
  3077  0287  01F4               	clrf	___lmul@multiplier+3
  3078  0288  3000               	movlw	0
  3079  0289  00F8               	movwf	___lmul@multiplicand+3
  3080  028A  3000               	movlw	0
  3081  028B  00F7               	movwf	___lmul@multiplicand+2
  3082  028C  3003               	movlw	3
  3083  028D  00F6               	movwf	___lmul@multiplicand+1
  3084  028E  30E8               	movlw	232
  3085  028F  00F5               	movwf	___lmul@multiplicand
  3086  0290  2252               	fcall	___lmul
  3087  0291  0874               	movf	?___lmul+3,w
  3088  0292  0020               	movlb	0	; select bank0
  3089  0293  00A3               	movwf	wait_ms@timel+3
  3090  0294  0873               	movf	?___lmul+2,w
  3091  0295  00A2               	movwf	wait_ms@timel+2
  3092  0296  0872               	movf	?___lmul+1,w
  3093  0297  00A1               	movwf	wait_ms@timel+1
  3094  0298  0871               	movf	?___lmul,w
  3095  0299  00A0               	movwf	wait_ms@timel
  3096  029A                     l73:	
  3097                           ;system.c: 27: for( ; timel; timel--);
  3098                           
  3099  029A  0823               	movf	wait_ms@timel+3,w
  3100  029B  0422               	iorwf	wait_ms@timel+2,w
  3101  029C  0421               	iorwf	wait_ms@timel+1,w
  3102  029D  0420               	iorwf	wait_ms@timel,w
  3103  029E  1903               	btfsc	3,2
  3104  029F  0008               	return
  3105  02A0  30FF               	movlw	255
  3106  02A1  07A0               	addwf	wait_ms@timel,f
  3107  02A2  30FF               	movlw	255
  3108  02A3  3DA1               	addwfc	wait_ms@timel+1,f
  3109  02A4  30FF               	movlw	255
  3110  02A5  3DA2               	addwfc	wait_ms@timel+2,f
  3111  02A6  30FF               	movlw	255
  3112  02A7  3DA3               	addwfc	wait_ms@timel+3,f
  3113  02A8  2A9A               	goto	l73
  3114  02A9                     __end_of_wait_ms:	
  3115                           
  3116                           	psect	text11
  3117  0252                     __ptext11:	
  3118 ;; *************** function ___lmul *****************
  3119 ;; Defined at:
  3120 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  multiplier      4    1[COMMON] unsigned long 
  3123 ;;  multiplicand    4    5[COMMON] unsigned long 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  product         4    9[COMMON] unsigned long 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  4    1[COMMON] unsigned long 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMMON   BANK0   BANK1
  3135 ;;      Params:         8       0       0
  3136 ;;      Locals:         4       0       0
  3137 ;;      Temps:          0       0       0
  3138 ;;      Totals:        12       0       0
  3139 ;;Total ram usage:       12 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    1
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_wait_ms
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           
  3150                           ;psect for function ___lmul
  3151  0252                     ___lmul:	
  3152                           
  3153                           ;incstack = 0
  3154                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3155  0252  3000               	movlw	0
  3156  0253  00FC               	movwf	___lmul@product+3
  3157  0254  3000               	movlw	0
  3158  0255  00FB               	movwf	___lmul@product+2
  3159  0256  3000               	movlw	0
  3160  0257  00FA               	movwf	___lmul@product+1
  3161  0258  3000               	movlw	0
  3162  0259  00F9               	movwf	___lmul@product
  3163  025A                     l1274:	
  3164  025A  1C71               	btfss	___lmul@multiplier,0
  3165  025B  2A64               	goto	l1278
  3166  025C  0875               	movf	___lmul@multiplicand,w
  3167  025D  07F9               	addwf	___lmul@product,f
  3168  025E  0876               	movf	___lmul@multiplicand+1,w
  3169  025F  3DFA               	addwfc	___lmul@product+1,f
  3170  0260  0877               	movf	___lmul@multiplicand+2,w
  3171  0261  3DFB               	addwfc	___lmul@product+2,f
  3172  0262  0878               	movf	___lmul@multiplicand+3,w
  3173  0263  3DFC               	addwfc	___lmul@product+3,f
  3174  0264                     l1278:	
  3175  0264  3001               	movlw	1
  3176  0265                     u705:	
  3177  0265  35F5               	lslf	___lmul@multiplicand,f
  3178  0266  0DF6               	rlf	___lmul@multiplicand+1,f
  3179  0267  0DF7               	rlf	___lmul@multiplicand+2,f
  3180  0268  0DF8               	rlf	___lmul@multiplicand+3,f
  3181  0269  0B89               	decfsz	9,f
  3182  026A  2A65               	goto	u705
  3183  026B  3001               	movlw	1
  3184  026C                     u715:	
  3185  026C  36F4               	lsrf	___lmul@multiplier+3,f
  3186  026D  0CF3               	rrf	___lmul@multiplier+2,f
  3187  026E  0CF2               	rrf	___lmul@multiplier+1,f
  3188  026F  0CF1               	rrf	___lmul@multiplier,f
  3189  0270  0B89               	decfsz	9,f
  3190  0271  2A6C               	goto	u715
  3191  0272  0874               	movf	___lmul@multiplier+3,w
  3192  0273  0473               	iorwf	___lmul@multiplier+2,w
  3193  0274  0472               	iorwf	___lmul@multiplier+1,w
  3194  0275  0471               	iorwf	___lmul@multiplier,w
  3195  0276  1D03               	skipz
  3196  0277  2A5A               	goto	l1274
  3197  0278  087C               	movf	___lmul@product+3,w
  3198  0279  00F4               	movwf	?___lmul+3
  3199  027A  087B               	movf	___lmul@product+2,w
  3200  027B  00F3               	movwf	?___lmul+2
  3201  027C  087A               	movf	___lmul@product+1,w
  3202  027D  00F2               	movwf	?___lmul+1
  3203  027E  0879               	movf	___lmul@product,w
  3204  027F  00F1               	movwf	?___lmul
  3205  0280  0008               	return
  3206  0281                     __end_of___lmul:	
  3207                           
  3208                           	psect	text12
  3209  036C                     __ptext12:	
  3210 ;; *************** function _updateBoostState *****************
  3211 ;; Defined at:
  3212 ;;		line 67 in file "state_manager.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;  state           2    3[BANK0 ] int 
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;		None
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  1    wreg      void 
  3219 ;; Registers used:
  3220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3221 ;; Tracked objects:
  3222 ;;		On entry : 0/0
  3223 ;;		On exit  : 0/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMMON   BANK0   BANK1
  3226 ;;      Params:         0       2       0
  3227 ;;      Locals:         0       0       0
  3228 ;;      Temps:          0       0       0
  3229 ;;      Totals:         0       2       0
  3230 ;;Total ram usage:        2 bytes
  3231 ;; Hardware stack levels used:    1
  3232 ;; Hardware stack levels required when called:    4
  3233 ;; This function calls:
  3234 ;;		_saveState
  3235 ;; This function is called by:
  3236 ;;		_setBoostState
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           
  3241                           ;psect for function _updateBoostState
  3242  036C                     _updateBoostState:	
  3243                           
  3244                           ;state_manager.c: 68: if (state != 1) {state = 0;}
  3245                           
  3246                           ;incstack = 0
  3247                           ; Regs used in _updateBoostState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3248  036C  0020               	movlb	0	; select bank0
  3249  036D  0349               	decf	updateBoostState@state,w
  3250  036E  044A               	iorwf	updateBoostState@state+1,w
  3251  036F  1903               	btfsc	3,2
  3252  0370  2B73               	goto	l1302
  3253  0371  01C9               	clrf	updateBoostState@state
  3254  0372  01CA               	clrf	updateBoostState@state+1
  3255  0373                     l1302:	
  3256                           
  3257                           ;state_manager.c: 70: pedalState.boost = state;
  3258  0373  084A               	movf	updateBoostState@state+1,w
  3259  0374  00B7               	movwf	_pedalState+3
  3260  0375  0849               	movf	updateBoostState@state,w
  3261  0376  00B6               	movwf	_pedalState+2
  3262                           
  3263                           ;state_manager.c: 71: saveState();
  3264  0377  2332               	fcall	_saveState
  3265  0378  0008               	return
  3266  0379                     __end_of_updateBoostState:	
  3267                           
  3268                           	psect	text13
  3269  0332                     __ptext13:	
  3270 ;; *************** function _saveState *****************
  3271 ;; Defined at:
  3272 ;;		line 74 in file "state_manager.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;		None
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  r               1   12[COMMON] unsigned char 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      void 
  3279 ;; Registers used:
  3280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMMON   BANK0   BANK1
  3286 ;;      Params:         0       0       0
  3287 ;;      Locals:         1       0       0
  3288 ;;      Temps:          0       3       0
  3289 ;;      Totals:         1       3       0
  3290 ;;Total ram usage:        4 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    3
  3293 ;; This function calls:
  3294 ;;		_HEF_ByteArrayWrite
  3295 ;; This function is called by:
  3296 ;;		_updateFuzzState
  3297 ;;		_updateBoostState
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           
  3302                           ;psect for function _saveState
  3303  0332                     _saveState:	
  3304                           
  3305                           ;state_manager.c: 75: uint8_t r;
  3306                           ;state_manager.c: 76: r = HEF_ByteArrayWrite(1, (void *) &pedalState, sizeof (pedalState
      +                          ));
  3307                           
  3308                           ;incstack = 0
  3309                           ; Regs used in _saveState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3310  0332  3034               	movlw	(low (_pedalState| 0))& (0+255)
  3311  0333  0020               	movlb	0	; select bank0
  3312  0334  00C6               	movwf	??_saveState
  3313  0335  0846               	movf	??_saveState,w
  3314  0336  00F4               	movwf	HEF_ByteArrayWrite@byteArray
  3315  0337  3004               	movlw	4
  3316  0338  00C7               	movwf	??_saveState+1
  3317  0339  0847               	movf	??_saveState+1,w
  3318  033A  00F5               	movwf	HEF_ByteArrayWrite@count
  3319  033B  3001               	movlw	1
  3320  033C  2123               	fcall	_HEF_ByteArrayWrite
  3321  033D  0020               	movlb	0	; select bank0
  3322  033E  00C8               	movwf	??_saveState+2
  3323  033F  0848               	movf	??_saveState+2,w
  3324  0340  00FC               	movwf	saveState@r
  3325  0341  0008               	return
  3326  0342                     __end_of_saveState:	
  3327                           
  3328                           	psect	text14
  3329  0123                     __ptext14:	
  3330 ;; *************** function _HEF_ByteArrayWrite *****************
  3331 ;; Defined at:
  3332 ;;		line 12 in file "HEF.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  block           1    wreg     unsigned char 
  3335 ;;  byteArray       1    4[COMMON] PTR unsigned char 
  3336 ;;		 -> pedalState(4), 
  3337 ;;  count           1    5[COMMON] unsigned char 
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;  block           1    9[COMMON] unsigned char 
  3340 ;;  blockAddr       2   10[COMMON] unsigned int 
  3341 ;;  GIEBitValue     1    8[COMMON] unsigned char 
  3342 ;;  i               1    0        unsigned char 
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      char 
  3345 ;; Registers used:
  3346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMMON   BANK0   BANK1
  3352 ;;      Params:         2       0       0
  3353 ;;      Locals:         4       0       0
  3354 ;;      Temps:          2       0       0
  3355 ;;      Totals:         8       0       0
  3356 ;;Total ram usage:        8 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    2
  3359 ;; This function calls:
  3360 ;;		_FLASH_EraseBlock
  3361 ;; This function is called by:
  3362 ;;		_saveState
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           
  3367                           ;psect for function _HEF_ByteArrayWrite
  3368  0123                     _HEF_ByteArrayWrite:	
  3369                           
  3370                           ;incstack = 0
  3371                           ; Regs used in _HEF_ByteArrayWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3372                           ;HEF_ByteArrayWrite@block stored from wreg
  3373  0123  00F9               	movwf	HEF_ByteArrayWrite@block
  3374                           
  3375                           ;HEF.c: 13: uint16_t blockAddr;
  3376                           ;HEF.c: 14: uint8_t GIEBitValue = INTCONbits.GIE;
  3377  0124  3000               	movlw	0
  3378  0125  1B8B               	btfsc	11,7	;volatile
  3379  0126  3001               	movlw	1
  3380  0127  00F8               	movwf	HEF_ByteArrayWrite@GIEBitValue
  3381                           
  3382                           ;HEF.c: 15: uint8_t i;
  3383                           ;HEF.c: 17: if ( ( block >= 128 / 32) || ( count > 32))
  3384  0128  3004               	movlw	4
  3385  0129  0279               	subwf	HEF_ByteArrayWrite@block,w
  3386  012A  1803               	skipnc
  3387  012B  2930               	goto	l1200
  3388  012C  3021               	movlw	33
  3389  012D  0275               	subwf	HEF_ByteArrayWrite@count,w
  3390  012E  1C03               	skipc
  3391  012F  2932               	goto	l1204
  3392  0130                     l1200:	
  3393                           
  3394                           ;HEF.c: 18: return -1;
  3395  0130  30FF               	movlw	255
  3396  0131  0008               	return
  3397  0132                     l1204:	
  3398                           
  3399                           ;HEF.c: 20: blockAddr = 16384 - 128 + block * 32;
  3400  0132  0879               	movf	HEF_ByteArrayWrite@block,w
  3401  0133  00F6               	movwf	??_HEF_ByteArrayWrite
  3402  0134  01F7               	clrf	??_HEF_ByteArrayWrite+1
  3403  0135  3005               	movlw	5
  3404  0136                     u625:	
  3405  0136  35F6               	lslf	??_HEF_ByteArrayWrite,f
  3406  0137  0DF7               	rlf	??_HEF_ByteArrayWrite+1,f
  3407  0138  0B89               	decfsz	9,f
  3408  0139  2936               	goto	u625
  3409  013A  0876               	movf	??_HEF_ByteArrayWrite,w
  3410  013B  3E80               	addlw	128
  3411  013C  00FA               	movwf	HEF_ByteArrayWrite@blockAddr
  3412  013D  303F               	movlw	63
  3413  013E  3D77               	addwfc	??_HEF_ByteArrayWrite+1,w
  3414  013F  00FB               	movwf	HEF_ByteArrayWrite@blockAddr+1
  3415                           
  3416                           ;HEF.c: 21: INTCONbits.GIE = 0;
  3417  0140  138B               	bcf	11,7	;volatile
  3418                           
  3419                           ;HEF.c: 23: FLASH_EraseBlock( blockAddr);
  3420  0141  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3421  0142  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  3422  0143  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3423  0144  00F1               	movwf	FLASH_EraseBlock@startAddr
  3424  0145  22C6               	fcall	_FLASH_EraseBlock
  3425                           
  3426                           ;HEF.c: 26: PMCON1bits.CFGS = 0;
  3427  0146  0023               	movlb	3	; select bank3
  3428  0147  1315               	bcf	21,6	;volatile
  3429                           
  3430                           ;HEF.c: 27: PMCON1bits.WREN = 1;
  3431  0148  1515               	bsf	21,2	;volatile
  3432                           
  3433                           ;HEF.c: 28: PMCON1bits.LWLO = 1;
  3434  0149  1695               	bsf	21,5	;volatile
  3435  014A                     l1238:	
  3436                           ;HEF.c: 30: while ( count > 0) {
  3437                           
  3438  014A  0875               	movf	HEF_ByteArrayWrite@count,w
  3439  014B  1903               	btfsc	3,2
  3440  014C  296D               	goto	l242
  3441                           
  3442                           ;HEF.c: 31: PMADR = blockAddr++;
  3443  014D  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  3444  014E  0023               	movlb	3	; select bank3
  3445  014F  0092               	movwf	18	;volatile
  3446  0150  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  3447  0151  0091               	movwf	17	;volatile
  3448  0152  3001               	movlw	1
  3449  0153  07FA               	addwf	HEF_ByteArrayWrite@blockAddr,f
  3450  0154  3000               	movlw	0
  3451  0155  3DFB               	addwfc	HEF_ByteArrayWrite@blockAddr+1,f
  3452                           
  3453                           ;HEF.c: 33: PMDATL = *byteArray++;
  3454  0156  0874               	movf	HEF_ByteArrayWrite@byteArray,w
  3455  0157  0086               	movwf	6
  3456  0158  0187               	clrf	7
  3457  0159  0801               	movf	1,w
  3458  015A  0093               	movwf	19	;volatile
  3459  015B  3001               	movlw	1
  3460  015C  00F6               	movwf	??_HEF_ByteArrayWrite
  3461  015D  0876               	movf	??_HEF_ByteArrayWrite,w
  3462  015E  07F4               	addwf	HEF_ByteArrayWrite@byteArray,f
  3463                           
  3464                           ;HEF.c: 34: PMDATH = 0;
  3465  015F  0194               	clrf	20	;volatile
  3466                           
  3467                           ;HEF.c: 35: if ( count == 1) {
  3468  0160  0375               	decf	HEF_ByteArrayWrite@count,w
  3469  0161  1903               	btfsc	3,2
  3470                           
  3471                           ;HEF.c: 36: PMCON1bits.LWLO = 0;
  3472  0162  1295               	bcf	21,5	;volatile
  3473                           
  3474                           ;HEF.c: 37: }
  3475                           ;HEF.c: 39: PMCON2 = 0x55;
  3476  0163  3055               	movlw	85
  3477  0164  0096               	movwf	22	;volsfr
  3478                           
  3479                           ;HEF.c: 40: PMCON2 = 0xAA;
  3480  0165  30AA               	movlw	170
  3481  0166  0096               	movwf	22	;volsfr
  3482                           
  3483                           ;HEF.c: 41: PMCON1bits.WR = 1;
  3484  0167  1495               	bsf	21,1	;volatile
  3485                           
  3486                           ;HEF.c: 42: __nop();
  3487  0168  0000               	nop
  3488                           
  3489                           ;HEF.c: 43: __nop();
  3490  0169  0000               	nop
  3491                           
  3492                           ;HEF.c: 44: count--;
  3493  016A  3001               	movlw	1
  3494  016B  02F5               	subwf	HEF_ByteArrayWrite@count,f
  3495  016C  294A               	goto	l1238
  3496  016D                     l242:	
  3497                           
  3498                           ;HEF.c: 45: }
  3499                           ;HEF.c: 47: PMCON1bits.WREN = 0;
  3500  016D  0023               	movlb	3	; select bank3
  3501  016E  1115               	bcf	21,2	;volatile
  3502                           
  3503                           ;HEF.c: 48: INTCONbits.GIE = GIEBitValue;
  3504  016F  0C78               	rrf	HEF_ByteArrayWrite@GIEBitValue,w
  3505  0170  1C03               	skipc
  3506  0171  138B               	bcf	11,7	;volatile
  3507  0172  1803               	skipnc
  3508  0173  178B               	bsf	11,7	;volatile
  3509                           
  3510                           ;HEF.c: 50: return 0;
  3511  0174  3000               	movlw	0
  3512  0175  0008               	return
  3513  0176                     __end_of_HEF_ByteArrayWrite:	
  3514                           
  3515                           	psect	text15
  3516  02C6                     __ptext15:	
  3517 ;; *************** function _FLASH_EraseBlock *****************
  3518 ;; Defined at:
  3519 ;;		line 141 in file "mcc_generated_files/memory.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;  startAddr       2    1[COMMON] unsigned int 
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      void 
  3526 ;; Registers used:
  3527 ;;		wreg, status,2, status,0
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMMON   BANK0   BANK1
  3533 ;;      Params:         2       0       0
  3534 ;;      Locals:         1       0       0
  3535 ;;      Temps:          0       0       0
  3536 ;;      Totals:         3       0       0
  3537 ;;Total ram usage:        3 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; Hardware stack levels required when called:    1
  3540 ;; This function calls:
  3541 ;;		Nothing
  3542 ;; This function is called by:
  3543 ;;		_HEF_ByteArrayWrite
  3544 ;;		_FLASH_WriteBlock
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           
  3549                           ;psect for function _FLASH_EraseBlock
  3550  02C6                     _FLASH_EraseBlock:	
  3551                           
  3552                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
  3553                           
  3554                           ;incstack = 0
  3555                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  3556  02C6  3000               	movlw	0
  3557  02C7  1B8B               	btfsc	11,7	;volatile
  3558  02C8  3001               	movlw	1
  3559  02C9  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  3560                           
  3561                           ;memory.c: 145: INTCONbits.GIE = 0;
  3562  02CA  138B               	bcf	11,7	;volatile
  3563                           
  3564                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
  3565  02CB  0871               	movf	FLASH_EraseBlock@startAddr,w
  3566  02CC  0023               	movlb	3	; select bank3
  3567  02CD  0091               	movwf	17	;volatile
  3568                           
  3569                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
  3570  02CE  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  3571  02CF  0092               	movwf	18	;volatile
  3572                           
  3573                           ;memory.c: 152: PMCON1bits.CFGS = 0;
  3574  02D0  1315               	bcf	21,6	;volatile
  3575                           
  3576                           ;memory.c: 153: PMCON1bits.FREE = 1;
  3577  02D1  1615               	bsf	21,4	;volatile
  3578                           
  3579                           ;memory.c: 154: PMCON1bits.WREN = 1;
  3580  02D2  1515               	bsf	21,2	;volatile
  3581                           
  3582                           ;memory.c: 157: PMCON2 = 0x55;
  3583  02D3  3055               	movlw	85
  3584  02D4  0096               	movwf	22	;volsfr
  3585                           
  3586                           ;memory.c: 158: PMCON2 = 0xAA;
  3587  02D5  30AA               	movlw	170
  3588  02D6  0096               	movwf	22	;volsfr
  3589                           
  3590                           ;memory.c: 159: PMCON1bits.WR = 1;
  3591  02D7  1495               	bsf	21,1	;volatile
  3592                           
  3593                           ;memory.c: 160: __nop();
  3594  02D8  0000               	nop
  3595                           
  3596                           ;memory.c: 161: __nop();
  3597  02D9  0000               	nop
  3598                           
  3599                           ;memory.c: 163: PMCON1bits.WREN = 0;
  3600  02DA  0023               	movlb	3	; select bank3
  3601  02DB  1115               	bcf	21,2	;volatile
  3602                           
  3603                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
  3604  02DC  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  3605  02DD  1C03               	skipc
  3606  02DE  138B               	bcf	11,7	;volatile
  3607  02DF  1803               	skipnc
  3608  02E0  178B               	bsf	11,7	;volatile
  3609  02E1  0008               	return
  3610  02E2                     __end_of_FLASH_EraseBlock:	
  3611                           
  3612                           	psect	text16
  3613  0385                     __ptext16:	
  3614 ;; *************** function _getBoostState *****************
  3615 ;; Defined at:
  3616 ;;		line 51 in file "state_manager.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;		None
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  2    1[BANK0 ] int 
  3623 ;; Registers used:
  3624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMMON   BANK0   BANK1
  3630 ;;      Params:         0       2       0
  3631 ;;      Locals:         0       0       0
  3632 ;;      Temps:          0       0       0
  3633 ;;      Totals:         0       2       0
  3634 ;;Total ram usage:        2 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    4
  3637 ;; This function calls:
  3638 ;;		_initStateManager
  3639 ;; This function is called by:
  3640 ;;		_initBoost
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           
  3645                           ;psect for function _getBoostState
  3646  0385                     _getBoostState:	
  3647                           
  3648                           ;state_manager.c: 52: if (!isInitialized) {
  3649                           
  3650                           ;incstack = 0
  3651                           ; Regs used in _getBoostState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3652  0385  0020               	movlb	0	; select bank0
  3653  0386  0830               	movf	_isInitialized,w
  3654  0387  0431               	iorwf	_isInitialized+1,w
  3655  0388  1D03               	btfss	3,2
  3656  0389  2B8B               	goto	l1378
  3657                           
  3658                           ;state_manager.c: 53: initStateManager();
  3659  038A  22A9               	fcall	_initStateManager
  3660  038B                     l1378:	
  3661                           
  3662                           ;state_manager.c: 54: }
  3663                           ;state_manager.c: 55: return pedalState.boost;
  3664  038B  0020               	movlb	0	; select bank0
  3665  038C  0837               	movf	_pedalState+3,w
  3666  038D  00C8               	movwf	?_getBoostState+1
  3667  038E  0836               	movf	_pedalState+2,w
  3668  038F  00C7               	movwf	?_getBoostState
  3669  0390  0008               	return
  3670  0391                     __end_of_getBoostState:	
  3671                           
  3672                           	psect	text17
  3673  02A9                     __ptext17:	
  3674 ;; *************** function _initStateManager *****************
  3675 ;; Defined at:
  3676 ;;		line 18 in file "state_manager.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;		None
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  r               1    0[BANK0 ] unsigned char 
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  1    wreg      void 
  3683 ;; Registers used:
  3684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMMON   BANK0   BANK1
  3690 ;;      Params:         0       0       0
  3691 ;;      Locals:         0       1       0
  3692 ;;      Temps:          2       0       0
  3693 ;;      Totals:         2       1       0
  3694 ;;Total ram usage:        3 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; Hardware stack levels required when called:    3
  3697 ;; This function calls:
  3698 ;;		_HEF_ByteArrayRead
  3699 ;; This function is called by:
  3700 ;;		_getFuzzState
  3701 ;;		_getBoostState
  3702 ;;		_getCurrentState
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           
  3707                           ;psect for function _initStateManager
  3708  02A9                     _initStateManager:	
  3709                           
  3710                           ;state_manager.c: 19: uint8_t r;
  3711                           ;state_manager.c: 22: r = HEF_ByteArrayRead( (void *) &pedalState, 1, sizeof(pedalState)
      +                          );
  3712                           
  3713                           ;incstack = 0
  3714                           ; Regs used in _initStateManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3715  02A9  01F4               	clrf	HEF_ByteArrayRead@block
  3716  02AA  0AF4               	incf	HEF_ByteArrayRead@block,f
  3717  02AB  3004               	movlw	4
  3718  02AC  00FB               	movwf	??_initStateManager
  3719  02AD  087B               	movf	??_initStateManager,w
  3720  02AE  00F5               	movwf	HEF_ByteArrayRead@count
  3721  02AF  3034               	movlw	(low (_pedalState| 0))& (0+255)
  3722  02B0  221E               	fcall	_HEF_ByteArrayRead
  3723  02B1  00FC               	movwf	??_initStateManager+1
  3724  02B2  087C               	movf	??_initStateManager+1,w
  3725  02B3  0020               	movlb	0	; select bank0
  3726  02B4  00C6               	movwf	initStateManager@r
  3727                           
  3728                           ;state_manager.c: 24: if (pedalState.fuzz != 1) {
  3729  02B5  0334               	decf	_pedalState,w
  3730  02B6  0435               	iorwf	_pedalState+1,w
  3731  02B7  1903               	btfsc	3,2
  3732  02B8  2ABB               	goto	l1312
  3733                           
  3734                           ;state_manager.c: 25: pedalState.fuzz = 0;
  3735  02B9  01B4               	clrf	_pedalState
  3736  02BA  01B5               	clrf	_pedalState+1
  3737  02BB                     l1312:	
  3738                           
  3739                           ;state_manager.c: 26: }
  3740                           ;state_manager.c: 28: if (pedalState.boost != 1) {
  3741  02BB  0336               	decf	_pedalState+2,w
  3742  02BC  0437               	iorwf	_pedalState+3,w
  3743  02BD  1903               	btfsc	3,2
  3744  02BE  2AC1               	goto	l1316
  3745                           
  3746                           ;state_manager.c: 29: pedalState.boost = 0;
  3747  02BF  01B6               	clrf	_pedalState+2
  3748  02C0  01B7               	clrf	_pedalState+3
  3749  02C1                     l1316:	
  3750                           
  3751                           ;state_manager.c: 30: }
  3752                           ;state_manager.c: 32: isInitialized = 1;
  3753  02C1  3001               	movlw	1
  3754  02C2  00B0               	movwf	_isInitialized
  3755  02C3  3000               	movlw	0
  3756  02C4  00B1               	movwf	_isInitialized+1
  3757  02C5  0008               	return
  3758  02C6                     __end_of_initStateManager:	
  3759                           
  3760                           	psect	text18
  3761  021E                     __ptext18:	
  3762 ;; *************** function _HEF_ByteArrayRead *****************
  3763 ;; Defined at:
  3764 ;;		line 53 in file "HEF.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;  bArray          1    wreg     PTR unsigned char 
  3767 ;;		 -> pedalState(4), 
  3768 ;;  block           1    4[COMMON] unsigned char 
  3769 ;;  count           1    5[COMMON] unsigned char 
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;  bArray          1   10[COMMON] PTR unsigned char 
  3772 ;;		 -> pedalState(4), 
  3773 ;;  wordAdd         2    8[COMMON] unsigned int 
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      char 
  3776 ;; Registers used:
  3777 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMMON   BANK0   BANK1
  3783 ;;      Params:         2       0       0
  3784 ;;      Locals:         3       0       0
  3785 ;;      Temps:          2       0       0
  3786 ;;      Totals:         7       0       0
  3787 ;;Total ram usage:        7 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    2
  3790 ;; This function calls:
  3791 ;;		_FLASH_ReadWord
  3792 ;; This function is called by:
  3793 ;;		_initStateManager
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           
  3798                           ;psect for function _HEF_ByteArrayRead
  3799  021E                     _HEF_ByteArrayRead:	
  3800                           
  3801                           ;incstack = 0
  3802                           ; Regs used in _HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3803                           ;HEF_ByteArrayRead@bArray stored from wreg
  3804  021E  00FA               	movwf	HEF_ByteArrayRead@bArray
  3805                           
  3806                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
  3807  021F  0874               	movf	HEF_ByteArrayRead@block,w
  3808  0220  00F6               	movwf	??_HEF_ByteArrayRead
  3809  0221  01F7               	clrf	??_HEF_ByteArrayRead+1
  3810  0222  3005               	movlw	5
  3811  0223                     u655:	
  3812  0223  35F6               	lslf	??_HEF_ByteArrayRead,f
  3813  0224  0DF7               	rlf	??_HEF_ByteArrayRead+1,f
  3814  0225  0B89               	decfsz	9,f
  3815  0226  2A23               	goto	u655
  3816  0227  0876               	movf	??_HEF_ByteArrayRead,w
  3817  0228  3E80               	addlw	128
  3818  0229  00F8               	movwf	HEF_ByteArrayRead@wordAdd
  3819  022A  303F               	movlw	63
  3820  022B  3D77               	addwfc	??_HEF_ByteArrayRead+1,w
  3821  022C  00F9               	movwf	HEF_ByteArrayRead@wordAdd+1
  3822                           
  3823                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
  3824  022D  3021               	movlw	33
  3825  022E  0275               	subwf	HEF_ByteArrayRead@count,w
  3826  022F  1803               	skipnc
  3827  0230  2A35               	goto	l1252
  3828  0231  3004               	movlw	4
  3829  0232  0274               	subwf	HEF_ByteArrayRead@block,w
  3830  0233  1C03               	skipc
  3831  0234  2A4D               	goto	l1264
  3832  0235                     l1252:	
  3833                           
  3834                           ;HEF.c: 60: return -1;
  3835  0235  30FF               	movlw	255
  3836  0236  0008               	return
  3837  0237                     l1256:	
  3838                           ;HEF.c: 63: while ( count > 0)
  3839                           
  3840                           
  3841                           ;HEF.c: 64: {
  3842                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
  3843  0237  0879               	movf	HEF_ByteArrayRead@wordAdd+1,w
  3844  0238  00F2               	movwf	FLASH_ReadWord@flashAddr+1
  3845  0239  0878               	movf	HEF_ByteArrayRead@wordAdd,w
  3846  023A  00F1               	movwf	FLASH_ReadWord@flashAddr
  3847  023B  22E2               	fcall	_FLASH_ReadWord
  3848  023C  0871               	movf	?_FLASH_ReadWord,w
  3849  023D  00F6               	movwf	??_HEF_ByteArrayRead
  3850  023E  087A               	movf	HEF_ByteArrayRead@bArray,w
  3851  023F  0086               	movwf	6
  3852  0240  0187               	clrf	7
  3853  0241  0876               	movf	??_HEF_ByteArrayRead,w
  3854  0242  0081               	movwf	1
  3855  0243  3001               	movlw	1
  3856  0244  07F8               	addwf	HEF_ByteArrayRead@wordAdd,f
  3857  0245  3000               	movlw	0
  3858  0246  3DF9               	addwfc	HEF_ByteArrayRead@wordAdd+1,f
  3859  0247  3001               	movlw	1
  3860  0248  00F6               	movwf	??_HEF_ByteArrayRead
  3861  0249  0876               	movf	??_HEF_ByteArrayRead,w
  3862  024A  07FA               	addwf	HEF_ByteArrayRead@bArray,f
  3863                           
  3864                           ;HEF.c: 66: count--;
  3865  024B  3001               	movlw	1
  3866  024C  02F5               	subwf	HEF_ByteArrayRead@count,f
  3867  024D                     l1264:	
  3868  024D  0875               	movf	HEF_ByteArrayRead@count,w
  3869  024E  1D03               	btfss	3,2
  3870  024F  2A37               	goto	l1256
  3871                           
  3872                           ;HEF.c: 67: }
  3873                           ;HEF.c: 70: return 0;
  3874  0250  3000               	movlw	0
  3875  0251  0008               	return
  3876  0252                     __end_of_HEF_ByteArrayRead:	
  3877                           
  3878                           	psect	text19
  3879  02E2                     __ptext19:	
  3880 ;; *************** function _FLASH_ReadWord *****************
  3881 ;; Defined at:
  3882 ;;		line 58 in file "mcc_generated_files/memory.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;  flashAddr       2    1[COMMON] unsigned int 
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  3887 ;; Return value:  Size  Location     Type
  3888 ;;                  2    1[COMMON] unsigned int 
  3889 ;; Registers used:
  3890 ;;		wreg, status,2, status,0
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMMON   BANK0   BANK1
  3896 ;;      Params:         2       0       0
  3897 ;;      Locals:         1       0       0
  3898 ;;      Temps:          0       0       0
  3899 ;;      Totals:         3       0       0
  3900 ;;Total ram usage:        3 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:    1
  3903 ;; This function calls:
  3904 ;;		Nothing
  3905 ;; This function is called by:
  3906 ;;		_HEF_ByteArrayRead
  3907 ;;		_FLASH_WriteWord
  3908 ;;		_HEF_ByteRead
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           
  3913                           ;psect for function _FLASH_ReadWord
  3914  02E2                     _FLASH_ReadWord:	
  3915                           
  3916                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  3917                           
  3918                           ;incstack = 0
  3919                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  3920  02E2  3000               	movlw	0
  3921  02E3  1B8B               	btfsc	11,7	;volatile
  3922  02E4  3001               	movlw	1
  3923  02E5  00F3               	movwf	FLASH_ReadWord@GIEBitValue
  3924                           
  3925                           ;memory.c: 61: INTCONbits.GIE = 0;
  3926  02E6  138B               	bcf	11,7	;volatile
  3927                           
  3928                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  3929  02E7  0871               	movf	FLASH_ReadWord@flashAddr,w
  3930  02E8  0023               	movlb	3	; select bank3
  3931  02E9  0091               	movwf	17	;volatile
  3932                           
  3933                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  3934  02EA  0872               	movf	FLASH_ReadWord@flashAddr+1,w
  3935  02EB  0092               	movwf	18	;volatile
  3936                           
  3937                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  3938  02EC  1315               	bcf	21,6	;volatile
  3939                           
  3940                           ;memory.c: 66: PMCON1bits.RD = 1;
  3941  02ED  1415               	bsf	21,0	;volatile
  3942                           
  3943                           ;memory.c: 67: __nop();
  3944  02EE  0000               	nop
  3945                           
  3946                           ;memory.c: 68: __nop();
  3947  02EF  0000               	nop
  3948                           
  3949                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  3950  02F0  0C73               	rrf	FLASH_ReadWord@GIEBitValue,w
  3951  02F1  1C03               	skipc
  3952  02F2  138B               	bcf	11,7	;volatile
  3953  02F3  1803               	skipnc
  3954  02F4  178B               	bsf	11,7	;volatile
  3955                           
  3956                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
  3957  02F5  0023               	movlb	3	; select bank3
  3958  02F6  0814               	movf	20,w	;volatile
  3959  02F7  00F2               	movwf	?_FLASH_ReadWord+1
  3960  02F8  0813               	movf	19,w	;volatile
  3961  02F9  00F1               	movwf	?_FLASH_ReadWord
  3962  02FA  0008               	return
  3963  02FB                     __end_of_FLASH_ReadWord:	
  3964                           
  3965                           	psect	text20
  3966  02FB                     __ptext20:	
  3967 ;; *************** function _InitApp *****************
  3968 ;; Defined at:
  3969 ;;		line 27 in file "user.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  1    wreg      void 
  3976 ;; Registers used:
  3977 ;;		wreg, status,2, status,0, pclath, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMMON   BANK0   BANK1
  3983 ;;      Params:         0       0       0
  3984 ;;      Locals:         0       0       0
  3985 ;;      Temps:          0       0       0
  3986 ;;      Totals:         0       0       0
  3987 ;;Total ram usage:        0 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    2
  3990 ;; This function calls:
  3991 ;;		_init_adc
  3992 ;; This function is called by:
  3993 ;;		_main
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           
  3998                           ;psect for function _InitApp
  3999  02FB                     _InitApp:	
  4000                           
  4001                           ;user.c: 28: TRISAbits.TRISA0 = 0;
  4002                           
  4003                           ;incstack = 0
  4004                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  4005  02FB  0021               	movlb	1	; select bank1
  4006  02FC  100C               	bcf	12,0	;volatile
  4007                           
  4008                           ;user.c: 29: TRISAbits.TRISA1 = 0;
  4009  02FD  108C               	bcf	12,1	;volatile
  4010                           
  4011                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  4012  02FE  110C               	bcf	12,2	;volatile
  4013                           
  4014                           ;user.c: 32: TRISAbits.TRISA4 = 1;
  4015  02FF  160C               	bsf	12,4	;volatile
  4016                           
  4017                           ;user.c: 33: TRISAbits.TRISA5 = 1;
  4018  0300  168C               	bsf	12,5	;volatile
  4019                           
  4020                           ;user.c: 34: ANSELAbits.ANSA4 = 0;
  4021  0301  0023               	movlb	3	; select bank3
  4022  0302  120C               	bcf	12,4	;volatile
  4023                           
  4024                           ;user.c: 36: TRISCbits.TRISC0 = 0;
  4025  0303  0021               	movlb	1	; select bank1
  4026  0304  100E               	bcf	14,0	;volatile
  4027                           
  4028                           ;user.c: 37: TRISCbits.TRISC1 = 0;
  4029  0305  108E               	bcf	14,1	;volatile
  4030                           
  4031                           ;user.c: 38: TRISCbits.TRISC2 = 0;
  4032  0306  110E               	bcf	14,2	;volatile
  4033                           
  4034                           ;user.c: 39: TRISCbits.TRISC3 = 0;
  4035  0307  118E               	bcf	14,3	;volatile
  4036                           
  4037                           ;user.c: 40: TRISCbits.TRISC4 = 0;
  4038  0308  120E               	bcf	14,4	;volatile
  4039                           
  4040                           ;user.c: 41: TRISCbits.TRISC5 = 0;
  4041  0309  128E               	bcf	14,5	;volatile
  4042                           
  4043                           ;user.c: 43: LATCbits.LATC5 = 0;
  4044  030A  0022               	movlb	2	; select bank2
  4045  030B  128E               	bcf	14,5	;volatile
  4046                           
  4047                           ;user.c: 45: LATAbits.LATA2 = 0;
  4048  030C  110C               	bcf	12,2	;volatile
  4049                           
  4050                           ;user.c: 46: LATCbits.LATC3 = 0;
  4051  030D  118E               	bcf	14,3	;volatile
  4052                           
  4053                           ;user.c: 48: init_adc();
  4054  030E  2391               	fcall	_init_adc
  4055  030F  0008               	return
  4056  0310                     __end_of_InitApp:	
  4057                           
  4058                           	psect	text21
  4059  0391                     __ptext21:	
  4060 ;; *************** function _init_adc *****************
  4061 ;; Defined at:
  4062 ;;		line 60 in file "user.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;		None
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;		None
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      void 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMMON   BANK0   BANK1
  4076 ;;      Params:         0       0       0
  4077 ;;      Locals:         0       0       0
  4078 ;;      Temps:          0       0       0
  4079 ;;      Totals:         0       0       0
  4080 ;;Total ram usage:        0 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    1
  4083 ;; This function calls:
  4084 ;;		Nothing
  4085 ;; This function is called by:
  4086 ;;		_InitApp
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           
  4091                           ;psect for function _init_adc
  4092  0391                     _init_adc:	
  4093                           
  4094                           ;user.c: 61: ADCON1bits.ADFM = 0b1;
  4095                           
  4096                           ;incstack = 0
  4097                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  4098  0391  0021               	movlb	1	; select bank1
  4099  0392  179E               	bsf	30,7	;volatile
  4100                           
  4101                           ;user.c: 62: ADCON1bits.ADCS = 0b110;
  4102  0393  081E               	movf	30,w	;volatile
  4103  0394  398F               	andlw	-113
  4104  0395  3860               	iorlw	96
  4105  0396  009E               	movwf	30	;volatile
  4106                           
  4107                           ;user.c: 63: ADCON1bits.ADPREF = 0b00;
  4108  0397  30FC               	movlw	-4
  4109  0398  059E               	andwf	30,f	;volatile
  4110                           
  4111                           ;user.c: 64: ADCON0bits.ADON = 0b1;
  4112  0399  141D               	bsf	29,0	;volatile
  4113  039A  0008               	return
  4114  039B                     __end_of_init_adc:	
  4115                           
  4116                           	psect	text22
  4117  03A7                     __ptext22:	
  4118 ;; *************** function _ConfigureOscillator *****************
  4119 ;; Defined at:
  4120 ;;		line 17 in file "system.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;		None
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;		None
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  1    wreg      void 
  4127 ;; Registers used:
  4128 ;;		wreg, status,2, status,0
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMMON   BANK0   BANK1
  4134 ;;      Params:         0       0       0
  4135 ;;      Locals:         0       0       0
  4136 ;;      Temps:          0       0       0
  4137 ;;      Totals:         0       0       0
  4138 ;;Total ram usage:        0 bytes
  4139 ;; Hardware stack levels used:    1
  4140 ;; Hardware stack levels required when called:    1
  4141 ;; This function calls:
  4142 ;;		Nothing
  4143 ;; This function is called by:
  4144 ;;		_main
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           
  4149                           ;psect for function _ConfigureOscillator
  4150  03A7                     _ConfigureOscillator:	
  4151                           
  4152                           ;system.c: 19: OSCCONbits.IRCF = 0b1111;
  4153                           
  4154                           ;incstack = 0
  4155                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  4156  03A7  3078               	movlw	120
  4157  03A8  0021               	movlb	1	; select bank1
  4158  03A9  0499               	iorwf	25,f	;volatile
  4159                           
  4160                           ;system.c: 20: OSCSTAT = 0x00;
  4161  03AA  019A               	clrf	26	;volatile
  4162  03AB  0008               	return
  4163  03AC                     __end_of_ConfigureOscillator:	
  4164                           
  4165                           	psect	intentry
  4166  0004                     __pintentry:	
  4167 ;; *************** function _isr *****************
  4168 ;; Defined at:
  4169 ;;		line 23 in file "interrupts.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;		None
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;		None
  4174 ;; Return value:  Size  Location     Type
  4175 ;;                  1    wreg      void 
  4176 ;; Registers used:
  4177 ;;		None
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMMON   BANK0   BANK1
  4183 ;;      Params:         0       0       0
  4184 ;;      Locals:         0       0       0
  4185 ;;      Temps:          1       0       0
  4186 ;;      Totals:         1       0       0
  4187 ;;Total ram usage:        1 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; This function calls:
  4190 ;;		Nothing
  4191 ;; This function is called by:
  4192 ;;		Interrupt level 1
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196  0004                     _isr:	
  4197                           
  4198                           ;incstack = 0
  4199                           ; Regs used in _isr: []
  4200  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4201  0005  3180               	pagesel	$
  4202  0006  0020               	movlb	0	; select bank0
  4203  0007  087F               	movf	127,w
  4204  0008  00F0               	movwf	??_isr
  4205  0009  0870               	movf	??_isr,w
  4206  000A  00FF               	movwf	127
  4207  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4208  000C  0009               	retfie
  4209  000D                     __end_of_isr:	
  4210  007E                     btemp	set	126	;btemp
  4211  007E                     int$flags	set	126
  4212  007E                     wtemp	set	126
  4213  007E                     wtemp0	set	126
  4214  0080                     wtemp1	set	128
  4215  0082                     wtemp2	set	130
  4216  0084                     wtemp3	set	132
  4217  0086                     wtemp4	set	134
  4218  0088                     wtemp5	set	136
  4219  007F                     wtemp6	set	127
  4220  007E                     ttemp	set	126
  4221  007E                     ttemp0	set	126
  4222  0081                     ttemp1	set	129
  4223  0084                     ttemp2	set	132
  4224  0087                     ttemp3	set	135
  4225  007F                     ttemp4	set	127
  4226  007E                     ltemp	set	126
  4227  007E                     ltemp0	set	126
  4228  0082                     ltemp1	set	130
  4229  0086                     ltemp2	set	134
  4230  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        14
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     12      50
    BANK1            32      0       0

Pointer List with Targets:

    HEF_ByteArrayRead@bArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 

    HEF_ByteArrayWrite@byteArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 


Critical Paths under _main in COMMON

    _updateFuzzState->_saveState
    _getFuzzState->_initStateManager
    _wait_ms->___lmul
    _updateBoostState->_saveState
    _saveState->_HEF_ByteArrayWrite
    _HEF_ByteArrayWrite->_FLASH_EraseBlock
    _getBoostState->_initStateManager
    _initStateManager->_HEF_ByteArrayRead
    _HEF_ByteArrayRead->_FLASH_ReadWord

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateFuzz
    _updateFuzz->_setFuzzState
    _updateBoost->_setBoostState
    _initFuzz->_setFuzzState
    _setFuzzState->_updateFuzzState
    _updateFuzzState->_saveState
    _setFeedbackState->_wait_ms
    _getFuzzState->_initStateManager
    _initBoost->_setBoostState
    _setBoostState->_updateBoostState
    _updateBoostState->_saveState
    _getBoostState->_initStateManager

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9377
                _ConfigureOscillator
                            _InitApp
                          _initBoost
                           _initFuzz
                        _updateBoost
                         _updateFuzz
 ---------------------------------------------------------------------------------
 (1) _updateFuzz                                           5     3      2    2645
                                              7 BANK0      5     3      2
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (1) _updateBoost                                          4     2      2    1630
                                              7 BANK0      4     2      2
                      _setBoostState
 ---------------------------------------------------------------------------------
 (1) _initFuzz                                             0     0      0    3046
                       _getFuzzState
                   _setFeedbackState
                       _setFuzzState
 ---------------------------------------------------------------------------------
 (2) _setFuzzState                                         2     0      2    1564
                                              5 BANK0      2     0      2
                       _getFuzzState (ARG)
                    _updateFuzzState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _updateFuzzState                                      2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     2     0      2     928
                                              2 BANK0      2     0      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _getFuzzState                                         2     0      2     554
                                              1 BANK0      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (1) _initBoost                                            2     2      0    2056
                                              7 BANK0      2     2      0
                      _getBoostState
                      _setBoostState
 ---------------------------------------------------------------------------------
 (2) _setBoostState                                        2     0      2    1500
                                              5 BANK0      2     0      2
                      _getBoostState (ARG)
                   _updateBoostState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2     626
                                              0 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateBoostState                                     2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (4) _saveState                                            4     4      0     527
                                             12 COMMON     1     1      0
                                              0 BANK0      3     3      0
                 _HEF_ByteArrayWrite
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayWrite                                   9     7      2     526
                                              4 COMMON     8     6      2
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     195
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getBoostState                                        2     0      2     554
                                              1 BANK0      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (3) _initStateManager                                     3     3      0     554
                                             11 COMMON     2     2      0
                                              0 BANK0      1     1      0
                  _HEF_ByteArrayRead
 ---------------------------------------------------------------------------------
 (4) _HEF_ByteArrayRead                                    7     5      2     553
                                              4 COMMON     7     5      2
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (5) _FLASH_ReadWord                                       3     1      2     259
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
   _initBoost
     _getBoostState
       _initStateManager
         _HEF_ByteArrayRead
           _FLASH_ReadWord
     _setBoostState
       _getBoostState (ARG)
         _initStateManager
           _HEF_ByteArrayRead
             _FLASH_ReadWord
       _updateBoostState (ARG)
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms (ARG)
         ___lmul
   _initFuzz
     _getFuzzState
       _initStateManager
         _HEF_ByteArrayRead
           _FLASH_ReadWord
     _setFeedbackState
       _wait_ms
         ___lmul
     _setFuzzState
       _getFuzzState (ARG)
         _initStateManager
           _HEF_ByteArrayRead
             _FLASH_ReadWord
       _updateFuzzState (ARG)
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms (ARG)
         ___lmul
   _updateBoost
     _setBoostState
       _getBoostState (ARG)
         _initStateManager
           _HEF_ByteArrayRead
             _FLASH_ReadWord
       _updateBoostState (ARG)
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms (ARG)
         ___lmul
   _updateFuzz
     _setFeedbackState
       _wait_ms
         ___lmul
     _setFuzzState
       _getFuzzState (ARG)
         _initStateManager
           _HEF_ByteArrayRead
             _FLASH_ReadWord
       _updateFuzzState (ARG)
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms (ARG)
         ___lmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      C      32       6       62.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      3F       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Aug 08 19:00:17 2016

                  __CFG_CP$OFF 0000                             l73 029A                    __CFG_LVP$ON 0000  
                          l160 005A                            l242 016D                            u800 0198  
                          u625 0136                            u705 0265                            u715 026C  
                          u830 020C                            u655 0223                            u825 01F1  
                          u915 002D                            u925 003E                            u870 01D2  
                          u865 01B7                            u795 017D                            u965 0064  
                          u995 0099                            _isr 0004                   __CFG_BORV$LO 0000  
                          wreg 0009                  _boost_pressed 0026                           l1200 0130  
                         l1204 0132                           l1302 0373                           l1312 02BB  
                         l1252 0235                           l1316 02C1                           l1500 00EC  
                         l1238 014A                           l1510 010B                           l1256 0237  
                         l1264 024D                           l1328 037F                           l1344 019A  
                         l1432 0034                           l1274 025A                           l1508 0107  
                         l1436 0045                           l1278 0264                           l1366 020E  
                         l1294 0366                           l1464 008B                           l1456 007C  
                         l1378 038B                           l1394 01D4                           l1466 008F  
                         l1476 00AC                           l1590 0314                           l1496 00DB  
                         ?_isr 0070                           u1035 00D4                           u1045 00E5  
                         u1070 00FF                           u1080 0100                           u1095 0115  
                 __CFG_WRT$OFF 0000     __end_of_HEF_ByteArrayWrite 0176                           _main 0310  
                         fsr0h 0005                           fsr1h 0007                           fsr0l 0004  
                         indf0 0000                           indf1 0001                           fsr1l 0006  
                         btemp 007E                           ltemp 007E       __end_of_setFeedbackState 021E  
                         start 000D                           ttemp 007E                           wtemp 007E  
        __end_of_setBoostState 01EA                  __CFG_MCLRE$ON 0000                __end_of_InitApp 0310  
                        ??_isr 0070                          ?_main 0070                  __CFG_WDTE$OFF 0000  
         updateFuzzState@state 0049                          _PMADR 0191        __end_of_updateFuzzState 036C  
          _ConfigureOscillator 03A7            ___lmul@multiplicand 0075       __end_of_updateBoostState 0379  
        updateBoostState@state 0049                 __CFG_BOREN$OFF 0000                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
              __end_of_wait_ms 02A9                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        status 0003         HEF_ByteArrayRead@block 0074                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
       HEF_ByteArrayRead@count 0075           ?_ConfigureOscillator 0070                __initialization 000E  
                 __end_of_main 0321                 __CFG_LPBOR$OFF 0000               _initStateManager 02A9  
                       ??_main 007D        __size_of_FLASH_ReadWord 0019             updateFuzz@fb_state 0050  
         __end_of_getFuzzState 0385                 _feedback_state 003E              _HEF_ByteArrayRead 021E  
                       _ADRESH 009C                         _ADRESL 009B             ?_HEF_ByteArrayRead 0074  
                       _PMADRH 0192                         _PMADRL 0191                         _PMDATH 0194  
                       _PMDATL 0193                         _PMCON2 0196      __size_of_FLASH_EraseBlock 001C  
               _debounce_limit 003C                      ??_InitApp 0071          ??_ConfigureOscillator 0071  
          ??_HEF_ByteArrayRead 0076                 __CFG_PWRTE$OFF 0000                         ___lmul 0252  
               __CFG_STVREN$ON 0000               __end_of_initFuzz 0332               __end_of_init_adc 039B  
      FLASH_ReadWord@flashAddr 0071      __end_of_HEF_ByteArrayRead 0252               ?_updateFuzzState 0049  
      HEF_ByteArrayRead@bArray 007A                      ??_wait_ms 007D          __end_of_getBoostState 0391  
      __end_of__initialization 001E      updateBoost@debounce_limit 004D                   ?_updateBoost 004D  
               __pcstackCOMMON 0070                   __pidataBANK0 0351                     __pbssBANK0 0020  
           __size_of_initBoost 000F              ?_setFeedbackState 0048               _long_press_limit 0044  
                   __pmaintext 0310             ??_setFeedbackState 007D                  ?_setFuzzState 004B  
                      ?___lmul 0071                     __pintentry 0004             _HEF_ByteArrayWrite 0123  
           __size_of_saveState 0010                 ___lmul@product 0079          __size_of_getFuzzState 000C  
     updateFuzz@debounce_limit 004D                 _FLASH_ReadWord 02E2            ?_HEF_ByteArrayWrite 0074  
   __size_of_HEF_ByteArrayRead 0034                        _OSCSTAT 009A                     _boost_down 0024  
            ?_updateBoostState 0049               _FLASH_EraseBlock 02C6       __end_of_initStateManager 02C6  
                    ?_initFuzz 0070                      ?_init_adc 0070             ??_updateBoostState 007D  
                      _InitApp 02FB           ??_HEF_ByteArrayWrite 0076                   _getFuzzState 0379  
               ??_setFuzzState 007D                     _pedalState 0034                __size_of___lmul 002F  
       __end_of_FLASH_ReadWord 02FB                        __ptext1 0021                        __ptext2 00C8  
                      __ptext3 0321                        __ptext4 0176                        __ptext5 035F  
                      __ptext6 01EA                        __ptext7 0379                        __ptext8 0342  
                      __ptext9 01B0              __end_of_initBoost 0351                      _T2CONbits 001C  
                 __size_of_isr 0009                        _fuzz_up 0042         __size_of_setBoostState 003A  
                      _wait_ms 0281                        clrloop0 039C            setFuzzState@f_state 004B  
         end_of_initialization 001E              __end_of_saveState 0342                     ??_initFuzz 007D  
                      init_ram 03A1                     ??_init_adc 0071                        initloop 03A2  
                   _fuzz_state 0040           __size_of_updateBoost 005B                    wait_ms@time 0046  
    FLASH_ReadWord@GIEBitValue 0073                ?_FLASH_ReadWord 0071                      _PORTAbits 000C  
             __CFG_FOSC$INTOSC 0000                      _TRISAbits 008C                      _TRISCbits 008E  
                   _updateFuzz 0021       HEF_ByteArrayRead@wordAdd 0078        setFeedbackState@f_state 0048  
  __end_of_ConfigureOscillator 03AC        HEF_ByteArrayWrite@block 0079        HEF_ByteArrayWrite@count 0075  
                _setBoostState 01B0                 __end_of___lmul 0281            start_initialization 000E  
                  __end_of_isr 000D           __end_of_setFuzzState 01B0       __size_of_updateFuzzState 000D  
                   initBoost@i 004D                 ?_setBoostState 004B                       ??___lmul 0079  
                  __pdataBANK0 0038    FLASH_EraseBlock@GIEBitValue 0073       __end_of_FLASH_EraseBlock 02E2  
       __size_of_getBoostState 000C           setBoostState@f_state 004B      __size_of_setFeedbackState 0034  
                    ___latbits 0000                  __pcstackBANK0 0046                    ?_updateFuzz 004D  
            ?_initStateManager 0070                       ?_InitApp 0070              __size_of_initFuzz 0011  
            __size_of_init_adc 000A             ??_initStateManager 007B      __size_of_updateBoostState 000D  
  HEF_ByteArrayWrite@blockAddr 007A                     saveState@r 007C                      _initBoost 0342  
                     ?_wait_ms 0046    HEF_ByteArrayWrite@byteArray 0074                  _getBoostState 0385  
                     _LATAbits 010C                ??_setBoostState 007D                       _LATCbits 010E  
                    clear_ram0 039B                      _saveState 0332    __size_of_HEF_ByteArrayWrite 0053  
                    _fuzz_down 0028                       _PIR1bits 0011      FLASH_EraseBlock@startAddr 0071  
            ??_updateFuzzState 007D               ??_FLASH_ReadWord 0073            __size_of_updateFuzz 00A7  
                   _ADCON0bits 009D                     _ADCON1bits 009E          __size_of_setFuzzState 003A  
                  _boost_state 0038                     ?_initBoost 0070              ___lmul@multiplier 0071  
               ?_getBoostState 0047                     ?_saveState 0070                  ??_updateBoost 004F  
             __size_of_InitApp 0015                   _setFuzzState 0176                     _ANSELAbits 018C  
             _setFeedbackState 01EA                       __ptext10 0281                       __ptext11 0252  
                     __ptext20 02FB                       __ptext12 036C                       __ptext21 0391  
                     __ptext13 0332                       __ptext22 03A7                       __ptext14 0123  
                     __ptext15 02C6                       __ptext16 0385                       __ptext17 02A9  
                     __ptext18 021E                       __ptext19 02E2               __size_of_wait_ms 0028  
                     _boost_up 003A                   _fuzz_pressed 002A                       _initFuzz 0321  
                     _init_adc 0391                  __size_of_main 0011   __size_of_ConfigureOscillator 0005  
                     int$flags 007E               _updateBoostState 036C                _fuzz_turning_on 002E  
          __end_of_updateBoost 0123               _last_boost_state 0032              ?_FLASH_EraseBlock 0071  
           ??_FLASH_EraseBlock 0073                     _INTCONbits 000B                   ??_updateFuzz 004F  
                  ??_initBoost 007D                ??_getBoostState 007D                       intlevel1 0000  
                   _PMCON1bits 0195              initStateManager@r 0046  HEF_ByteArrayWrite@GIEBitValue 0078  
            __CFG_CLKOUTEN$OFF 0000                    ??_saveState 0046                    _fuzz_toggle 002C  
                   _OSCCONbits 0099                  ?_getFuzzState 0047             __end_of_updateFuzz 00C8  
                _isInitialized 0030                   wait_ms@timel 0020      __size_of_initStateManager 001D  
              _updateFuzzState 035F                 ??_getFuzzState 007D                    _updateBoost 00C8  
